/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface OperatorInterfaceContract
  extends Truffle.Contract<OperatorInterfaceInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<OperatorInterfaceInstance>;
}

type AllEvents = never;

export interface OperatorInterfaceInstance extends Truffle.ContractInstance {
  cancelOracleRequest: {
    (
      requestId: string,
      payment: number | BN | string,
      callbackFunctionId: string,
      expiration: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      requestId: string,
      payment: number | BN | string,
      callbackFunctionId: string,
      expiration: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      requestId: string,
      payment: number | BN | string,
      callbackFunctionId: string,
      expiration: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      requestId: string,
      payment: number | BN | string,
      callbackFunctionId: string,
      expiration: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fulfillOracleRequest: {
    (
      requestId: string,
      payment: number | BN | string,
      callbackAddress: string,
      callbackFunctionId: string,
      expiration: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      requestId: string,
      payment: number | BN | string,
      callbackAddress: string,
      callbackFunctionId: string,
      expiration: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      requestId: string,
      payment: number | BN | string,
      callbackAddress: string,
      callbackFunctionId: string,
      expiration: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      requestId: string,
      payment: number | BN | string,
      callbackAddress: string,
      callbackFunctionId: string,
      expiration: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isAuthorizedSender(
    node: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  oracleRequest: {
    (
      sender: string,
      requestPrice: number | BN | string,
      serviceAgreementID: string,
      callbackAddress: string,
      callbackFunctionId: string,
      nonce: number | BN | string,
      dataVersion: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      sender: string,
      requestPrice: number | BN | string,
      serviceAgreementID: string,
      callbackAddress: string,
      callbackFunctionId: string,
      nonce: number | BN | string,
      dataVersion: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string,
      requestPrice: number | BN | string,
      serviceAgreementID: string,
      callbackAddress: string,
      callbackFunctionId: string,
      nonce: number | BN | string,
      dataVersion: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string,
      requestPrice: number | BN | string,
      serviceAgreementID: string,
      callbackAddress: string,
      callbackFunctionId: string,
      nonce: number | BN | string,
      dataVersion: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      recipient: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      recipient: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      recipient: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawable(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  requestOracleData: {
    (
      sender: string,
      payment: number | BN | string,
      specId: string,
      callbackAddress: string,
      callbackFunctionId: string,
      nonce: number | BN | string,
      dataVersion: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      sender: string,
      payment: number | BN | string,
      specId: string,
      callbackAddress: string,
      callbackFunctionId: string,
      nonce: number | BN | string,
      dataVersion: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string,
      payment: number | BN | string,
      specId: string,
      callbackAddress: string,
      callbackFunctionId: string,
      nonce: number | BN | string,
      dataVersion: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string,
      payment: number | BN | string,
      specId: string,
      callbackAddress: string,
      callbackFunctionId: string,
      nonce: number | BN | string,
      dataVersion: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fulfillOracleRequest2: {
    (
      requestId: string,
      payment: number | BN | string,
      callbackAddress: string,
      callbackFunctionId: string,
      expiration: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      requestId: string,
      payment: number | BN | string,
      callbackAddress: string,
      callbackFunctionId: string,
      expiration: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      requestId: string,
      payment: number | BN | string,
      callbackAddress: string,
      callbackFunctionId: string,
      expiration: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      requestId: string,
      payment: number | BN | string,
      callbackAddress: string,
      callbackFunctionId: string,
      expiration: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  ownerTransferAndCall: {
    (
      to: string,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      to: string,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      to: string,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distributeFunds: {
    (
      receivers: string[],
      amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      receivers: string[],
      amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      receivers: string[],
      amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      receivers: string[],
      amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getAuthorizedSenders: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<string[]>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setAuthorizedSenders: {
    (senders: string[], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      senders: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      senders: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      senders: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getForwarder: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<string>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  methods: {
    cancelOracleRequest: {
      (
        requestId: string,
        payment: number | BN | string,
        callbackFunctionId: string,
        expiration: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        requestId: string,
        payment: number | BN | string,
        callbackFunctionId: string,
        expiration: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        requestId: string,
        payment: number | BN | string,
        callbackFunctionId: string,
        expiration: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        requestId: string,
        payment: number | BN | string,
        callbackFunctionId: string,
        expiration: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    fulfillOracleRequest: {
      (
        requestId: string,
        payment: number | BN | string,
        callbackAddress: string,
        callbackFunctionId: string,
        expiration: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        requestId: string,
        payment: number | BN | string,
        callbackAddress: string,
        callbackFunctionId: string,
        expiration: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        requestId: string,
        payment: number | BN | string,
        callbackAddress: string,
        callbackFunctionId: string,
        expiration: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        requestId: string,
        payment: number | BN | string,
        callbackAddress: string,
        callbackFunctionId: string,
        expiration: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    isAuthorizedSender(
      node: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    oracleRequest: {
      (
        sender: string,
        requestPrice: number | BN | string,
        serviceAgreementID: string,
        callbackAddress: string,
        callbackFunctionId: string,
        nonce: number | BN | string,
        dataVersion: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        sender: string,
        requestPrice: number | BN | string,
        serviceAgreementID: string,
        callbackAddress: string,
        callbackFunctionId: string,
        nonce: number | BN | string,
        dataVersion: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        sender: string,
        requestPrice: number | BN | string,
        serviceAgreementID: string,
        callbackAddress: string,
        callbackFunctionId: string,
        nonce: number | BN | string,
        dataVersion: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        sender: string,
        requestPrice: number | BN | string,
        serviceAgreementID: string,
        callbackAddress: string,
        callbackFunctionId: string,
        nonce: number | BN | string,
        dataVersion: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    withdraw: {
      (
        recipient: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        recipient: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        recipient: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        recipient: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    withdrawable(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    requestOracleData: {
      (
        sender: string,
        payment: number | BN | string,
        specId: string,
        callbackAddress: string,
        callbackFunctionId: string,
        nonce: number | BN | string,
        dataVersion: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        sender: string,
        payment: number | BN | string,
        specId: string,
        callbackAddress: string,
        callbackFunctionId: string,
        nonce: number | BN | string,
        dataVersion: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        sender: string,
        payment: number | BN | string,
        specId: string,
        callbackAddress: string,
        callbackFunctionId: string,
        nonce: number | BN | string,
        dataVersion: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        sender: string,
        payment: number | BN | string,
        specId: string,
        callbackAddress: string,
        callbackFunctionId: string,
        nonce: number | BN | string,
        dataVersion: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    fulfillOracleRequest2: {
      (
        requestId: string,
        payment: number | BN | string,
        callbackAddress: string,
        callbackFunctionId: string,
        expiration: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        requestId: string,
        payment: number | BN | string,
        callbackAddress: string,
        callbackFunctionId: string,
        expiration: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        requestId: string,
        payment: number | BN | string,
        callbackAddress: string,
        callbackFunctionId: string,
        expiration: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        requestId: string,
        payment: number | BN | string,
        callbackAddress: string,
        callbackFunctionId: string,
        expiration: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    ownerTransferAndCall: {
      (
        to: string,
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        to: string,
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        to: string,
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        to: string,
        value: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    distributeFunds: {
      (
        receivers: string[],
        amounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        receivers: string[],
        amounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        receivers: string[],
        amounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        receivers: string[],
        amounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getAuthorizedSenders: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<string[]>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    setAuthorizedSenders: {
      (senders: string[], txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        senders: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        senders: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        senders: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getForwarder: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<string>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
