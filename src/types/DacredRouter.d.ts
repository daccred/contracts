/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface DacredRouterContract
  extends Truffle.Contract<DacredRouterInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<DacredRouterInstance>;
}

export interface ChainlinkCancelled {
  name: "ChainlinkCancelled";
  args: {
    id: string;
    0: string;
  };
}

export interface ChainlinkFulfilled {
  name: "ChainlinkFulfilled";
  args: {
    id: string;
    0: string;
  };
}

export interface ChainlinkRequested {
  name: "ChainlinkRequested";
  args: {
    id: string;
    0: string;
  };
}

export interface NewContractCreated {
  name: "NewContractCreated";
  args: {
    contractAddress: string;
    createdAt: BN;
    0: string;
    1: BN;
  };
}

type AllEvents =
  | ChainlinkCancelled
  | ChainlinkFulfilled
  | ChainlinkRequested
  | NewContractCreated;

export interface DacredRouterInstance extends Truffle.ContractInstance {
  _uri_(txDetails?: Truffle.TransactionDetails): Promise<string>;

  credentials(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: string; 2: string; 3: BN }>;

  pass(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  createContractForClient: {
    (
      name: string,
      certId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      name: string,
      certId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      name: string,
      certId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      name: string,
      certId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setRequestURI: {
    (_requestURI: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _requestURI: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _requestURI: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _requestURI: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  validateRecipient: {
    (
      _claimContractAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _claimContractAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _claimContractAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _claimContractAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Receive the response in the form of bool
   */
  fulfill: {
    (
      _requestId: string,
      _pass: boolean,
      contractAddress: string,
      id: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _requestId: string,
      _pass: boolean,
      contractAddress: string,
      id: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _requestId: string,
      _pass: boolean,
      contractAddress: string,
      id: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _requestId: string,
      _pass: boolean,
      contractAddress: string,
      id: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    _uri_(txDetails?: Truffle.TransactionDetails): Promise<string>;

    credentials(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: string; 2: string; 3: BN }>;

    pass(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    createContractForClient: {
      (
        name: string,
        certId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        name: string,
        certId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        name: string,
        certId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        name: string,
        certId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setRequestURI: {
      (_requestURI: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _requestURI: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _requestURI: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _requestURI: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    validateRecipient: {
      (
        _claimContractAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _claimContractAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        _claimContractAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _claimContractAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Receive the response in the form of bool
     */
    fulfill: {
      (
        _requestId: string,
        _pass: boolean,
        contractAddress: string,
        id: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _requestId: string,
        _pass: boolean,
        contractAddress: string,
        id: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _requestId: string,
        _pass: boolean,
        contractAddress: string,
        id: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _requestId: string,
        _pass: boolean,
        contractAddress: string,
        id: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
