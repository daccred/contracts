/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface OracleInterfaceContract
  extends Truffle.Contract<OracleInterfaceInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<OracleInterfaceInstance>;
}

type AllEvents = never;

export interface OracleInterfaceInstance extends Truffle.ContractInstance {
  fulfillOracleRequest: {
    (
      requestId: string,
      payment: number | BN | string,
      callbackAddress: string,
      callbackFunctionId: string,
      expiration: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      requestId: string,
      payment: number | BN | string,
      callbackAddress: string,
      callbackFunctionId: string,
      expiration: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      requestId: string,
      payment: number | BN | string,
      callbackAddress: string,
      callbackFunctionId: string,
      expiration: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      requestId: string,
      payment: number | BN | string,
      callbackAddress: string,
      callbackFunctionId: string,
      expiration: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isAuthorizedSender(
    node: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  withdraw: {
    (
      recipient: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      recipient: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      recipient: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawable(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  methods: {
    fulfillOracleRequest: {
      (
        requestId: string,
        payment: number | BN | string,
        callbackAddress: string,
        callbackFunctionId: string,
        expiration: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        requestId: string,
        payment: number | BN | string,
        callbackAddress: string,
        callbackFunctionId: string,
        expiration: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        requestId: string,
        payment: number | BN | string,
        callbackAddress: string,
        callbackFunctionId: string,
        expiration: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        requestId: string,
        payment: number | BN | string,
        callbackAddress: string,
        callbackFunctionId: string,
        expiration: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    isAuthorizedSender(
      node: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    withdraw: {
      (
        recipient: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        recipient: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        recipient: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        recipient: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    withdrawable(txDetails?: Truffle.TransactionDetails): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
