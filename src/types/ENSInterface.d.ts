/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ENSInterfaceContract
  extends Truffle.Contract<ENSInterfaceInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ENSInterfaceInstance>;
}

export interface NewOwner {
  name: "NewOwner";
  args: {
    node: string;
    label: string;
    owner: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface NewResolver {
  name: "NewResolver";
  args: {
    node: string;
    resolver: string;
    0: string;
    1: string;
  };
}

export interface NewTTL {
  name: "NewTTL";
  args: {
    node: string;
    ttl: BN;
    0: string;
    1: BN;
  };
}

export interface Transfer {
  name: "Transfer";
  args: {
    node: string;
    owner: string;
    0: string;
    1: string;
  };
}

type AllEvents = NewOwner | NewResolver | NewTTL | Transfer;

export interface ENSInterfaceInstance extends Truffle.ContractInstance {
  setSubnodeOwner: {
    (
      node: string,
      label: string,
      owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      node: string,
      label: string,
      owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      node: string,
      label: string,
      owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      node: string,
      label: string,
      owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setResolver: {
    (
      node: string,
      resolver: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      node: string,
      resolver: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      node: string,
      resolver: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      node: string,
      resolver: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setOwner: {
    (
      node: string,
      owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      node: string,
      owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      node: string,
      owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      node: string,
      owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setTTL: {
    (
      node: string,
      ttl: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      node: string,
      ttl: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      node: string,
      ttl: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      node: string,
      ttl: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  owner(node: string, txDetails?: Truffle.TransactionDetails): Promise<string>;

  resolver(
    node: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  ttl(node: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

  methods: {
    setSubnodeOwner: {
      (
        node: string,
        label: string,
        owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        node: string,
        label: string,
        owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        node: string,
        label: string,
        owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        node: string,
        label: string,
        owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setResolver: {
      (
        node: string,
        resolver: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        node: string,
        resolver: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        node: string,
        resolver: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        node: string,
        resolver: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setOwner: {
      (
        node: string,
        owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        node: string,
        owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        node: string,
        owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        node: string,
        owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setTTL: {
      (
        node: string,
        ttl: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        node: string,
        ttl: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        node: string,
        ttl: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        node: string,
        ttl: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    owner(
      node: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    resolver(
      node: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    ttl(node: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
