/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ERC721ABurnableMock,
  ERC721ABurnableMockInterface,
} from "../../../contracts/mocks/ERC721ABurnableMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ApprovalCallerNotOwnerNorApproved",
    type: "error",
  },
  {
    inputs: [],
    name: "ApprovalQueryForNonexistentToken",
    type: "error",
  },
  {
    inputs: [],
    name: "ApprovalToCurrentOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "ApproveToCaller",
    type: "error",
  },
  {
    inputs: [],
    name: "BalanceQueryForZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "MintToZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "MintZeroQuantity",
    type: "error",
  },
  {
    inputs: [],
    name: "OwnerQueryForNonexistentToken",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "reason",
        type: "string",
      },
    ],
    name: "SetURICannotBeEmpty",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferCallerNotOwnerNorApproved",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferFromIncorrectOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferToNonERC721ReceiverImplementer",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferToZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "URIQueryForNonexistentToken",
    type: "error",
  },
  {
    inputs: [],
    name: "URIRequestForExistentToken",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "exists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getOwnershipAt",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "addr",
            type: "address",
          },
          {
            internalType: "uint64",
            name: "startTimestamp",
            type: "uint64",
          },
          {
            internalType: "bool",
            name: "burned",
            type: "bool",
          },
        ],
        internalType: "struct IERC721A.TokenOwnership",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "quantity",
        type: "uint256",
      },
    ],
    name: "safeMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalMinted",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001630380380620016308339810160408190526200003491620001eb565b8181818181600290805190602001906200005092919062000078565b5080516200006690600390602084019062000078565b50600080555062000292945050505050565b828054620000869062000255565b90600052602060002090601f016020900481019282620000aa5760008555620000f5565b82601f10620000c557805160ff1916838001178555620000f5565b82800160010185558215620000f5579182015b82811115620000f5578251825591602001919060010190620000d8565b506200010392915062000107565b5090565b5b8082111562000103576000815560010162000108565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200014657600080fd5b81516001600160401b03808211156200016357620001636200011e565b604051601f8301601f19908116603f011681019082821181831017156200018e576200018e6200011e565b81604052838152602092508683858801011115620001ab57600080fd5b600091505b83821015620001cf5785820183015181830184015290820190620001b0565b83821115620001e15760008385830101525b9695505050505050565b60008060408385031215620001ff57600080fd5b82516001600160401b03808211156200021757600080fd5b620002258683870162000134565b935060208501519150808211156200023c57600080fd5b506200024b8582860162000134565b9150509250929050565b600181811c908216806200026a57607f821691505b602082108114156200028c57634e487b7160e01b600052602260045260246000fd5b50919050565b61138e80620002a26000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80636352211e116100ad578063a2309ff811610071578063a2309ff814610259578063b88d4fde14610261578063c87b56dd14610274578063e985e9c514610287578063f2523633146102c357600080fd5b80636352211e1461020557806370a082311461021857806395d89b411461022b578063a144819414610233578063a22cb4651461024657600080fd5b806318160ddd116100f457806318160ddd146101a357806323b872dd146101b957806342842e0e146101cc57806342966c68146101df5780634f558e79146101f257600080fd5b806301ffc9a71461012657806306fdde031461014e578063081812fc14610163578063095ea7b31461018e575b600080fd5b610139610134366004610fce565b610370565b60405190151581526020015b60405180910390f35b6101566103c2565b604051610145919061104a565b61017661017136600461105d565b610454565b6040516001600160a01b039091168152602001610145565b6101a161019c366004611092565b610498565b005b600154600054035b604051908152602001610145565b6101a16101c73660046110bc565b61051f565b6101a16101da3660046110bc565b61052a565b6101a16101ed36600461105d565b610545565b61013961020036600461105d565b610553565b61017661021336600461105d565b61055e565b6101ab6102263660046110f8565b610570565b6101566105bf565b6101a1610241366004611092565b6105ce565b6101a1610254366004611113565b6105dc565b6000546101ab565b6101a161026f366004611165565b610672565b61015661028236600461105d565b6106bc565b610139610295366004611241565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b6103396102d136600461105d565b604080516060808201835260008083526020808401829052928401819052938452600482529282902082519384018352546001600160a01b0381168452600160a01b810467ffffffffffffffff1691840191909152600160e01b900460ff1615159082015290565b6040805182516001600160a01b0316815260208084015167ffffffffffffffff169082015291810151151590820152606001610145565b60006001600160e01b031982166380ac58cd60e01b14806103a157506001600160e01b03198216635b5e139f60e01b145b806103bc57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600280546103d190611274565b80601f01602080910402602001604051908101604052809291908181526020018280546103fd90611274565b801561044a5780601f1061041f5761010080835404028352916020019161044a565b820191906000526020600020905b81548152906001019060200180831161042d57829003601f168201915b5050505050905090565b600061045f826107d1565b61047c576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006104a38261055e565b9050806001600160a01b0316836001600160a01b031614156104d85760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b0382161461050f576104f28133610295565b61050f576040516367d9dca160e11b815260040160405180910390fd5b61051a8383836107fc565b505050565b61051a838383610858565b61051a83838360405180602001604052806000815250610672565b610550816001610a35565b50565b60006103bc826107d1565b600061056982610bea565b5192915050565b60006001600160a01b038216610599576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205467ffffffffffffffff1690565b6060600380546103d190611274565b6105d88282610d06565b5050565b6001600160a01b0382163314156106065760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61067d848484610858565b6001600160a01b0383163b156106b65761069984848484610d20565b6106b6576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b60606106c7826107d1565b6106e457604051630a14c4b560e41b815260040160405180910390fd5b600082815260086020526040812080546106fd90611274565b80601f016020809104026020016040519081016040528092919081815260200182805461072990611274565b80156107765780601f1061074b57610100808354040283529160200191610776565b820191906000526020600020905b81548152906001019060200180831161075957829003601f168201915b50505050509050600061079460408051602081019091526000815290565b90508051600014156107a657816107c9565b80826040516020016107b99291906112af565b6040516020818303038152906040525b949350505050565b60008054821080156103bc575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600061086382610bea565b9050836001600160a01b031681600001516001600160a01b03161461089a5760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b03861614806108b857506108b88533610295565b806108d35750336108c884610454565b6001600160a01b0316145b9050806108f357604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b03841661091a57604051633a954ecd60e21b815260040160405180910390fd5b610926600084876107fc565b6001600160a01b038581166000908152600560209081526040808320805467ffffffffffffffff1980821667ffffffffffffffff92831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b429092169190910217835587018084529220805491939091166109fc5760005482146109fc578054602086015167ffffffffffffffff16600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b031660008051602061133983398151915260405160405180910390a45050505050565b6000610a4083610bea565b80519091508215610aa6576000336001600160a01b0383161480610a695750610a698233610295565b80610a84575033610a7986610454565b6001600160a01b0316145b905080610aa457604051632ce44b5f60e11b815260040160405180910390fd5b505b610ab2600085836107fc565b6001600160a01b0380821660008181526005602090815260408083208054600160801b60001967ffffffffffffffff80841691909101811667ffffffffffffffff198416811783900482166001908101831690930277ffffffffffffffff0000000000000000ffffffffffffffff19909416179290921783558b86526004909452828520805460ff60e01b1942909316600160a01b026001600160e01b03199091169097179690961716600160e01b178555918901808452922080549194909116610bb2576000548214610bb2578054602087015167ffffffffffffffff16600160a01b026001600160e01b03199091166001600160a01b038716171781555b5050604051869250600091506001600160a01b03841690600080516020611339833981519152908390a4505060018054810190555050565b604080516060810182526000808252602082018190529181019190915281600054811015610ced57600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff16151591810182905290610ceb5780516001600160a01b031615610c81579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b820467ffffffffffffffff1693830193909352600160e01b900460ff1615159281019290925215610ce6579392505050565b610c81565b505b604051636f96cda160e11b815260040160405180910390fd5b6105d8828260405180602001604052806000815250610e17565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290610d559033908990889088906004016112de565b602060405180830381600087803b158015610d6f57600080fd5b505af1925050508015610d9f575060408051601f3d908101601f19168201909252610d9c9181019061131b565b60015b610dfa573d808015610dcd576040519150601f19603f3d011682016040523d82523d6000602084013e610dd2565b606091505b508051610df2576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b6000546001600160a01b038416610e4057604051622e076360e81b815260040160405180910390fd5b82610e5e5760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038416600081815260056020908152604080832080546fffffffffffffffffffffffffffffffff19811667ffffffffffffffff8083168b0181169182176801000000000000000067ffffffffffffffff1990941690921783900481168b01811690920217909155858452600490925290912080546001600160e01b0319168317600160a01b42909316929092029190911790558190818501903b15610f75575b60405182906001600160a01b03881690600090600080516020611339833981519152908290a4610f3e6000878480600101955087610d20565b610f5b576040516368d2bf6b60e11b815260040160405180910390fd5b808210610f05578260005414610f7057600080fd5b610fa8565b5b6040516001830192906001600160a01b03881690600090600080516020611339833981519152908290a4808210610f76575b5060009081556106b69085838684565b6001600160e01b03198116811461055057600080fd5b600060208284031215610fe057600080fd5b8135610feb81610fb8565b9392505050565b60005b8381101561100d578181015183820152602001610ff5565b838111156106b65750506000910152565b60008151808452611036816020860160208601610ff2565b601f01601f19169290920160200192915050565b602081526000610feb602083018461101e565b60006020828403121561106f57600080fd5b5035919050565b80356001600160a01b038116811461108d57600080fd5b919050565b600080604083850312156110a557600080fd5b6110ae83611076565b946020939093013593505050565b6000806000606084860312156110d157600080fd5b6110da84611076565b92506110e860208501611076565b9150604084013590509250925092565b60006020828403121561110a57600080fd5b610feb82611076565b6000806040838503121561112657600080fd5b61112f83611076565b91506020830135801515811461114457600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561117b57600080fd5b61118485611076565b935061119260208601611076565b925060408501359150606085013567ffffffffffffffff808211156111b657600080fd5b818701915087601f8301126111ca57600080fd5b8135818111156111dc576111dc61114f565b604051601f8201601f19908116603f011681019083821181831017156112045761120461114f565b816040528281528a602084870101111561121d57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561125457600080fd5b61125d83611076565b915061126b60208401611076565b90509250929050565b600181811c9082168061128857607f821691505b602082108114156112a957634e487b7160e01b600052602260045260246000fd5b50919050565b600083516112c1818460208801610ff2565b8351908301906112d5818360208801610ff2565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906113119083018461101e565b9695505050505050565b60006020828403121561132d57600080fd5b8151610feb81610fb856feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220046781ea3609aad4ec28ab2a70cc05352a4b2884c5239b7e04b2ff95965a349064736f6c63430008090033";

type ERC721ABurnableMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC721ABurnableMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC721ABurnableMock__factory extends ContractFactory {
  constructor(...args: ERC721ABurnableMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC721ABurnableMock> {
    return super.deploy(
      name_,
      symbol_,
      overrides || {}
    ) as Promise<ERC721ABurnableMock>;
  }
  override getDeployTransaction(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name_, symbol_, overrides || {});
  }
  override attach(address: string): ERC721ABurnableMock {
    return super.attach(address) as ERC721ABurnableMock;
  }
  override connect(signer: Signer): ERC721ABurnableMock__factory {
    return super.connect(signer) as ERC721ABurnableMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721ABurnableMockInterface {
    return new utils.Interface(_abi) as ERC721ABurnableMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC721ABurnableMock {
    return new Contract(address, _abi, signerOrProvider) as ERC721ABurnableMock;
  }
}
