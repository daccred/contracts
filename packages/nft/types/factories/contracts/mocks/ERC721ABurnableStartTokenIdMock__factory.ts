/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ERC721ABurnableStartTokenIdMock,
  ERC721ABurnableStartTokenIdMockInterface,
} from "../../../contracts/mocks/ERC721ABurnableStartTokenIdMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "startTokenId_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ApprovalCallerNotOwnerNorApproved",
    type: "error",
  },
  {
    inputs: [],
    name: "ApprovalQueryForNonexistentToken",
    type: "error",
  },
  {
    inputs: [],
    name: "ApprovalToCurrentOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "ApproveToCaller",
    type: "error",
  },
  {
    inputs: [],
    name: "BalanceQueryForZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "MintToZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "MintZeroQuantity",
    type: "error",
  },
  {
    inputs: [],
    name: "OwnerQueryForNonexistentToken",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferCallerNotOwnerNorApproved",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferFromIncorrectOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferToNonERC721ReceiverImplementer",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferToZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "URIQueryForNonexistentToken",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "exists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getOwnershipAt",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "addr",
            type: "address",
          },
          {
            internalType: "uint64",
            name: "startTimestamp",
            type: "uint64",
          },
          {
            internalType: "bool",
            name: "burned",
            type: "bool",
          },
        ],
        internalType: "struct IERC721A.TokenOwnership",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "quantity",
        type: "uint256",
      },
    ],
    name: "safeMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "startTokenId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalMinted",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620017ab380380620017ab8339810160408190526200003491620001f4565b6000819055825183908390829082906200005690600390602085019062000081565b5080516200006c90600490602084019062000081565b5060005460015550620002a495505050505050565b8280546200008f9062000267565b90600052602060002090601f016020900481019282620000b35760008555620000fe565b82601f10620000ce57805160ff1916838001178555620000fe565b82800160010185558215620000fe579182015b82811115620000fe578251825591602001919060010190620000e1565b506200010c92915062000110565b5090565b5b808211156200010c576000815560010162000111565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200014f57600080fd5b81516001600160401b03808211156200016c576200016c62000127565b604051601f8301601f19908116603f0116810190828211818310171562000197576200019762000127565b81604052838152602092508683858801011115620001b457600080fd5b600091505b83821015620001d85785820183015181830184015290820190620001b9565b83821115620001ea5760008385830101525b9695505050505050565b6000806000606084860312156200020a57600080fd5b83516001600160401b03808211156200022257600080fd5b62000230878388016200013d565b945060208601519150808211156200024757600080fd5b5062000256868287016200013d565b925050604084015190509250925092565b600181811c908216806200027c57607f821691505b602082108114156200029e57634e487b7160e01b600052602260045260246000fd5b50919050565b6114f780620002b46000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806370a08231116100ad578063b88d4fde11610071578063b88d4fde14610274578063c87b56dd14610287578063e6798baa1461029a578063e985e9c5146102a3578063f2523633146102df57600080fd5b806370a082311461022757806395d89b411461023a578063a144819414610242578063a22cb46514610255578063a2309ff81461026857600080fd5b806323b872dd116100f457806323b872dd146101c857806342842e0e146101db57806342966c68146101ee5780634f558e79146102015780636352211e1461021457600080fd5b806301ffc9a71461013157806306fdde0314610159578063081812fc1461016e578063095ea7b31461019957806318160ddd146101ae575b600080fd5b61014461013f36600461108a565b61038c565b60405190151581526020015b60405180910390f35b6101616103de565b60405161015091906110ff565b61018161017c366004611112565b610470565b6040516001600160a01b039091168152602001610150565b6101ac6101a7366004611147565b6104b4565b005b60005460025460015403035b604051908152602001610150565b6101ac6101d6366004611171565b61053b565b6101ac6101e9366004611171565b610546565b6101ac6101fc366004611112565b610561565b61014461020f366004611112565b61056f565b610181610222366004611112565b61057a565b6101ba6102353660046111ad565b61058c565b6101616105db565b6101ac610250366004611147565b6105ea565b6101ac6102633660046111c8565b6105f8565b600054600154036101ba565b6101ac61028236600461121a565b61068e565b610161610295366004611112565b6106d8565b6101ba60005481565b6101446102b13660046112f6565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205460ff1690565b6103556102ed366004611112565b604080516060808201835260008083526020808401829052928401819052938452600582529282902082519384018352546001600160a01b0381168452600160a01b810467ffffffffffffffff1691840191909152600160e01b900460ff1615159082015290565b6040805182516001600160a01b0316815260208084015167ffffffffffffffff169082015291810151151590820152606001610150565b60006001600160e01b031982166380ac58cd60e01b14806103bd57506001600160e01b03198216635b5e139f60e01b145b806103d857506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600380546103ed90611329565b80601f016020809104026020016040519081016040528092919081815260200182805461041990611329565b80156104665780601f1061043b57610100808354040283529160200191610466565b820191906000526020600020905b81548152906001019060200180831161044957829003601f168201915b5050505050905090565b600061047b8261076a565b610498576040516333d1c03960e21b815260040160405180910390fd5b506000908152600760205260409020546001600160a01b031690565b60006104bf8261057a565b9050806001600160a01b0316836001600160a01b031614156104f45760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b0382161461052b5761050e81336102b1565b61052b576040516367d9dca160e11b815260040160405180910390fd5b6105368383836107aa565b505050565b610536838383610806565b6105368383836040518060200160405280600081525061068e565b61056c8160016109e3565b50565b60006103d88261076a565b600061058582610b99565b5192915050565b60006001600160a01b0382166105b5576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b031660009081526006602052604090205467ffffffffffffffff1690565b6060600480546103ed90611329565b6105f48282610cc4565b5050565b6001600160a01b0382163314156106225760405163b06307db60e01b815260040160405180910390fd5b3360008181526008602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610699848484610806565b6001600160a01b0383163b156106d2576106b584848484610cde565b6106d2576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b60606106e38261076a565b61070057604051630a14c4b560e41b815260040160405180910390fd5b600061071760408051602081019091526000815290565b90508051600014156107385760405180602001604052806000815250610763565b8061074284610dd6565b604051602001610753929190611364565b6040516020818303038152906040525b9392505050565b60008161077660005490565b11158015610785575060015482105b80156103d8575050600090815260056020526040902054600160e01b900460ff161590565b60008281526007602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600061081182610b99565b9050836001600160a01b031681600001516001600160a01b0316146108485760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b0386161480610866575061086685336102b1565b8061088157503361087684610470565b6001600160a01b0316145b9050806108a157604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b0384166108c857604051633a954ecd60e21b815260040160405180910390fd5b6108d4600084876107aa565b6001600160a01b038581166000908152600660209081526040808320805467ffffffffffffffff1980821667ffffffffffffffff92831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600590945282852080546001600160e01b031916909417600160a01b429092169190910217835587018084529220805491939091166109aa5760015482146109aa578054602086015167ffffffffffffffff16600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b03166000805160206114a283398151915260405160405180910390a45050505050565b60006109ee83610b99565b80519091508215610a54576000336001600160a01b0383161480610a175750610a1782336102b1565b80610a32575033610a2786610470565b6001600160a01b0316145b905080610a5257604051632ce44b5f60e11b815260040160405180910390fd5b505b610a60600085836107aa565b6001600160a01b0380821660008181526006602090815260408083208054600160801b60001967ffffffffffffffff80841691909101811667ffffffffffffffff198416811783900482166001908101831690930277ffffffffffffffff0000000000000000ffffffffffffffff19909416179290921783558b86526005909452828520805460ff60e01b1942909316600160a01b026001600160e01b03199091169097179690961716600160e01b178555918901808452922080549194909116610b60576001548214610b60578054602087015167ffffffffffffffff16600160a01b026001600160e01b03199091166001600160a01b038716171781555b5050604051869250600091506001600160a01b038416906000805160206114a2833981519152908390a450506002805460010190555050565b60408051606081018252600080825260208201819052918101919091528180610bc160005490565b11610cab57600154811015610cab57600081815260056020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff16151591810182905290610ca95780516001600160a01b031615610c3f579392505050565b5060001901600081815260056020908152604091829020825160608101845290546001600160a01b038116808352600160a01b820467ffffffffffffffff1693830193909352600160e01b900460ff1615159281019290925215610ca4579392505050565b610c3f565b505b604051636f96cda160e11b815260040160405180910390fd5b6105f4828260405180602001604052806000815250610ed4565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290610d13903390899088908890600401611393565b602060405180830381600087803b158015610d2d57600080fd5b505af1925050508015610d5d575060408051601f3d908101601f19168201909252610d5a918101906113d0565b60015b610db8573d808015610d8b576040519150601f19603f3d011682016040523d82523d6000602084013e610d90565b606091505b508051610db0576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b606081610dfa5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610e245780610e0e81611403565b9150610e1d9050600a83611434565b9150610dfe565b60008167ffffffffffffffff811115610e3f57610e3f611204565b6040519080825280601f01601f191660200182016040528015610e69576020820181803683370190505b5090505b8415610dce57610e7e600183611448565b9150610e8b600a8661145f565b610e96906030611473565b60f81b818381518110610eab57610eab61148b565b60200101906001600160f81b031916908160001a905350610ecd600a86611434565b9450610e6d565b6001546001600160a01b038416610efd57604051622e076360e81b815260040160405180910390fd5b82610f1b5760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038416600081815260066020908152604080832080546fffffffffffffffffffffffffffffffff19811667ffffffffffffffff8083168b0181169182176801000000000000000067ffffffffffffffff1990941690921783900481168b01811690920217909155858452600590925290912080546001600160e01b0319168317600160a01b42909316929092029190911790558190818501903b15611032575b60405182906001600160a01b038816906000906000805160206114a2833981519152908290a4610ffb6000878480600101955087610cde565b611018576040516368d2bf6b60e11b815260040160405180910390fd5b808210610fc257826001541461102d57600080fd5b611065565b5b6040516001830192906001600160a01b038816906000906000805160206114a2833981519152908290a4808210611033575b506001556106d2600085838684565b6001600160e01b03198116811461056c57600080fd5b60006020828403121561109c57600080fd5b813561076381611074565b60005b838110156110c25781810151838201526020016110aa565b838111156106d25750506000910152565b600081518084526110eb8160208601602086016110a7565b601f01601f19169290920160200192915050565b60208152600061076360208301846110d3565b60006020828403121561112457600080fd5b5035919050565b80356001600160a01b038116811461114257600080fd5b919050565b6000806040838503121561115a57600080fd5b6111638361112b565b946020939093013593505050565b60008060006060848603121561118657600080fd5b61118f8461112b565b925061119d6020850161112b565b9150604084013590509250925092565b6000602082840312156111bf57600080fd5b6107638261112b565b600080604083850312156111db57600080fd5b6111e48361112b565b9150602083013580151581146111f957600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561123057600080fd5b6112398561112b565b93506112476020860161112b565b925060408501359150606085013567ffffffffffffffff8082111561126b57600080fd5b818701915087601f83011261127f57600080fd5b81358181111561129157611291611204565b604051601f8201601f19908116603f011681019083821181831017156112b9576112b9611204565b816040528281528a60208487010111156112d257600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561130957600080fd5b6113128361112b565b91506113206020840161112b565b90509250929050565b600181811c9082168061133d57607f821691505b6020821081141561135e57634e487b7160e01b600052602260045260246000fd5b50919050565b600083516113768184602088016110a7565b83519083019061138a8183602088016110a7565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906113c6908301846110d3565b9695505050505050565b6000602082840312156113e257600080fd5b815161076381611074565b634e487b7160e01b600052601160045260246000fd5b6000600019821415611417576114176113ed565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826114435761144361141e565b500490565b60008282101561145a5761145a6113ed565b500390565b60008261146e5761146e61141e565b500690565b60008219821115611486576114866113ed565b500190565b634e487b7160e01b600052603260045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122073c24aa99480c5fda27896d88acf893d81d9ea6f408f78d991367b19b478863364736f6c63430008090033";

type ERC721ABurnableStartTokenIdMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC721ABurnableStartTokenIdMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC721ABurnableStartTokenIdMock__factory extends ContractFactory {
  constructor(...args: ERC721ABurnableStartTokenIdMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    startTokenId_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC721ABurnableStartTokenIdMock> {
    return super.deploy(
      name_,
      symbol_,
      startTokenId_,
      overrides || {}
    ) as Promise<ERC721ABurnableStartTokenIdMock>;
  }
  override getDeployTransaction(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    startTokenId_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name_,
      symbol_,
      startTokenId_,
      overrides || {}
    );
  }
  override attach(address: string): ERC721ABurnableStartTokenIdMock {
    return super.attach(address) as ERC721ABurnableStartTokenIdMock;
  }
  override connect(signer: Signer): ERC721ABurnableStartTokenIdMock__factory {
    return super.connect(signer) as ERC721ABurnableStartTokenIdMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721ABurnableStartTokenIdMockInterface {
    return new utils.Interface(
      _abi
    ) as ERC721ABurnableStartTokenIdMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC721ABurnableStartTokenIdMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ERC721ABurnableStartTokenIdMock;
  }
}
