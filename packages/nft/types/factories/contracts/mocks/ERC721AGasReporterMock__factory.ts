/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ERC721AGasReporterMock,
  ERC721AGasReporterMockInterface,
} from "../../../contracts/mocks/ERC721AGasReporterMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ApprovalCallerNotOwnerNorApproved",
    type: "error",
  },
  {
    inputs: [],
    name: "ApprovalQueryForNonexistentToken",
    type: "error",
  },
  {
    inputs: [],
    name: "ApprovalToCurrentOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "ApproveToCaller",
    type: "error",
  },
  {
    inputs: [],
    name: "BalanceQueryForZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "MintToZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "MintZeroQuantity",
    type: "error",
  },
  {
    inputs: [],
    name: "OwnerQueryForNonexistentToken",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferCallerNotOwnerNorApproved",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferFromIncorrectOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferToNonERC721ReceiverImplementer",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferToZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "URIQueryForNonexistentToken",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "mintOne",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "mintTen",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "safeMintOne",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "safeMintTen",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620017de380380620017de8339810160408190526200003491620001e6565b8151829082906200004d90600290602085019062000073565b5080516200006390600390602084019062000073565b5060008055506200028d92505050565b828054620000819062000250565b90600052602060002090601f016020900481019282620000a55760008555620000f0565b82601f10620000c057805160ff1916838001178555620000f0565b82800160010185558215620000f0579182015b82811115620000f0578251825591602001919060010190620000d3565b50620000fe92915062000102565b5090565b5b80821115620000fe576000815560010162000103565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200014157600080fd5b81516001600160401b03808211156200015e576200015e62000119565b604051601f8301601f19908116603f0116810190828211818310171562000189576200018962000119565b81604052838152602092508683858801011115620001a657600080fd5b600091505b83821015620001ca5785820183015181830184015290820190620001ab565b83821115620001dc5760008385830101525b9695505050505050565b60008060408385031215620001fa57600080fd5b82516001600160401b03808211156200021257600080fd5b62000220868387016200012f565b935060208501519150808211156200023757600080fd5b5062000246858286016200012f565b9150509250929050565b600181811c908216806200026557607f821691505b602082108114156200028757634e487b7160e01b600052602260045260246000fd5b50919050565b611541806200029d6000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806370a08231116100ad578063c87b56dd11610071578063c87b56dd14610259578063db6745f81461026c578063e985e9c51461027f578063ef9c0bec146102bb578063fa695a97146102ce57600080fd5b806370a082311461020557806381861f841461021857806395d89b411461022b578063a22cb46514610233578063b88d4fde1461024657600080fd5b806318160ddd116100f457806318160ddd146101a357806323b872dd146101b957806342842e0e146101cc57806342966c68146101df5780636352211e146101f257600080fd5b806301ffc9a71461012657806306fdde031461014e578063081812fc14610163578063095ea7b31461018e575b600080fd5b6101396101343660046110d4565b6102e1565b60405190151581526020015b60405180910390f35b610156610333565b6040516101459190611149565b61017661017136600461115c565b6103c5565b6040516001600160a01b039091168152602001610145565b6101a161019c366004611191565b610409565b005b600154600054035b604051908152602001610145565b6101a16101c73660046111bb565b610490565b6101a16101da3660046111bb565b61049b565b6101a16101ed36600461115c565b6104b6565b61017661020036600461115c565b6104c4565b6101ab6102133660046111f7565b6104d6565b6101a16102263660046111f7565b610525565b610156610530565b6101a1610241366004611212565b61053f565b6101a1610254366004611264565b6105d5565b61015661026736600461115c565b61061f565b6101a161027a3660046111f7565b6106b1565b61013961028d366004611340565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b6101a16102c93660046111f7565b6106bc565b6101a16102dc3660046111f7565b6106c7565b60006001600160e01b031982166380ac58cd60e01b148061031257506001600160e01b03198216635b5e139f60e01b145b8061032d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606002805461034290611373565b80601f016020809104026020016040519081016040528092919081815260200182805461036e90611373565b80156103bb5780601f10610390576101008083540402835291602001916103bb565b820191906000526020600020905b81548152906001019060200180831161039e57829003601f168201915b5050505050905090565b60006103d0826106d2565b6103ed576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b6000610414826104c4565b9050806001600160a01b0316836001600160a01b031614156104495760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b0382161461048057610463813361028d565b610480576040516367d9dca160e11b815260040160405180910390fd5b61048b8383836106fd565b505050565b61048b838383610759565b61048b838383604051806020016040528060008152506105d5565b6104c1816001610936565b50565b60006104cf82610aeb565b5192915050565b60006001600160a01b0382166104ff576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205467ffffffffffffffff1690565b6104c181600a610c07565b60606003805461034290611373565b6001600160a01b0382163314156105695760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6105e0848484610759565b6001600160a01b0383163b15610619576105fc84848484610c25565b610619576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b606061062a826106d2565b61064757604051630a14c4b560e41b815260040160405180910390fd5b600061065e60408051602081019091526000815290565b905080516000141561067f57604051806020016040528060008152506106aa565b8061068984610d1d565b60405160200161069a9291906113ae565b6040516020818303038152906040525b9392505050565b6104c1816001610c07565b6104c181600a610e1b565b6104c1816001610e1b565b600080548210801561032d575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600061076482610aeb565b9050836001600160a01b031681600001516001600160a01b03161461079b5760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b03861614806107b957506107b9853361028d565b806107d45750336107c9846103c5565b6001600160a01b0316145b9050806107f457604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b03841661081b57604051633a954ecd60e21b815260040160405180910390fd5b610827600084876106fd565b6001600160a01b038581166000908152600560209081526040808320805467ffffffffffffffff1980821667ffffffffffffffff92831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b429092169190910217835587018084529220805491939091166108fd5760005482146108fd578054602086015167ffffffffffffffff16600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b03166000805160206114ec83398151915260405160405180910390a45050505050565b600061094183610aeb565b805190915082156109a7576000336001600160a01b038316148061096a575061096a823361028d565b8061098557503361097a866103c5565b6001600160a01b0316145b9050806109a557604051632ce44b5f60e11b815260040160405180910390fd5b505b6109b3600085836106fd565b6001600160a01b0380821660008181526005602090815260408083208054600160801b60001967ffffffffffffffff80841691909101811667ffffffffffffffff198416811783900482166001908101831690930277ffffffffffffffff0000000000000000ffffffffffffffff19909416179290921783558b86526004909452828520805460ff60e01b1942909316600160a01b026001600160e01b03199091169097179690961716600160e01b178555918901808452922080549194909116610ab3576000548214610ab3578054602087015167ffffffffffffffff16600160a01b026001600160e01b03199091166001600160a01b038716171781555b5050604051869250600091506001600160a01b038416906000805160206114ec833981519152908390a4505060018054810190555050565b604080516060810182526000808252602082018190529181019190915281600054811015610bee57600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff16151591810182905290610bec5780516001600160a01b031615610b82579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b820467ffffffffffffffff1693830193909352600160e01b900460ff1615159281019290925215610be7579392505050565b610b82565b505b604051636f96cda160e11b815260040160405180910390fd5b610c21828260405180602001604052806000815250610f2b565b5050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290610c5a9033908990889088906004016113dd565b602060405180830381600087803b158015610c7457600080fd5b505af1925050508015610ca4575060408051601f3d908101601f19168201909252610ca19181019061141a565b60015b610cff573d808015610cd2576040519150601f19603f3d011682016040523d82523d6000602084013e610cd7565b606091505b508051610cf7576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b606081610d415750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610d6b5780610d558161144d565b9150610d649050600a8361147e565b9150610d45565b60008167ffffffffffffffff811115610d8657610d8661124e565b6040519080825280601f01601f191660200182016040528015610db0576020820181803683370190505b5090505b8415610d1557610dc5600183611492565b9150610dd2600a866114a9565b610ddd9060306114bd565b60f81b818381518110610df257610df26114d5565b60200101906001600160f81b031916908160001a905350610e14600a8661147e565b9450610db4565b6000546001600160a01b038316610e4457604051622e076360e81b815260040160405180910390fd5b81610e625760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038316600081815260056020908152604080832080546001600160801b0319811667ffffffffffffffff8083168a018116918217600160401b67ffffffffffffffff1990941690921783900481168a01811690920217909155858452600490925290912080546001600160e01b031916909217600160a01b4290921691909102179055808083015b6040516001830192906001600160a01b038716906000906000805160206114ec833981519152908290a4808210610ef15750600055505050565b6000546001600160a01b038416610f5457604051622e076360e81b815260040160405180910390fd5b82610f725760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038416600081815260056020908152604080832080546001600160801b0319811667ffffffffffffffff8083168b018116918217600160401b67ffffffffffffffff1990941690921783900481168b01811690920217909155858452600490925290912080546001600160e01b0319168317600160a01b42909316929092029190911790558190818501903b1561107b575b60405182906001600160a01b038816906000906000805160206114ec833981519152908290a46110446000878480600101955087610c25565b611061576040516368d2bf6b60e11b815260040160405180910390fd5b80821061100b57826000541461107657600080fd5b6110ae565b5b6040516001830192906001600160a01b038816906000906000805160206114ec833981519152908290a480821061107c575b5060009081556106199085838684565b6001600160e01b0319811681146104c157600080fd5b6000602082840312156110e657600080fd5b81356106aa816110be565b60005b8381101561110c5781810151838201526020016110f4565b838111156106195750506000910152565b600081518084526111358160208601602086016110f1565b601f01601f19169290920160200192915050565b6020815260006106aa602083018461111d565b60006020828403121561116e57600080fd5b5035919050565b80356001600160a01b038116811461118c57600080fd5b919050565b600080604083850312156111a457600080fd5b6111ad83611175565b946020939093013593505050565b6000806000606084860312156111d057600080fd5b6111d984611175565b92506111e760208501611175565b9150604084013590509250925092565b60006020828403121561120957600080fd5b6106aa82611175565b6000806040838503121561122557600080fd5b61122e83611175565b91506020830135801515811461124357600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561127a57600080fd5b61128385611175565b935061129160208601611175565b925060408501359150606085013567ffffffffffffffff808211156112b557600080fd5b818701915087601f8301126112c957600080fd5b8135818111156112db576112db61124e565b604051601f8201601f19908116603f011681019083821181831017156113035761130361124e565b816040528281528a602084870101111561131c57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561135357600080fd5b61135c83611175565b915061136a60208401611175565b90509250929050565b600181811c9082168061138757607f821691505b602082108114156113a857634e487b7160e01b600052602260045260246000fd5b50919050565b600083516113c08184602088016110f1565b8351908301906113d48183602088016110f1565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906114109083018461111d565b9695505050505050565b60006020828403121561142c57600080fd5b81516106aa816110be565b634e487b7160e01b600052601160045260246000fd5b600060001982141561146157611461611437565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261148d5761148d611468565b500490565b6000828210156114a4576114a4611437565b500390565b6000826114b8576114b8611468565b500690565b600082198211156114d0576114d0611437565b500190565b634e487b7160e01b600052603260045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220bbc6a19b5cb3ca03d0787d63d18bbd214bd1723b5fc9dfba4febce5cfc16ca8564736f6c63430008090033";

type ERC721AGasReporterMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC721AGasReporterMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC721AGasReporterMock__factory extends ContractFactory {
  constructor(...args: ERC721AGasReporterMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC721AGasReporterMock> {
    return super.deploy(
      name_,
      symbol_,
      overrides || {}
    ) as Promise<ERC721AGasReporterMock>;
  }
  override getDeployTransaction(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name_, symbol_, overrides || {});
  }
  override attach(address: string): ERC721AGasReporterMock {
    return super.attach(address) as ERC721AGasReporterMock;
  }
  override connect(signer: Signer): ERC721AGasReporterMock__factory {
    return super.connect(signer) as ERC721AGasReporterMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721AGasReporterMockInterface {
    return new utils.Interface(_abi) as ERC721AGasReporterMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC721AGasReporterMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ERC721AGasReporterMock;
  }
}
