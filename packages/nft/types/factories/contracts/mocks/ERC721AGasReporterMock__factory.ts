/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ERC721AGasReporterMock,
  ERC721AGasReporterMockInterface,
} from "../../../contracts/mocks/ERC721AGasReporterMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ApprovalCallerNotOwnerNorApproved",
    type: "error",
  },
  {
    inputs: [],
    name: "ApprovalQueryForNonexistentToken",
    type: "error",
  },
  {
    inputs: [],
    name: "ApprovalToCurrentOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "ApproveToCaller",
    type: "error",
  },
  {
    inputs: [],
    name: "BalanceQueryForZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "MintToZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "MintZeroQuantity",
    type: "error",
  },
  {
    inputs: [],
    name: "OwnerQueryForNonexistentToken",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "reason",
        type: "string",
      },
    ],
    name: "SetURICannotBeEmpty",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferCallerNotOwnerNorApproved",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferFromIncorrectOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferToNonERC721ReceiverImplementer",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferToZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "URIQueryForNonexistentToken",
    type: "error",
  },
  {
    inputs: [],
    name: "URIRequestForExistentToken",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "mintOne",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "mintTen",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "safeMintOne",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "safeMintTen",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001600380380620016008339810160408190526200003491620001e6565b8151829082906200004d90600290602085019062000073565b5080516200006390600390602084019062000073565b5060008055506200028d92505050565b828054620000819062000250565b90600052602060002090601f016020900481019282620000a55760008555620000f0565b82601f10620000c057805160ff1916838001178555620000f0565b82800160010185558215620000f0579182015b82811115620000f0578251825591602001919060010190620000d3565b50620000fe92915062000102565b5090565b5b80821115620000fe576000815560010162000103565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200014157600080fd5b81516001600160401b03808211156200015e576200015e62000119565b604051601f8301601f19908116603f0116810190828211818310171562000189576200018962000119565b81604052838152602092508683858801011115620001a657600080fd5b600091505b83821015620001ca5785820183015181830184015290820190620001ab565b83821115620001dc5760008385830101525b9695505050505050565b60008060408385031215620001fa57600080fd5b82516001600160401b03808211156200021257600080fd5b62000220868387016200012f565b935060208501519150808211156200023757600080fd5b5062000246858286016200012f565b9150509250929050565b600181811c908216806200026557607f821691505b602082108114156200028757634e487b7160e01b600052602260045260246000fd5b50919050565b611363806200029d6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806381861f84116100a2578063c87b56dd11610071578063c87b56dd1461023b578063db6745f81461024e578063e985e9c514610261578063ef9c0bec1461029d578063fa695a97146102b057600080fd5b806381861f84146101fa57806395d89b411461020d578063a22cb46514610215578063b88d4fde1461022857600080fd5b806318160ddd116100e957806318160ddd1461019857806323b872dd146101ae57806342842e0e146101c15780636352211e146101d457806370a08231146101e757600080fd5b806301ffc9a71461011b57806306fdde0314610143578063081812fc14610158578063095ea7b314610183575b600080fd5b61012e610129366004610ef6565b6102c3565b60405190151581526020015b60405180910390f35b61014b610315565b60405161013a9190610f6b565b61016b610166366004610f7e565b6103a7565b6040516001600160a01b03909116815260200161013a565b610196610191366004610fb3565b6103eb565b005b600154600054035b60405190815260200161013a565b6101966101bc366004610fdd565b610472565b6101966101cf366004610fdd565b61047d565b61016b6101e2366004610f7e565b610498565b6101a06101f5366004611019565b6104aa565b610196610208366004611019565b6104f9565b61014b610507565b610196610223366004611034565b610516565b610196610236366004611086565b6105ac565b61014b610249366004610f7e565b6105f6565b61019661025c366004611019565b610688565b61012e61026f366004611162565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b6101966102ab366004611019565b610693565b6101966102be366004611019565b61069e565b60006001600160e01b031982166380ac58cd60e01b14806102f457506001600160e01b03198216635b5e139f60e01b145b8061030f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606002805461032490611195565b80601f016020809104026020016040519081016040528092919081815260200182805461035090611195565b801561039d5780601f106103725761010080835404028352916020019161039d565b820191906000526020600020905b81548152906001019060200180831161038057829003601f168201915b5050505050905090565b60006103b2826106a9565b6103cf576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006103f682610498565b9050806001600160a01b0316836001600160a01b0316141561042b5760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b0382161461046257610445813361026f565b610462576040516367d9dca160e11b815260040160405180910390fd5b61046d8383836106d4565b505050565b61046d838383610730565b61046d838383604051806020016040528060008152506105ac565b60006104a38261090d565b5192915050565b60006001600160a01b0382166104d3576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205467ffffffffffffffff1690565b61050481600a610a29565b50565b60606003805461032490611195565b6001600160a01b0382163314156105405760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6105b7848484610730565b6001600160a01b0383163b156105f0576105d384848484610a47565b6105f0576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b6060610601826106a9565b61061e57604051630a14c4b560e41b815260040160405180910390fd5b600061063560408051602081019091526000815290565b90508051600014156106565760405180602001604052806000815250610681565b8061066084610b3f565b6040516020016106719291906111d0565b6040516020818303038152906040525b9392505050565b610504816001610a29565b61050481600a610c3d565b610504816001610c3d565b600080548210801561030f575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600061073b8261090d565b9050836001600160a01b031681600001516001600160a01b0316146107725760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b03861614806107905750610790853361026f565b806107ab5750336107a0846103a7565b6001600160a01b0316145b9050806107cb57604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b0384166107f257604051633a954ecd60e21b815260040160405180910390fd5b6107fe600084876106d4565b6001600160a01b038581166000908152600560209081526040808320805467ffffffffffffffff1980821667ffffffffffffffff92831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b429092169190910217835587018084529220805491939091166108d45760005482146108d4578054602086015167ffffffffffffffff16600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b031660008051602061130e83398151915260405160405180910390a45050505050565b604080516060810182526000808252602082018190529181019190915281600054811015610a1057600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff16151591810182905290610a0e5780516001600160a01b0316156109a4579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b820467ffffffffffffffff1693830193909352600160e01b900460ff1615159281019290925215610a09579392505050565b6109a4565b505b604051636f96cda160e11b815260040160405180910390fd5b610a43828260405180602001604052806000815250610d4d565b5050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290610a7c9033908990889088906004016111ff565b602060405180830381600087803b158015610a9657600080fd5b505af1925050508015610ac6575060408051601f3d908101601f19168201909252610ac39181019061123c565b60015b610b21573d808015610af4576040519150601f19603f3d011682016040523d82523d6000602084013e610af9565b606091505b508051610b19576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b606081610b635750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610b8d5780610b778161126f565b9150610b869050600a836112a0565b9150610b67565b60008167ffffffffffffffff811115610ba857610ba8611070565b6040519080825280601f01601f191660200182016040528015610bd2576020820181803683370190505b5090505b8415610b3757610be76001836112b4565b9150610bf4600a866112cb565b610bff9060306112df565b60f81b818381518110610c1457610c146112f7565b60200101906001600160f81b031916908160001a905350610c36600a866112a0565b9450610bd6565b6000546001600160a01b038316610c6657604051622e076360e81b815260040160405180910390fd5b81610c845760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038316600081815260056020908152604080832080546001600160801b0319811667ffffffffffffffff8083168a018116918217600160401b67ffffffffffffffff1990941690921783900481168a01811690920217909155858452600490925290912080546001600160e01b031916909217600160a01b4290921691909102179055808083015b6040516001830192906001600160a01b0387169060009060008051602061130e833981519152908290a4808210610d135750600055505050565b6000546001600160a01b038416610d7657604051622e076360e81b815260040160405180910390fd5b82610d945760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038416600081815260056020908152604080832080546001600160801b0319811667ffffffffffffffff8083168b018116918217600160401b67ffffffffffffffff1990941690921783900481168b01811690920217909155858452600490925290912080546001600160e01b0319168317600160a01b42909316929092029190911790558190818501903b15610e9d575b60405182906001600160a01b0388169060009060008051602061130e833981519152908290a4610e666000878480600101955087610a47565b610e83576040516368d2bf6b60e11b815260040160405180910390fd5b808210610e2d578260005414610e9857600080fd5b610ed0565b5b6040516001830192906001600160a01b0388169060009060008051602061130e833981519152908290a4808210610e9e575b5060009081556105f09085838684565b6001600160e01b03198116811461050457600080fd5b600060208284031215610f0857600080fd5b813561068181610ee0565b60005b83811015610f2e578181015183820152602001610f16565b838111156105f05750506000910152565b60008151808452610f57816020860160208601610f13565b601f01601f19169290920160200192915050565b6020815260006106816020830184610f3f565b600060208284031215610f9057600080fd5b5035919050565b80356001600160a01b0381168114610fae57600080fd5b919050565b60008060408385031215610fc657600080fd5b610fcf83610f97565b946020939093013593505050565b600080600060608486031215610ff257600080fd5b610ffb84610f97565b925061100960208501610f97565b9150604084013590509250925092565b60006020828403121561102b57600080fd5b61068182610f97565b6000806040838503121561104757600080fd5b61105083610f97565b91506020830135801515811461106557600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561109c57600080fd5b6110a585610f97565b93506110b360208601610f97565b925060408501359150606085013567ffffffffffffffff808211156110d757600080fd5b818701915087601f8301126110eb57600080fd5b8135818111156110fd576110fd611070565b604051601f8201601f19908116603f0116810190838211818310171561112557611125611070565b816040528281528a602084870101111561113e57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561117557600080fd5b61117e83610f97565b915061118c60208401610f97565b90509250929050565b600181811c908216806111a957607f821691505b602082108114156111ca57634e487b7160e01b600052602260045260246000fd5b50919050565b600083516111e2818460208801610f13565b8351908301906111f6818360208801610f13565b01949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061123290830184610f3f565b9695505050505050565b60006020828403121561124e57600080fd5b815161068181610ee0565b634e487b7160e01b600052601160045260246000fd5b600060001982141561128357611283611259565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826112af576112af61128a565b500490565b6000828210156112c6576112c6611259565b500390565b6000826112da576112da61128a565b500690565b600082198211156112f2576112f2611259565b500190565b634e487b7160e01b600052603260045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220869a76ab767262ce8e9c7ebfdf35ba2fe8dff223b5fa332e152a55a69a0703c964736f6c63430008090033";

type ERC721AGasReporterMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC721AGasReporterMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC721AGasReporterMock__factory extends ContractFactory {
  constructor(...args: ERC721AGasReporterMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC721AGasReporterMock> {
    return super.deploy(
      name_,
      symbol_,
      overrides || {}
    ) as Promise<ERC721AGasReporterMock>;
  }
  override getDeployTransaction(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name_, symbol_, overrides || {});
  }
  override attach(address: string): ERC721AGasReporterMock {
    return super.attach(address) as ERC721AGasReporterMock;
  }
  override connect(signer: Signer): ERC721AGasReporterMock__factory {
    return super.connect(signer) as ERC721AGasReporterMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721AGasReporterMockInterface {
    return new utils.Interface(_abi) as ERC721AGasReporterMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC721AGasReporterMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ERC721AGasReporterMock;
  }
}
