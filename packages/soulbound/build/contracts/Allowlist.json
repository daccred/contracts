{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_allowlistOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "Unsigned",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "Signed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "Verified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "addressHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "name": "VerifySignature",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getAllowlistOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "verifySignature",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "verifySigner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "contracts/Allowlist.sol",
    "2": "contracts/Ownable.sol",
    "8": "interfaces/IAllowlist.sol"
  },
  "ast": {
    "absolutePath": "contracts/Allowlist.sol",
    "exportedSymbols": {
      "Allowlist": [
        167
      ],
      "IAllowlist": [
        2173
      ],
      "Ownable": [
        382
      ]
    },
    "id": 168,
    "license": "GPL-3.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "36:23:0"
      },
      {
        "absolutePath": "contracts/Ownable.sol",
        "file": "./Ownable.sol",
        "id": 2,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 168,
        "sourceUnit": 383,
        "src": "61:23:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "interfaces/IAllowlist.sol",
        "file": "../interfaces/IAllowlist.sol",
        "id": 3,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 168,
        "sourceUnit": 2174,
        "src": "85:38:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 5,
              "name": "IAllowlist",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2173,
              "src": "1230:10:0"
            },
            "id": 6,
            "nodeType": "InheritanceSpecifier",
            "src": "1230:10:0"
          },
          {
            "baseName": {
              "id": 7,
              "name": "Ownable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 382,
              "src": "1242:7:0"
            },
            "id": 8,
            "nodeType": "InheritanceSpecifier",
            "src": "1242:7:0"
          }
        ],
        "canonicalName": "Allowlist",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 4,
          "nodeType": "StructuredDocumentation",
          "src": "125:1082:0",
          "text": " @title Allowlist Contract.\n @author Daccred.\n @dev  The allowlist contract serves as a general inheritable\n       contract that any contract with the need of working with\n       signatures and signature verifications can inherit and \n       work with with ease.\n       Allowlists allow you to ensure that a particular address\n       has been signed by a particular contract, and is therefore\n       eligible to receive or be minted a particular token or \n       partcular sets of tokens.\n       It will be necessary to state that this contract will be\n       directly owned by the Daccred.sol [link here], but on\n       deploy, the address of the wallet deploying the contract\n       will be stored as the `allowlistOwner`, this address\n       cannot be changed, and this address will be evaluated for\n       incoming signature confirmations.\n       The address must be the signer of the signature.\n       Changing this address means changing every signature \n       signed. This is not good.\n       For clarity:\n       Contract deployer: Daccred.sol."
        },
        "fullyImplemented": true,
        "id": 167,
        "linearizedBaseContracts": [
          167,
          382,
          2173
        ],
        "name": "Allowlist",
        "nameLocation": "1217:9:0",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "documentation": {
              "id": 9,
              "nodeType": "StructuredDocumentation",
              "src": "1256:224:0",
              "text": "@dev    The wallet that initiated the transaction to deploy\n         this allowlist contract\n         [And other subsequent ones inheriting this], \n         passed as msg.sender from the Daccred.sol."
            },
            "id": 11,
            "mutability": "mutable",
            "name": "allowlistOwner",
            "nameLocation": "1501:14:0",
            "nodeType": "VariableDeclaration",
            "scope": 167,
            "src": "1485:30:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 10,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1485:7:0",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 21,
              "nodeType": "Block",
              "src": "1613:89:0",
              "statements": [
                {
                  "documentation": "@dev Set the variable name.",
                  "expression": {
                    "id": 19,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 17,
                      "name": "allowlistOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11,
                      "src": "1663:14:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 18,
                      "name": "_allowlistOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 14,
                      "src": "1680:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1663:32:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 20,
                  "nodeType": "ExpressionStatement",
                  "src": "1663:32:0"
                }
              ]
            },
            "documentation": {
              "id": 12,
              "nodeType": "StructuredDocumentation",
              "src": "1522:49:0",
              "text": "@dev constructor, setting the allowlistOwner."
            },
            "id": 22,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 15,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 14,
                  "mutability": "mutable",
                  "name": "_allowlistOwner",
                  "nameLocation": "1596:15:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 22,
                  "src": "1588:23:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1588:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1587:25:0"
            },
            "returnParameters": {
              "id": 16,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1613:0:0"
            },
            "scope": 167,
            "src": "1576:126:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 23,
              "nodeType": "StructuredDocumentation",
              "src": "1708:87:0",
              "text": "@dev    Emitted when a signature is verified by the\n         allowlistOwner."
            },
            "eventSelector": "7e4fe2a2a805a357593fdbdde58c02f6a53d8b4960744cd31a98697fc11c2e36",
            "id": 29,
            "name": "VerifySignature",
            "nameLocation": "1806:15:0",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 28,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 25,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "addressHash",
                  "nameLocation": "1838:11:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 29,
                  "src": "1822:27:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 24,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1822:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "result",
                  "nameLocation": "1864:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 29,
                  "src": "1851:19:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 26,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1851:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1821:50:0"
            },
            "src": "1800:72:0"
          },
          {
            "body": {
              "id": 37,
              "nodeType": "Block",
              "src": "2076:38:0",
              "statements": [
                {
                  "expression": {
                    "id": 35,
                    "name": "allowlistOwner",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 11,
                    "src": "2093:14:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 34,
                  "id": 36,
                  "nodeType": "Return",
                  "src": "2086:21:0"
                }
              ]
            },
            "documentation": {
              "id": 30,
              "nodeType": "StructuredDocumentation",
              "src": "1878:135:0",
              "text": " @dev Return the allowlistOwner.\n @notice Callable by anyone.\n @return address of allowlistOwner."
            },
            "functionSelector": "6e0a8746",
            "id": 38,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getAllowlistOwner",
            "nameLocation": "2027:17:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 31,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2044:2:0"
            },
            "returnParameters": {
              "id": 34,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 33,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 38,
                  "src": "2067:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 32,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2067:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2066:9:0"
            },
            "scope": 167,
            "src": "2018:96:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              2160
            ],
            "body": {
              "id": 53,
              "nodeType": "Block",
              "src": "2426:51:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 49,
                        "name": "hash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 41,
                        "src": "2460:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 50,
                        "name": "sig",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 43,
                        "src": "2466:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 48,
                      "name": "_verifySignature",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 119,
                      "src": "2443:16:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_bool_$",
                        "typeString": "function (bytes32,bytes memory) returns (bool)"
                      }
                    },
                    "id": 51,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2443:27:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 47,
                  "id": 52,
                  "nodeType": "Return",
                  "src": "2436:34:0"
                }
              ]
            },
            "documentation": {
              "id": 39,
              "nodeType": "StructuredDocumentation",
              "src": "2120:209:0",
              "text": " @dev  Returns true if the signer of signature `sig` is the `allowlistOwner`.\n       And false if otherwise.\n @notice Callable by anyone.\n @return bool true or false."
            },
            "functionSelector": "daca6f78",
            "id": 54,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "verifySignature",
            "nameLocation": "2343:15:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 44,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 41,
                  "mutability": "mutable",
                  "name": "hash",
                  "nameLocation": "2367:4:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 54,
                  "src": "2359:12:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 40,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2359:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 43,
                  "mutability": "mutable",
                  "name": "sig",
                  "nameLocation": "2386:3:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 54,
                  "src": "2373:16:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 42,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "2373:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2358:32:0"
            },
            "returnParameters": {
              "id": 47,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 46,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 54,
                  "src": "2416:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 45,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2416:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2415:6:0"
            },
            "scope": 167,
            "src": "2334:143:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 118,
              "nodeType": "Block",
              "src": "3544:936:0",
              "statements": [
                {
                  "documentation": "@dev    Require that the caller is the owner [deployer]\n         of the contract, [the Daccred.sol].",
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 71,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 67,
                            "name": "_msgSender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 381,
                            "src": "3699:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                              "typeString": "function () view returns (address)"
                            }
                          },
                          "id": 68,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3699:12:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 69,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 300,
                            "src": "3715:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                              "typeString": "function () view returns (address)"
                            }
                          },
                          "id": 70,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3715:7:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "3699:23:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4552433732313a3a2043616c6c20746f20636f6e7472616374206d616465206279206e6f6e2d6f776e6572",
                        "id": 72,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3737:45:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b4900fd2ad468616a2143813643a9fbc92ffd6be49c5203fa2a284da28b52aec",
                          "typeString": "literal_string \"ERC721:: Call to contract made by non-owner\""
                        },
                        "value": "ERC721:: Call to contract made by non-owner"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b4900fd2ad468616a2143813643a9fbc92ffd6be49c5203fa2a284da28b52aec",
                          "typeString": "literal_string \"ERC721:: Call to contract made by non-owner\""
                        }
                      ],
                      "id": 66,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3678:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 73,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3678:114:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 74,
                  "nodeType": "ExpressionStatement",
                  "src": "3678:114:0"
                },
                {
                  "documentation": "@dev Require the length of the signature is 65.",
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 79,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 76,
                            "name": "sig",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 59,
                            "src": "3870:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "id": 77,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "3870:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "3635",
                          "id": 78,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3884:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_65_by_1",
                            "typeString": "int_const 65"
                          },
                          "value": "65"
                        },
                        "src": "3870:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4572723a3a20496e76616c6964207369676e6174757265206c656e677468",
                        "id": 80,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3888:32:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_afde7a5993b74c3d5ded0cabf51ed426adeaaefb6fe4a308dd078080ef4ff925",
                          "typeString": "literal_string \"Err:: Invalid signature length\""
                        },
                        "value": "Err:: Invalid signature length"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_afde7a5993b74c3d5ded0cabf51ed426adeaaefb6fe4a308dd078080ef4ff925",
                          "typeString": "literal_string \"Err:: Invalid signature length\""
                        }
                      ],
                      "id": 75,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3862:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 81,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3862:59:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 82,
                  "nodeType": "ExpressionStatement",
                  "src": "3862:59:0"
                },
                {
                  "assignments": [
                    84,
                    86,
                    88
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 84,
                      "mutability": "mutable",
                      "name": "r",
                      "nameLocation": "4008:1:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 118,
                      "src": "4000:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 83,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "4000:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 86,
                      "mutability": "mutable",
                      "name": "s",
                      "nameLocation": "4019:1:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 118,
                      "src": "4011:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 85,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "4011:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 88,
                      "mutability": "mutable",
                      "name": "v",
                      "nameLocation": "4028:1:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 118,
                      "src": "4022:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      },
                      "typeName": {
                        "id": 87,
                        "name": "uint8",
                        "nodeType": "ElementaryTypeName",
                        "src": "4022:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "documentation": "@dev Use assembly to get the 3 sections of a signature.",
                  "id": 92,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 90,
                        "name": "sig",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 59,
                        "src": "4048:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 89,
                      "name": "splitSignature",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 166,
                      "src": "4033:14:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$_t_bytes32_$_t_uint8_$",
                        "typeString": "function (bytes memory) pure returns (bytes32,bytes32,uint8)"
                      }
                    },
                    "id": 91,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4033:19:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bytes32_$_t_bytes32_$_t_uint8_$",
                      "typeString": "tuple(bytes32,bytes32,uint8)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3999:53:0"
                },
                {
                  "assignments": [
                    95
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 95,
                      "mutability": "mutable",
                      "name": "signer",
                      "nameLocation": "4125:6:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 118,
                      "src": "4117:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 94,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4117:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "documentation": "@dev    Using ecrecover to get the signer.",
                  "id": 102,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 97,
                        "name": "hash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 57,
                        "src": "4144:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 98,
                        "name": "v",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 88,
                        "src": "4150:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      {
                        "id": 99,
                        "name": "r",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 84,
                        "src": "4153:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 100,
                        "name": "s",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 86,
                        "src": "4156:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 96,
                      "name": "ecrecover",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -6,
                      "src": "4134:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
                        "typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
                      }
                    },
                    "id": 101,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4134:24:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4117:41:0"
                },
                {
                  "assignments": [
                    105
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 105,
                      "mutability": "mutable",
                      "name": "signerIsAllowlistOwner",
                      "nameLocation": "4236:22:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 118,
                      "src": "4231:27:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 104,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "4231:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "documentation": "@dev Verify that the signer is the allowlistOwner.",
                  "id": 110,
                  "initialValue": {
                    "components": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 108,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 106,
                          "name": "signer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 95,
                          "src": "4262:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 107,
                          "name": "allowlistOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 11,
                          "src": "4272:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "4262:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "id": 109,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "4261:26:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4231:56:0"
                },
                {
                  "documentation": "@dev Emit the {VerifySignature} event.",
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 112,
                        "name": "hash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 57,
                        "src": "4369:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 113,
                        "name": "signerIsAllowlistOwner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 105,
                        "src": "4375:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 111,
                      "name": "VerifySignature",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 29,
                      "src": "4353:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_bool_$returns$__$",
                        "typeString": "function (bytes32,bool)"
                      }
                    },
                    "id": 114,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4353:45:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 115,
                  "nodeType": "EmitStatement",
                  "src": "4348:50:0"
                },
                {
                  "documentation": "@dev Return the result.",
                  "expression": {
                    "id": 116,
                    "name": "signerIsAllowlistOwner",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 105,
                    "src": "4451:22:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 65,
                  "id": 117,
                  "nodeType": "Return",
                  "src": "4444:29:0"
                }
              ]
            },
            "documentation": {
              "id": 55,
              "nodeType": "StructuredDocumentation",
              "src": "2483:949:0",
              "text": " @dev  Evaluate and return that a particular address message\n       was signed by the allowlistOwner.\n       In the SoulboundCore.sol, this function will be used\n       in the {issueWithSignature} function, to verify that\n       the hash of the address was indeed signed by the\n       allowlistOwner.\n       This functin will be called from the Daccred.sol or\n       DaccredDeployer.sol where the address of the \n       allowlistOwner will be passed to the function, as \n       msg.sender. Meaning that only the owner of the \n       allowlist deployed from the Daccred.sol can call \n       the function.\n       Or using the getAllowlistOwner() for validations.\n @notice Callable by this or inheriting contract.\n @param hash   Hash of the address.\n @param sig    Signature of the transaction, made offchain.\n @return bool true or false."
            },
            "id": 119,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 62,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 61,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 291,
                  "src": "3512:9:0"
                },
                "nodeType": "ModifierInvocation",
                "src": "3512:9:0"
              }
            ],
            "name": "_verifySignature",
            "nameLocation": "3446:16:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 60,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57,
                  "mutability": "mutable",
                  "name": "hash",
                  "nameLocation": "3471:4:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 119,
                  "src": "3463:12:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 56,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3463:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 59,
                  "mutability": "mutable",
                  "name": "sig",
                  "nameLocation": "3490:3:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 119,
                  "src": "3477:16:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 58,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3477:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3462:32:0"
            },
            "returnParameters": {
              "id": 65,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 64,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 119,
                  "src": "3534:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 63,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3534:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3533:6:0"
            },
            "scope": 167,
            "src": "3437:1043:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "baseFunctions": [
              2172
            ],
            "body": {
              "id": 151,
              "nodeType": "Block",
              "src": "4786:131:0",
              "statements": [
                {
                  "assignments": [
                    132,
                    134,
                    136
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 132,
                      "mutability": "mutable",
                      "name": "r",
                      "nameLocation": "4805:1:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 151,
                      "src": "4797:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 131,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "4797:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 134,
                      "mutability": "mutable",
                      "name": "s",
                      "nameLocation": "4816:1:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 151,
                      "src": "4808:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 133,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "4808:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 136,
                      "mutability": "mutable",
                      "name": "v",
                      "nameLocation": "4825:1:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 151,
                      "src": "4819:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      },
                      "typeName": {
                        "id": 135,
                        "name": "uint8",
                        "nodeType": "ElementaryTypeName",
                        "src": "4819:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 140,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 138,
                        "name": "_signature",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 126,
                        "src": "4845:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 137,
                      "name": "splitSignature",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 166,
                      "src": "4830:14:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$_t_bytes32_$_t_uint8_$",
                        "typeString": "function (bytes memory) pure returns (bytes32,bytes32,uint8)"
                      }
                    },
                    "id": 139,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4830:26:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bytes32_$_t_bytes32_$_t_uint8_$",
                      "typeString": "tuple(bytes32,bytes32,uint8)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4796:60:0"
                },
                {
                  "expression": {
                    "components": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 148,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 141,
                          "name": "_signer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 122,
                          "src": "4873:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "id": 143,
                              "name": "_hash",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 124,
                              "src": "4894:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "id": 144,
                              "name": "v",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 136,
                              "src": "4901:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            {
                              "id": 145,
                              "name": "r",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 132,
                              "src": "4904:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "id": 146,
                              "name": "s",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 134,
                              "src": "4907:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 142,
                            "name": "ecrecover",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -6,
                            "src": "4884:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
                              "typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
                            }
                          },
                          "id": 147,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4884:25:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "4873:36:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "id": 149,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "4872:38:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 130,
                  "id": 150,
                  "nodeType": "Return",
                  "src": "4866:44:0"
                }
              ]
            },
            "documentation": {
              "id": 120,
              "nodeType": "StructuredDocumentation",
              "src": "4486:158:0",
              "text": " @dev Returns true if the signer of `_signature` is `_signer`.\n @notice Callable by anyone.\n @return bool true or false."
            },
            "functionSelector": "e92b0842",
            "id": 152,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "verifySigner",
            "nameLocation": "4658:12:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 127,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 122,
                  "mutability": "mutable",
                  "name": "_signer",
                  "nameLocation": "4688:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 152,
                  "src": "4680:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 121,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4680:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 124,
                  "mutability": "mutable",
                  "name": "_hash",
                  "nameLocation": "4714:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 152,
                  "src": "4706:13:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 123,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4706:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 126,
                  "mutability": "mutable",
                  "name": "_signature",
                  "nameLocation": "4743:10:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 152,
                  "src": "4730:23:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 125,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "4730:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4670:89:0"
            },
            "returnParameters": {
              "id": 130,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 129,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 152,
                  "src": "4780:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 128,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4780:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4779:6:0"
            },
            "scope": 167,
            "src": "4649:268:0",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 165,
              "nodeType": "Block",
              "src": "5278:739:0",
              "statements": [
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "5297:713:0",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "5788:24:0",
                        "value": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "sig",
                                  "nodeType": "YulIdentifier",
                                  "src": "5803:3:0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5808:2:0",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "5799:3:0"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5799:12:0"
                            }
                          ],
                          "functionName": {
                            "name": "mload",
                            "nodeType": "YulIdentifier",
                            "src": "5793:5:0"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "5793:19:0"
                        },
                        "variableNames": [
                          {
                            "name": "r",
                            "nodeType": "YulIdentifier",
                            "src": "5788:1:0"
                          }
                        ]
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "5863:24:0",
                        "value": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "sig",
                                  "nodeType": "YulIdentifier",
                                  "src": "5878:3:0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5883:2:0",
                                  "type": "",
                                  "value": "64"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "5874:3:0"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5874:12:0"
                            }
                          ],
                          "functionName": {
                            "name": "mload",
                            "nodeType": "YulIdentifier",
                            "src": "5868:5:0"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "5868:19:0"
                        },
                        "variableNames": [
                          {
                            "name": "s",
                            "nodeType": "YulIdentifier",
                            "src": "5863:1:0"
                          }
                        ]
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "5967:33:0",
                        "value": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "5977:1:0",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "sig",
                                      "nodeType": "YulIdentifier",
                                      "src": "5990:3:0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5995:2:0",
                                      "type": "",
                                      "value": "96"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "5986:3:0"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5986:12:0"
                                }
                              ],
                              "functionName": {
                                "name": "mload",
                                "nodeType": "YulIdentifier",
                                "src": "5980:5:0"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5980:19:0"
                            }
                          ],
                          "functionName": {
                            "name": "byte",
                            "nodeType": "YulIdentifier",
                            "src": "5972:4:0"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "5972:28:0"
                        },
                        "variableNames": [
                          {
                            "name": "v",
                            "nodeType": "YulIdentifier",
                            "src": "5967:1:0"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 158,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "5788:1:0",
                      "valueSize": 1
                    },
                    {
                      "declaration": 160,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "5863:1:0",
                      "valueSize": 1
                    },
                    {
                      "declaration": 155,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "5803:3:0",
                      "valueSize": 1
                    },
                    {
                      "declaration": 155,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "5878:3:0",
                      "valueSize": 1
                    },
                    {
                      "declaration": 155,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "5990:3:0",
                      "valueSize": 1
                    },
                    {
                      "declaration": 162,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "5967:1:0",
                      "valueSize": 1
                    }
                  ],
                  "id": 164,
                  "nodeType": "InlineAssembly",
                  "src": "5288:722:0"
                }
              ]
            },
            "documentation": {
              "id": 153,
              "nodeType": "StructuredDocumentation",
              "src": "4923:222:0",
              "text": " @dev  This function makes use of assembly to split the signature\n       into 3 parts.\n @param sig The signature to split with Assembly.\n @return r\n @return s\n @return v"
            },
            "id": 166,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "splitSignature",
            "nameLocation": "5159:14:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 156,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 155,
                  "mutability": "mutable",
                  "name": "sig",
                  "nameLocation": "5187:3:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 166,
                  "src": "5174:16:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 154,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "5174:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5173:18:0"
            },
            "returnParameters": {
              "id": 163,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 158,
                  "mutability": "mutable",
                  "name": "r",
                  "nameLocation": "5230:1:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 166,
                  "src": "5222:9:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 157,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5222:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 160,
                  "mutability": "mutable",
                  "name": "s",
                  "nameLocation": "5249:1:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 166,
                  "src": "5241:9:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 159,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5241:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 162,
                  "mutability": "mutable",
                  "name": "v",
                  "nameLocation": "5266:1:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 166,
                  "src": "5260:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 161,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "5260:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5212:61:0"
            },
            "scope": 167,
            "src": "5150:867:0",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "private"
          }
        ],
        "scope": 168,
        "src": "1208:4811:0",
        "usedErrors": [
          2150
        ]
      }
    ],
    "src": "36:5984:0"
  },
  "bytecode": "608060405234801561001057600080fd5b506040516106f53803806106f583398101604081905261002f916100ad565b6100383361005d565b600180546001600160a01b0319166001600160a01b03929092169190911790556100dd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100bf57600080fd5b81516001600160a01b03811681146100d657600080fd5b9392505050565b610609806100ec6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80636e0a874614610067578063715018a6146100915780638da5cb5b1461009b578063daca6f78146100ac578063e92b0842146100cf578063f2fde38b146100e2575b600080fd5b6001546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100996100f5565b005b6000546001600160a01b0316610074565b6100bf6100ba3660046104fe565b610109565b6040519015158152602001610088565b6100bf6100dd366004610561565b61011c565b6100996100f03660046105b8565b6101b0565b6100fd61022e565b6101076000610288565b565b600061011583836102d8565b9392505050565b602081810151604080840151606080860151835160008082528188018087528a905291821a81860181905292810186905260808101849052935190959293919260019260a080820193601f1981019281900390910190855afa158015610186573d6000803e3d6000fd5b505050602060405103516001600160a01b0316876001600160a01b03161493505050509392505050565b6101b861022e565b6001600160a01b0381166102225760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61022b81610288565b50565b6000546001600160a01b031633146101075760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610219565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006102e261022e565b6000546001600160a01b031633146103505760405162461bcd60e51b815260206004820152602b60248201527f4552433732313a3a2043616c6c20746f20636f6e7472616374206d616465206260448201526a3c903737b716b7bbb732b960a91b6064820152608401610219565b81516041146103a15760405162461bcd60e51b815260206004820152601e60248201527f4572723a3a20496e76616c6964207369676e6174757265206c656e67746800006044820152606401610219565b602082810151604080850151606080870151835160008082529681018086528a905290861a938101849052908101849052608081018290529293909260019060a0016020604051602081039080840390855afa158015610405573d6000803e3d6000fd5b5050604051601f198101516001549093506001600160a01b038085169116149150819089907f7e4fe2a2a805a357593fdbdde58c02f6a53d8b4960744cd31a98697fc11c2e3690600090a3979650505050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261048257600080fd5b813567ffffffffffffffff8082111561049d5761049d61045b565b604051601f8301601f19908116603f011681019082821181831017156104c5576104c561045b565b816040528381528660208588010111156104de57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561051157600080fd5b82359150602083013567ffffffffffffffff81111561052f57600080fd5b61053b85828601610471565b9150509250929050565b80356001600160a01b038116811461055c57600080fd5b919050565b60008060006060848603121561057657600080fd5b61057f84610545565b925060208401359150604084013567ffffffffffffffff8111156105a257600080fd5b6105ae86828701610471565b9150509250925092565b6000602082840312156105ca57600080fd5b6101158261054556fea26469706673582212202992c53051141c6070e2cbaf46617958fdc81007f5aa5e18fc9134a6466af7d764736f6c634300080f0033",
  "bytecodeSha1": "4cb55ed56d5bc7297cfd70820f6d2bcc4f83a640",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.15+commit.e14f2714"
  },
  "contractName": "Allowlist",
  "coverageMap": {
    "branches": {
      "0": {
        "Allowlist._verifySignature": {
          "15": [
            3699,
            3722,
            true
          ],
          "16": [
            3870,
            3886,
            true
          ]
        }
      },
      "2": {
        "Ownable._checkOwner": {
          "18": [
            1725,
            1748,
            true
          ]
        },
        "Ownable.transferOwnership": {
          "17": [
            2489,
            2511,
            true
          ]
        }
      },
      "8": {}
    },
    "statements": {
      "0": {
        "Allowlist._verifySignature": {
          "11": [
            3678,
            3792
          ],
          "12": [
            3862,
            3921
          ],
          "13": [
            4348,
            4398
          ],
          "14": [
            4444,
            4473
          ]
        },
        "Allowlist.getAllowlistOwner": {
          "0": [
            2086,
            2107
          ]
        },
        "Allowlist.verifySignature": {
          "3": [
            2436,
            2470
          ]
        },
        "Allowlist.verifySigner": {
          "4": [
            4866,
            4910
          ]
        }
      },
      "2": {
        "Ownable._checkOwner": {
          "8": [
            1717,
            1785
          ]
        },
        "Ownable._msgSender": {
          "7": [
            3050,
            3067
          ]
        },
        "Ownable._transferOwnership": {
          "9": [
            2865,
            2882
          ],
          "10": [
            2892,
            2937
          ]
        },
        "Ownable.owner": {
          "1": [
            1571,
            1584
          ]
        },
        "Ownable.renounceOwnership": {
          "2": [
            2211,
            2241
          ]
        },
        "Ownable.transferOwnership": {
          "5": [
            2481,
            2554
          ],
          "6": [
            2564,
            2592
          ]
        }
      },
      "8": {}
    }
  },
  "dependencies": [
    "IAllowlist",
    "Ownable"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100625760003560e01c80636e0a874614610067578063715018a6146100915780638da5cb5b1461009b578063daca6f78146100ac578063e92b0842146100cf578063f2fde38b146100e2575b600080fd5b6001546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100996100f5565b005b6000546001600160a01b0316610074565b6100bf6100ba3660046104fe565b610109565b6040519015158152602001610088565b6100bf6100dd366004610561565b61011c565b6100996100f03660046105b8565b6101b0565b6100fd61022e565b6101076000610288565b565b600061011583836102d8565b9392505050565b602081810151604080840151606080860151835160008082528188018087528a905291821a81860181905292810186905260808101849052935190959293919260019260a080820193601f1981019281900390910190855afa158015610186573d6000803e3d6000fd5b505050602060405103516001600160a01b0316876001600160a01b03161493505050509392505050565b6101b861022e565b6001600160a01b0381166102225760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61022b81610288565b50565b6000546001600160a01b031633146101075760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610219565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006102e261022e565b6000546001600160a01b031633146103505760405162461bcd60e51b815260206004820152602b60248201527f4552433732313a3a2043616c6c20746f20636f6e7472616374206d616465206260448201526a3c903737b716b7bbb732b960a91b6064820152608401610219565b81516041146103a15760405162461bcd60e51b815260206004820152601e60248201527f4572723a3a20496e76616c6964207369676e6174757265206c656e67746800006044820152606401610219565b602082810151604080850151606080870151835160008082529681018086528a905290861a938101849052908101849052608081018290529293909260019060a0016020604051602081039080840390855afa158015610405573d6000803e3d6000fd5b5050604051601f198101516001549093506001600160a01b038085169116149150819089907f7e4fe2a2a805a357593fdbdde58c02f6a53d8b4960744cd31a98697fc11c2e3690600090a3979650505050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261048257600080fd5b813567ffffffffffffffff8082111561049d5761049d61045b565b604051601f8301601f19908116603f011681019082821181831017156104c5576104c561045b565b816040528381528660208588010111156104de57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561051157600080fd5b82359150602083013567ffffffffffffffff81111561052f57600080fd5b61053b85828601610471565b9150509250929050565b80356001600160a01b038116811461055c57600080fd5b919050565b60008060006060848603121561057657600080fd5b61057f84610545565b925060208401359150604084013567ffffffffffffffff8111156105a257600080fd5b6105ae86828701610471565b9150509250925092565b6000602082840312156105ca57600080fd5b6101158261054556fea26469706673582212202992c53051141c6070e2cbaf46617958fdc81007f5aa5e18fc9134a6466af7d764736f6c634300080f0033",
  "deployedSourceMap": "1208:4811:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2018:96;2093:14;;-1:-1:-1;;;;;2093:14:0;2018:96;;;-1:-1:-1;;;;;178:32:10;;;160:51;;148:2;133:18;2018:96:0;;;;;;;;2147:101:2;;;:::i;:::-;;1506:85;1552:7;1578:6;-1:-1:-1;;;;;1578:6:2;1506:85;;2334:143:0;;;;;;:::i;:::-;;:::i;:::-;;;1635:14:10;;1628:22;1610:41;;1598:2;1583:18;2334:143:0;1470:187:10;4649:268:0;;;;;;:::i;:::-;;:::i;2401:198:2:-;;;;;;:::i;:::-;;:::i;2147:101::-;1401:13;:11;:13::i;:::-;2211:30:::1;2238:1;2211:18;:30::i;:::-;2147:101::o:0;2334:143:0:-;2416:4;2443:27;2460:4;2466:3;2443:16;:27::i;:::-;2436:34;2334:143;-1:-1:-1;;;2334:143:0:o;4649:268::-;5808:2;5799:12;;;5793:19;5883:2;5874:12;;;5868:19;5995:2;5986:12;;;5980:19;4884:25;;4780:4;4884:25;;;;;;;;;2725::10;;;5972:28:0;;;2766:18:10;;;2759:45;;;2820:18;;;2813:34;;;2863:18;;;2856:34;;;4884:25:0;;4780:4;;5868:19;;5972:28;;4884:25;;2697:19:10;;;;;-1:-1:-1;;4884:25:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4873:36:0;:7;-1:-1:-1;;;;;4873:36:0;;4866:44;;;;;4649:268;;;;;:::o;2401:198:2:-;1401:13;:11;:13::i;:::-;-1:-1:-1;;;;;2489:22:2;::::1;2481:73;;;::::0;-1:-1:-1;;;2481:73:2;;3103:2:10;2481:73:2::1;::::0;::::1;3085:21:10::0;3142:2;3122:18;;;3115:30;3181:34;3161:18;;;3154:62;-1:-1:-1;;;3232:18:10;;;3225:36;3278:19;;2481:73:2::1;;;;;;;;;2564:28;2583:8;2564:18;:28::i;:::-;2401:198:::0;:::o;1662:130::-;1552:7;1578:6;-1:-1:-1;;;;;1578:6:2;3057:10;1725:23;1717:68;;;;-1:-1:-1;;;1717:68:2;;3510:2:10;1717:68:2;;;3492:21:10;;;3529:18;;;3522:30;3588:34;3568:18;;;3561:62;3640:18;;1717:68:2;3308:356:10;2757:187:2;2830:16;2849:6;;-1:-1:-1;;;;;2865:17:2;;;-1:-1:-1;;;;;;2865:17:2;;;;;;2897:40;;2849:6;;;;;;;2897:40;;2830:16;2897:40;2820:124;2757:187;:::o;3437:1043:0:-;3534:4;1401:13:2;:11;:13::i;:::-;1552:7;1578:6;-1:-1:-1;;;;;1578:6:2;3057:10;3699:23:0::1;3678:114;;;::::0;-1:-1:-1;;;3678:114:0;;3871:2:10;3678:114:0::1;::::0;::::1;3853:21:10::0;3910:2;3890:18;;;3883:30;3949:34;3929:18;;;3922:62;-1:-1:-1;;;4000:18:10;;;3993:41;4051:19;;3678:114:0::1;3669:407:10::0;3678:114:0::1;3870:3;:10;3884:2;3870:16;3862:59;;;::::0;-1:-1:-1;;;3862:59:0;;4283:2:10;3862:59:0::1;::::0;::::1;4265:21:10::0;4322:2;4302:18;;;4295:30;4361:32;4341:18;;;4334:60;4411:18;;3862:59:0::1;4081:354:10::0;3862:59:0::1;5808:2:::0;5799:12;;;5793:19;5883:2;5874:12;;;5868:19;5995:2;5986:12;;;5980:19;4134:24;;4000:9:::1;4134:24:::0;;;;;::::1;::::0;;;2725:25:10;;;5972:28:0;;;2766:18:10;;;2759:45;;;2820:18;;;2813:34;;;2863:18;;;2856:34;;;5793:19:0;;5868;;4134:24:::1;::::0;2697:19:10;;4134:24:0::1;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;4134:24:0::1;::::0;-1:-1:-1;;4134:24:0;;;4272:14:::1;::::0;4134:24;;-1:-1:-1;;;;;;4262:24:0;;::::1;4272:14:::0;::::1;4262:24;::::0;-1:-1:-1;4262:24:0;;4369:4;;4353:45:::1;::::0;4231:27:::1;::::0;4353:45:::1;4451:22:::0;3437:1043;-1:-1:-1;;;;;;;3437:1043:0:o;222:127:10:-;283:10;278:3;274:20;271:1;264:31;314:4;311:1;304:15;338:4;335:1;328:15;354:718;396:5;449:3;442:4;434:6;430:17;426:27;416:55;;467:1;464;457:12;416:55;503:6;490:20;529:18;566:2;562;559:10;556:36;;;572:18;;:::i;:::-;647:2;641:9;615:2;701:13;;-1:-1:-1;;697:22:10;;;721:2;693:31;689:40;677:53;;;745:18;;;765:22;;;742:46;739:72;;;791:18;;:::i;:::-;831:10;827:2;820:22;866:2;858:6;851:18;912:3;905:4;900:2;892:6;888:15;884:26;881:35;878:55;;;929:1;926;919:12;878:55;993:2;986:4;978:6;974:17;967:4;959:6;955:17;942:54;1040:1;1033:4;1028:2;1020:6;1016:15;1012:26;1005:37;1060:6;1051:15;;;;;;354:718;;;;:::o;1077:388::-;1154:6;1162;1215:2;1203:9;1194:7;1190:23;1186:32;1183:52;;;1231:1;1228;1221:12;1183:52;1267:9;1254:23;1244:33;;1328:2;1317:9;1313:18;1300:32;1355:18;1347:6;1344:30;1341:50;;;1387:1;1384;1377:12;1341:50;1410:49;1451:7;1442:6;1431:9;1427:22;1410:49;:::i;:::-;1400:59;;;1077:388;;;;;:::o;1662:173::-;1730:20;;-1:-1:-1;;;;;1779:31:10;;1769:42;;1759:70;;1825:1;1822;1815:12;1759:70;1662:173;;;:::o;1840:462::-;1926:6;1934;1942;1995:2;1983:9;1974:7;1970:23;1966:32;1963:52;;;2011:1;2008;2001:12;1963:52;2034:29;2053:9;2034:29;:::i;:::-;2024:39;;2110:2;2099:9;2095:18;2082:32;2072:42;;2165:2;2154:9;2150:18;2137:32;2192:18;2184:6;2181:30;2178:50;;;2224:1;2221;2214:12;2178:50;2247:49;2288:7;2279:6;2268:9;2264:22;2247:49;:::i;:::-;2237:59;;;1840:462;;;;;:::o;2307:186::-;2366:6;2419:2;2407:9;2398:7;2394:23;2390:32;2387:52;;;2435:1;2432;2425:12;2387:52;2458:29;2477:9;2458:29;:::i",
  "language": "Solidity",
  "natspec": {
    "author": "Daccred.",
    "details": "The allowlist contract serves as a general inheritable       contract that any contract with the need of working with       signatures and signature verifications can inherit and        work with with ease.       Allowlists allow you to ensure that a particular address       has been signed by a particular contract, and is therefore       eligible to receive or be minted a particular token or        partcular sets of tokens.       It will be necessary to state that this contract will be       directly owned by the Daccred.sol [link here], but on       deploy, the address of the wallet deploying the contract       will be stored as the `allowlistOwner`, this address       cannot be changed, and this address will be evaluated for       incoming signature confirmations.       The address must be the signer of the signature.       Changing this address means changing every signature        signed. This is not good.       For clarity:       Contract deployer: Daccred.sol.",
    "errors": {
      "Unsigned(address)": [
        {
          "details": "Thrown when the address passed to the verify function is not signed."
        }
      ]
    },
    "events": {
      "VerifySignature(bytes32,bool)": {
        "details": "Emitted when a signature is verified by the         allowlistOwner."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "constructor, setting the allowlistOwner."
      },
      "getAllowlistOwner()": {
        "details": "Return the allowlistOwner.",
        "notice": "Callable by anyone.",
        "returns": {
          "_0": "address of allowlistOwner."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call       `onlyOwner` functions anymore. Can only be called by the current owner.       NOTE: Renouncing ownership will leave the contract without an owner,       thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`).       Can only be called by the current owner."
      },
      "verifySignature(bytes32,bytes)": {
        "details": "Returns true if the signer of signature `sig` is the `allowlistOwner`.       And false if otherwise.",
        "notice": "Callable by anyone.",
        "returns": {
          "_0": "bool true or false."
        }
      },
      "verifySigner(address,bytes32,bytes)": {
        "details": "Returns true if the signer of `_signature` is `_signer`.",
        "notice": "Callable by anyone.",
        "returns": {
          "_0": "bool true or false."
        }
      }
    },
    "stateVariables": {
      "allowlistOwner": {
        "details": "The wallet that initiated the transaction to deploy         this allowlist contract         [And other subsequent ones inheriting this],          passed as msg.sender from the Daccred.sol."
      }
    },
    "title": "Allowlist Contract.",
    "version": 1
  },
  "offset": [
    1208,
    6019
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x62 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6E0A8746 EQ PUSH2 0x67 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x91 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x9B JUMPI DUP1 PUSH4 0xDACA6F78 EQ PUSH2 0xAC JUMPI DUP1 PUSH4 0xE92B0842 EQ PUSH2 0xCF JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xE2 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 PUSH2 0xF5 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x74 JUMP JUMPDEST PUSH2 0xBF PUSH2 0xBA CALLDATASIZE PUSH1 0x4 PUSH2 0x4FE JUMP JUMPDEST PUSH2 0x109 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x88 JUMP JUMPDEST PUSH2 0xBF PUSH2 0xDD CALLDATASIZE PUSH1 0x4 PUSH2 0x561 JUMP JUMPDEST PUSH2 0x11C JUMP JUMPDEST PUSH2 0x99 PUSH2 0xF0 CALLDATASIZE PUSH1 0x4 PUSH2 0x5B8 JUMP JUMPDEST PUSH2 0x1B0 JUMP JUMPDEST PUSH2 0xFD PUSH2 0x22E JUMP JUMPDEST PUSH2 0x107 PUSH1 0x0 PUSH2 0x288 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x115 DUP4 DUP4 PUSH2 0x2D8 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 DUP2 ADD MLOAD PUSH1 0x40 DUP1 DUP5 ADD MLOAD PUSH1 0x60 DUP1 DUP7 ADD MLOAD DUP4 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE DUP2 DUP9 ADD DUP1 DUP8 MSTORE DUP11 SWAP1 MSTORE SWAP2 DUP3 BYTE DUP2 DUP7 ADD DUP2 SWAP1 MSTORE SWAP3 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP5 SWAP1 MSTORE SWAP4 MLOAD SWAP1 SWAP6 SWAP3 SWAP4 SWAP2 SWAP3 PUSH1 0x1 SWAP3 PUSH1 0xA0 DUP1 DUP3 ADD SWAP4 PUSH1 0x1F NOT DUP2 ADD SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x186 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ SWAP4 POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1B8 PUSH2 0x22E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x222 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x22B DUP2 PUSH2 0x288 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x107 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x219 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E2 PUSH2 0x22E JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x350 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A3A2043616C6C20746F20636F6E7472616374206D6164652062 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x3C903737B716B7BBB732B9 PUSH1 0xA9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x219 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x41 EQ PUSH2 0x3A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4572723A3A20496E76616C6964207369676E6174757265206C656E6774680000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x219 JUMP JUMPDEST PUSH1 0x20 DUP3 DUP2 ADD MLOAD PUSH1 0x40 DUP1 DUP6 ADD MLOAD PUSH1 0x60 DUP1 DUP8 ADD MLOAD DUP4 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE SWAP7 DUP2 ADD DUP1 DUP7 MSTORE DUP11 SWAP1 MSTORE SWAP1 DUP7 BYTE SWAP4 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE SWAP3 SWAP4 SWAP1 SWAP3 PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x405 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT DUP2 ADD MLOAD PUSH1 0x1 SLOAD SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP2 AND EQ SWAP2 POP DUP2 SWAP1 DUP10 SWAP1 PUSH32 0x7E4FE2A2A805A357593FDBDDE58C02F6A53D8B4960744CD31A98697FC11C2E36 SWAP1 PUSH1 0x0 SWAP1 LOG3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x482 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x49D JUMPI PUSH2 0x49D PUSH2 0x45B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x4C5 JUMPI PUSH2 0x4C5 PUSH2 0x45B JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x4DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x511 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x52F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x53B DUP6 DUP3 DUP7 ADD PUSH2 0x471 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x55C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x576 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x57F DUP5 PUSH2 0x545 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x5A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5AE DUP7 DUP3 DUP8 ADD PUSH2 0x471 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x115 DUP3 PUSH2 0x545 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x29 SWAP3 0xC5 ADDRESS MLOAD EQ SHR PUSH1 0x70 0xE2 0xCB 0xAF CHAINID PUSH2 0x7958 REVERT 0xC8 LT SMOD CREATE2 0xAA 0x5E XOR 0xFC SWAP2 CALLVALUE 0xA6 CHAINID PUSH11 0xF7D764736F6C634300080F STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        1208,
        6019
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "6": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "DUP1",
      "path": "0"
    },
    "7": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "8": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "12": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "DUP1",
      "path": "0"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "REVERT",
      "path": "0"
    },
    "16": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "17": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "POP",
      "path": "0"
    },
    "18": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "21": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "LT",
      "path": "0"
    },
    "22": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x62"
    },
    "25": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "26": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "29": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "SHR",
      "path": "0"
    },
    "32": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "DUP1",
      "path": "0"
    },
    "33": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x6E0A8746"
    },
    "38": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "EQ",
      "path": "0"
    },
    "39": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x67"
    },
    "42": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "43": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "DUP1",
      "path": "0"
    },
    "44": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x715018A6"
    },
    "49": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "EQ",
      "path": "0"
    },
    "50": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x91"
    },
    "53": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "54": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "DUP1",
      "path": "0"
    },
    "55": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x8DA5CB5B"
    },
    "60": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "EQ",
      "path": "0"
    },
    "61": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x9B"
    },
    "64": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "65": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "DUP1",
      "path": "0"
    },
    "66": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xDACA6F78"
    },
    "71": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "EQ",
      "path": "0"
    },
    "72": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xAC"
    },
    "75": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "76": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "DUP1",
      "path": "0"
    },
    "77": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xE92B0842"
    },
    "82": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "EQ",
      "path": "0"
    },
    "83": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCF"
    },
    "86": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "87": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "DUP1",
      "path": "0"
    },
    "88": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xF2FDE38B"
    },
    "93": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "EQ",
      "path": "0"
    },
    "94": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE2"
    },
    "97": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "98": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "99": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "101": {
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "DUP1",
      "path": "0"
    },
    "102": {
      "first_revert": true,
      "fn": null,
      "offset": [
        1208,
        6019
      ],
      "op": "REVERT",
      "path": "0"
    },
    "103": {
      "fn": "Allowlist.getAllowlistOwner",
      "offset": [
        2018,
        2114
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "104": {
      "fn": "Allowlist.getAllowlistOwner",
      "offset": [
        2093,
        2107
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 0,
      "value": "0x1"
    },
    "106": {
      "fn": "Allowlist.getAllowlistOwner",
      "offset": [
        2093,
        2107
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "107": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "109": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "111": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "113": {
      "op": "SHL"
    },
    "114": {
      "op": "SUB"
    },
    "115": {
      "fn": "Allowlist.getAllowlistOwner",
      "offset": [
        2093,
        2107
      ],
      "op": "AND",
      "path": "0"
    },
    "116": {
      "fn": "Allowlist.getAllowlistOwner",
      "offset": [
        2018,
        2114
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "117": {
      "fn": "Allowlist.getAllowlistOwner",
      "offset": [
        2018,
        2114
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "119": {
      "fn": "Allowlist.getAllowlistOwner",
      "offset": [
        2018,
        2114
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "120": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "122": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "124": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "126": {
      "op": "SHL"
    },
    "127": {
      "op": "SUB"
    },
    "128": {
      "op": "SWAP1"
    },
    "129": {
      "op": "SWAP2"
    },
    "130": {
      "op": "AND"
    },
    "131": {
      "op": "DUP2"
    },
    "132": {
      "op": "MSTORE"
    },
    "133": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "135": {
      "op": "ADD"
    },
    "136": {
      "fn": "Allowlist.getAllowlistOwner",
      "offset": [
        2018,
        2114
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "137": {
      "fn": "Allowlist.getAllowlistOwner",
      "offset": [
        2018,
        2114
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "139": {
      "fn": "Allowlist.getAllowlistOwner",
      "offset": [
        2018,
        2114
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "140": {
      "fn": "Allowlist.getAllowlistOwner",
      "offset": [
        2018,
        2114
      ],
      "op": "DUP1",
      "path": "0"
    },
    "141": {
      "fn": "Allowlist.getAllowlistOwner",
      "offset": [
        2018,
        2114
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "142": {
      "fn": "Allowlist.getAllowlistOwner",
      "offset": [
        2018,
        2114
      ],
      "op": "SUB",
      "path": "0"
    },
    "143": {
      "fn": "Allowlist.getAllowlistOwner",
      "offset": [
        2018,
        2114
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "144": {
      "fn": "Allowlist.getAllowlistOwner",
      "offset": [
        2018,
        2114
      ],
      "op": "RETURN",
      "path": "0"
    },
    "145": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        2147,
        2248
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "146": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        2147,
        2248
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x99"
    },
    "149": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        2147,
        2248
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF5"
    },
    "152": {
      "fn": "Ownable.renounceOwnership",
      "jump": "i",
      "offset": [
        2147,
        2248
      ],
      "op": "JUMP",
      "path": "2"
    },
    "153": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        2147,
        2248
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "154": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        2147,
        2248
      ],
      "op": "STOP",
      "path": "2"
    },
    "155": {
      "fn": "Ownable.owner",
      "offset": [
        1506,
        1591
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "156": {
      "fn": "Ownable.owner",
      "offset": [
        1552,
        1559
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "158": {
      "fn": "Ownable.owner",
      "offset": [
        1578,
        1584
      ],
      "op": "SLOAD",
      "path": "2",
      "statement": 1
    },
    "159": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "161": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "163": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "165": {
      "op": "SHL"
    },
    "166": {
      "op": "SUB"
    },
    "167": {
      "fn": "Ownable.owner",
      "offset": [
        1578,
        1584
      ],
      "op": "AND",
      "path": "2"
    },
    "168": {
      "fn": "Ownable.owner",
      "offset": [
        1506,
        1591
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x74"
    },
    "171": {
      "fn": "Ownable.owner",
      "offset": [
        1506,
        1591
      ],
      "op": "JUMP",
      "path": "2"
    },
    "172": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2334,
        2477
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "173": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2334,
        2477
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xBF"
    },
    "176": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2334,
        2477
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xBA"
    },
    "179": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2334,
        2477
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "180": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2334,
        2477
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "182": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2334,
        2477
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4FE"
    },
    "185": {
      "fn": "Allowlist.verifySignature",
      "jump": "i",
      "offset": [
        2334,
        2477
      ],
      "op": "JUMP",
      "path": "0"
    },
    "186": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2334,
        2477
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "187": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2334,
        2477
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x109"
    },
    "190": {
      "fn": "Allowlist.verifySignature",
      "jump": "i",
      "offset": [
        2334,
        2477
      ],
      "op": "JUMP",
      "path": "0"
    },
    "191": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2334,
        2477
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "192": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2334,
        2477
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "194": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2334,
        2477
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "195": {
      "op": "SWAP1"
    },
    "196": {
      "op": "ISZERO"
    },
    "197": {
      "op": "ISZERO"
    },
    "198": {
      "op": "DUP2"
    },
    "199": {
      "op": "MSTORE"
    },
    "200": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "202": {
      "op": "ADD"
    },
    "203": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2334,
        2477
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x88"
    },
    "206": {
      "op": "JUMP"
    },
    "207": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4649,
        4917
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "208": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4649,
        4917
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xBF"
    },
    "211": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4649,
        4917
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDD"
    },
    "214": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4649,
        4917
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "215": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4649,
        4917
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "217": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4649,
        4917
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x561"
    },
    "220": {
      "fn": "Allowlist.verifySigner",
      "jump": "i",
      "offset": [
        4649,
        4917
      ],
      "op": "JUMP",
      "path": "0"
    },
    "221": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4649,
        4917
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "222": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4649,
        4917
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11C"
    },
    "225": {
      "fn": "Allowlist.verifySigner",
      "jump": "i",
      "offset": [
        4649,
        4917
      ],
      "op": "JUMP",
      "path": "0"
    },
    "226": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2401,
        2599
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "227": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2401,
        2599
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x99"
    },
    "230": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2401,
        2599
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF0"
    },
    "233": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2401,
        2599
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "234": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2401,
        2599
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "236": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2401,
        2599
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5B8"
    },
    "239": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        2401,
        2599
      ],
      "op": "JUMP",
      "path": "2"
    },
    "240": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2401,
        2599
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "241": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2401,
        2599
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1B0"
    },
    "244": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        2401,
        2599
      ],
      "op": "JUMP",
      "path": "2"
    },
    "245": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        2147,
        2248
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "246": {
      "offset": [
        1401,
        1414
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFD"
    },
    "249": {
      "offset": [
        1401,
        1412
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x22E"
    },
    "252": {
      "jump": "i",
      "offset": [
        1401,
        1414
      ],
      "op": "JUMP",
      "path": "2"
    },
    "253": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1401,
        1414
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "254": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        2211,
        2241
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 2,
      "value": "0x107"
    },
    "257": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        2238,
        2239
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "259": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        2211,
        2229
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x288"
    },
    "262": {
      "fn": "Ownable.renounceOwnership",
      "jump": "i",
      "offset": [
        2211,
        2241
      ],
      "op": "JUMP",
      "path": "2"
    },
    "263": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        2211,
        2241
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "264": {
      "fn": "Ownable.renounceOwnership",
      "jump": "o",
      "offset": [
        2147,
        2248
      ],
      "op": "JUMP",
      "path": "2"
    },
    "265": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2334,
        2477
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "266": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2416,
        2420
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "268": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2443,
        2470
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 3,
      "value": "0x115"
    },
    "271": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2460,
        2464
      ],
      "op": "DUP4",
      "path": "0"
    },
    "272": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2466,
        2469
      ],
      "op": "DUP4",
      "path": "0"
    },
    "273": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2443,
        2459
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2D8"
    },
    "276": {
      "fn": "Allowlist.verifySignature",
      "jump": "i",
      "offset": [
        2443,
        2470
      ],
      "op": "JUMP",
      "path": "0"
    },
    "277": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2443,
        2470
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "278": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2436,
        2470
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "279": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2334,
        2477
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "280": {
      "op": "POP"
    },
    "281": {
      "op": "POP"
    },
    "282": {
      "op": "POP"
    },
    "283": {
      "fn": "Allowlist.verifySignature",
      "jump": "o",
      "offset": [
        2334,
        2477
      ],
      "op": "JUMP",
      "path": "0"
    },
    "284": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4649,
        4917
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "285": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5808,
        5810
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "287": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5799,
        5811
      ],
      "op": "DUP2",
      "path": "0"
    },
    "288": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5799,
        5811
      ],
      "op": "DUP2",
      "path": "0"
    },
    "289": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5799,
        5811
      ],
      "op": "ADD",
      "path": "0"
    },
    "290": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5793,
        5812
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "291": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5883,
        5885
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "293": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5874,
        5886
      ],
      "op": "DUP1",
      "path": "0"
    },
    "294": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5874,
        5886
      ],
      "op": "DUP5",
      "path": "0"
    },
    "295": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5874,
        5886
      ],
      "op": "ADD",
      "path": "0"
    },
    "296": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5868,
        5887
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "297": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5995,
        5997
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "299": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5986,
        5998
      ],
      "op": "DUP1",
      "path": "0"
    },
    "300": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5986,
        5998
      ],
      "op": "DUP7",
      "path": "0"
    },
    "301": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5986,
        5998
      ],
      "op": "ADD",
      "path": "0"
    },
    "302": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5980,
        5999
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "303": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 4
    },
    "304": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "305": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4780,
        4784
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "307": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "DUP1",
      "path": "0"
    },
    "308": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "DUP3",
      "path": "0"
    },
    "309": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "310": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "DUP2",
      "path": "0"
    },
    "311": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "DUP9",
      "path": "0"
    },
    "312": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "ADD",
      "path": "0"
    },
    "313": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "DUP1",
      "path": "0"
    },
    "314": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "DUP8",
      "path": "0"
    },
    "315": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "316": {
      "op": "DUP11"
    },
    "317": {
      "op": "SWAP1"
    },
    "318": {
      "op": "MSTORE"
    },
    "319": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5972,
        6000
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "320": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5972,
        6000
      ],
      "op": "DUP3",
      "path": "0"
    },
    "321": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5972,
        6000
      ],
      "op": "BYTE",
      "path": "0"
    },
    "322": {
      "op": "DUP2"
    },
    "323": {
      "op": "DUP7"
    },
    "324": {
      "op": "ADD"
    },
    "325": {
      "op": "DUP2"
    },
    "326": {
      "op": "SWAP1"
    },
    "327": {
      "op": "MSTORE"
    },
    "328": {
      "op": "SWAP3"
    },
    "329": {
      "op": "DUP2"
    },
    "330": {
      "op": "ADD"
    },
    "331": {
      "op": "DUP7"
    },
    "332": {
      "op": "SWAP1"
    },
    "333": {
      "op": "MSTORE"
    },
    "334": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "336": {
      "op": "DUP2"
    },
    "337": {
      "op": "ADD"
    },
    "338": {
      "op": "DUP5"
    },
    "339": {
      "op": "SWAP1"
    },
    "340": {
      "op": "MSTORE"
    },
    "341": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "342": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "343": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4780,
        4784
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "344": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4780,
        4784
      ],
      "op": "SWAP6",
      "path": "0"
    },
    "345": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5868,
        5887
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "346": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5868,
        5887
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "347": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5972,
        6000
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "348": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5972,
        6000
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "349": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "351": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "352": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "354": {
      "op": "DUP1"
    },
    "355": {
      "op": "DUP3"
    },
    "356": {
      "op": "ADD"
    },
    "357": {
      "op": "SWAP4"
    },
    "358": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "360": {
      "op": "NOT"
    },
    "361": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "DUP2",
      "path": "0"
    },
    "362": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "ADD",
      "path": "0"
    },
    "363": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "364": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "DUP2",
      "path": "0"
    },
    "365": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "366": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "SUB",
      "path": "0"
    },
    "367": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "368": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "369": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "ADD",
      "path": "0"
    },
    "370": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "371": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "DUP6",
      "path": "0"
    },
    "372": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "GAS",
      "path": "0"
    },
    "373": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "STATICCALL",
      "path": "0"
    },
    "374": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "375": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "DUP1",
      "path": "0"
    },
    "376": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "377": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x186"
    },
    "380": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "381": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "382": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "384": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "DUP1",
      "path": "0"
    },
    "385": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "RETURNDATACOPY",
      "path": "0"
    },
    "386": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "387": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "389": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "REVERT",
      "path": "0"
    },
    "390": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "391": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "POP",
      "path": "0"
    },
    "392": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "POP",
      "path": "0"
    },
    "393": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "POP",
      "path": "0"
    },
    "394": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "396": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "398": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "399": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "SUB",
      "path": "0"
    },
    "400": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4884,
        4909
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "401": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "403": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "405": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "407": {
      "op": "SHL"
    },
    "408": {
      "op": "SUB"
    },
    "409": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4873,
        4909
      ],
      "op": "AND",
      "path": "0"
    },
    "410": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4873,
        4880
      ],
      "op": "DUP8",
      "path": "0"
    },
    "411": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "413": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "415": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "417": {
      "op": "SHL"
    },
    "418": {
      "op": "SUB"
    },
    "419": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4873,
        4909
      ],
      "op": "AND",
      "path": "0"
    },
    "420": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4873,
        4909
      ],
      "op": "EQ",
      "path": "0"
    },
    "421": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4866,
        4910
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "422": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4866,
        4910
      ],
      "op": "POP",
      "path": "0"
    },
    "423": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4866,
        4910
      ],
      "op": "POP",
      "path": "0"
    },
    "424": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4866,
        4910
      ],
      "op": "POP",
      "path": "0"
    },
    "425": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4866,
        4910
      ],
      "op": "POP",
      "path": "0"
    },
    "426": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4649,
        4917
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "427": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4649,
        4917
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "428": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4649,
        4917
      ],
      "op": "POP",
      "path": "0"
    },
    "429": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4649,
        4917
      ],
      "op": "POP",
      "path": "0"
    },
    "430": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4649,
        4917
      ],
      "op": "POP",
      "path": "0"
    },
    "431": {
      "fn": "Allowlist.verifySigner",
      "jump": "o",
      "offset": [
        4649,
        4917
      ],
      "op": "JUMP",
      "path": "0"
    },
    "432": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2401,
        2599
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "433": {
      "offset": [
        1401,
        1414
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1B8"
    },
    "436": {
      "offset": [
        1401,
        1412
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x22E"
    },
    "439": {
      "jump": "i",
      "offset": [
        1401,
        1414
      ],
      "op": "JUMP",
      "path": "2"
    },
    "440": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1401,
        1414
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "441": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "443": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "445": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "447": {
      "op": "SHL"
    },
    "448": {
      "op": "SUB"
    },
    "449": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2489,
        2511
      ],
      "op": "DUP2",
      "path": "2",
      "statement": 5
    },
    "450": {
      "branch": 17,
      "fn": "Ownable.transferOwnership",
      "offset": [
        2489,
        2511
      ],
      "op": "AND",
      "path": "2"
    },
    "451": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2481,
        2554
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x222"
    },
    "454": {
      "branch": 17,
      "fn": "Ownable.transferOwnership",
      "offset": [
        2481,
        2554
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "455": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2481,
        2554
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "457": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2481,
        2554
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "458": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "462": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "464": {
      "op": "SHL"
    },
    "465": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2481,
        2554
      ],
      "op": "DUP2",
      "path": "2"
    },
    "466": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2481,
        2554
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "467": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "469": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2481,
        2554
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "471": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2481,
        2554
      ],
      "op": "DUP3",
      "path": "2"
    },
    "472": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2481,
        2554
      ],
      "op": "ADD",
      "path": "2"
    },
    "473": {
      "op": "MSTORE"
    },
    "474": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "476": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "478": {
      "op": "DUP3"
    },
    "479": {
      "op": "ADD"
    },
    "480": {
      "op": "MSTORE"
    },
    "481": {
      "op": "PUSH32",
      "value": "0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
    },
    "514": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "516": {
      "op": "DUP3"
    },
    "517": {
      "op": "ADD"
    },
    "518": {
      "op": "MSTORE"
    },
    "519": {
      "op": "PUSH6",
      "value": "0x646472657373"
    },
    "526": {
      "op": "PUSH1",
      "value": "0xD0"
    },
    "528": {
      "op": "SHL"
    },
    "529": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "531": {
      "op": "DUP3"
    },
    "532": {
      "op": "ADD"
    },
    "533": {
      "op": "MSTORE"
    },
    "534": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "536": {
      "op": "ADD"
    },
    "537": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2481,
        2554
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "538": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2481,
        2554
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "540": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2481,
        2554
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "541": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2481,
        2554
      ],
      "op": "DUP1",
      "path": "2"
    },
    "542": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2481,
        2554
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "543": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2481,
        2554
      ],
      "op": "SUB",
      "path": "2"
    },
    "544": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2481,
        2554
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "545": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2481,
        2554
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "2"
    },
    "546": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2481,
        2554
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "547": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2564,
        2592
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 6,
      "value": "0x22B"
    },
    "550": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2583,
        2591
      ],
      "op": "DUP2",
      "path": "2"
    },
    "551": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2564,
        2582
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x288"
    },
    "554": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        2564,
        2592
      ],
      "op": "JUMP",
      "path": "2"
    },
    "555": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2564,
        2592
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "556": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2401,
        2599
      ],
      "op": "POP",
      "path": "2"
    },
    "557": {
      "fn": "Ownable.transferOwnership",
      "jump": "o",
      "offset": [
        2401,
        2599
      ],
      "op": "JUMP",
      "path": "2"
    },
    "558": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1662,
        1792
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "559": {
      "fn": "Ownable.owner",
      "offset": [
        1552,
        1559
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "561": {
      "fn": "Ownable.owner",
      "offset": [
        1578,
        1584
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "562": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "564": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "566": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "568": {
      "op": "SHL"
    },
    "569": {
      "op": "SUB"
    },
    "570": {
      "fn": "Ownable.owner",
      "offset": [
        1578,
        1584
      ],
      "op": "AND",
      "path": "2"
    },
    "571": {
      "fn": "Ownable._msgSender",
      "offset": [
        3057,
        3067
      ],
      "op": "CALLER",
      "path": "2",
      "statement": 7
    },
    "572": {
      "branch": 18,
      "fn": "Ownable._checkOwner",
      "offset": [
        1725,
        1748
      ],
      "op": "EQ",
      "path": "2",
      "statement": 8
    },
    "573": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1717,
        1785
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x107"
    },
    "576": {
      "branch": 18,
      "fn": "Ownable._checkOwner",
      "offset": [
        1717,
        1785
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "577": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1717,
        1785
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "579": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1717,
        1785
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "580": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "584": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "586": {
      "op": "SHL"
    },
    "587": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1717,
        1785
      ],
      "op": "DUP2",
      "path": "2"
    },
    "588": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1717,
        1785
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "589": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "591": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1717,
        1785
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "593": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1717,
        1785
      ],
      "op": "DUP3",
      "path": "2"
    },
    "594": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1717,
        1785
      ],
      "op": "ADD",
      "path": "2"
    },
    "595": {
      "op": "DUP2"
    },
    "596": {
      "op": "SWAP1"
    },
    "597": {
      "op": "MSTORE"
    },
    "598": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "600": {
      "op": "DUP3"
    },
    "601": {
      "op": "ADD"
    },
    "602": {
      "op": "MSTORE"
    },
    "603": {
      "op": "PUSH32",
      "value": "0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
    },
    "636": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "638": {
      "op": "DUP3"
    },
    "639": {
      "op": "ADD"
    },
    "640": {
      "op": "MSTORE"
    },
    "641": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "643": {
      "op": "ADD"
    },
    "644": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1717,
        1785
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x219"
    },
    "647": {
      "op": "JUMP"
    },
    "648": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2757,
        2944
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "649": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2830,
        2846
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "651": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2849,
        2855
      ],
      "op": "DUP1",
      "path": "2"
    },
    "652": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2849,
        2855
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "653": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "655": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "657": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "659": {
      "op": "SHL"
    },
    "660": {
      "op": "SUB"
    },
    "661": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2865,
        2882
      ],
      "op": "DUP4",
      "path": "2",
      "statement": 9
    },
    "662": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2865,
        2882
      ],
      "op": "DUP2",
      "path": "2"
    },
    "663": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2865,
        2882
      ],
      "op": "AND",
      "path": "2"
    },
    "664": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "666": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "668": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "670": {
      "op": "SHL"
    },
    "671": {
      "op": "SUB"
    },
    "672": {
      "op": "NOT"
    },
    "673": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2865,
        2882
      ],
      "op": "DUP4",
      "path": "2"
    },
    "674": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2865,
        2882
      ],
      "op": "AND",
      "path": "2"
    },
    "675": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2865,
        2882
      ],
      "op": "DUP2",
      "path": "2"
    },
    "676": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2865,
        2882
      ],
      "op": "OR",
      "path": "2"
    },
    "677": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2865,
        2882
      ],
      "op": "DUP5",
      "path": "2"
    },
    "678": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2865,
        2882
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "679": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2897,
        2937
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 10,
      "value": "0x40"
    },
    "681": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2897,
        2937
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "682": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2849,
        2855
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "683": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2849,
        2855
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "684": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2849,
        2855
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "685": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2849,
        2855
      ],
      "op": "AND",
      "path": "2"
    },
    "686": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2849,
        2855
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "687": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2849,
        2855
      ],
      "op": "DUP4",
      "path": "2"
    },
    "688": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2849,
        2855
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "689": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2897,
        2937
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
    },
    "722": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2897,
        2937
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "723": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2830,
        2846
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "724": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2897,
        2937
      ],
      "op": "LOG3",
      "path": "2"
    },
    "725": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2820,
        2944
      ],
      "op": "POP",
      "path": "2"
    },
    "726": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2757,
        2944
      ],
      "op": "POP",
      "path": "2"
    },
    "727": {
      "fn": "Ownable._transferOwnership",
      "jump": "o",
      "offset": [
        2757,
        2944
      ],
      "op": "JUMP",
      "path": "2"
    },
    "728": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3437,
        4480
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "729": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3534,
        3538
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "731": {
      "offset": [
        1401,
        1414
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2E2"
    },
    "734": {
      "offset": [
        1401,
        1412
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x22E"
    },
    "737": {
      "jump": "i",
      "offset": [
        1401,
        1414
      ],
      "op": "JUMP",
      "path": "2"
    },
    "738": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        1401,
        1414
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "739": {
      "fn": "Ownable.owner",
      "offset": [
        1552,
        1559
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "741": {
      "fn": "Ownable.owner",
      "offset": [
        1578,
        1584
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "742": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "744": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "746": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "748": {
      "op": "SHL"
    },
    "749": {
      "op": "SUB"
    },
    "750": {
      "fn": "Ownable.owner",
      "offset": [
        1578,
        1584
      ],
      "op": "AND",
      "path": "2"
    },
    "751": {
      "fn": "Ownable._msgSender",
      "offset": [
        3057,
        3067
      ],
      "op": "CALLER",
      "path": "2"
    },
    "752": {
      "branch": 15,
      "fn": "Allowlist._verifySignature",
      "offset": [
        3699,
        3722
      ],
      "op": "EQ",
      "path": "0",
      "statement": 11
    },
    "753": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3678,
        3792
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x350"
    },
    "756": {
      "branch": 15,
      "fn": "Allowlist._verifySignature",
      "offset": [
        3678,
        3792
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "757": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3678,
        3792
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "759": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3678,
        3792
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "760": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "764": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "766": {
      "op": "SHL"
    },
    "767": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3678,
        3792
      ],
      "op": "DUP2",
      "path": "0"
    },
    "768": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3678,
        3792
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "769": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "771": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3678,
        3792
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "773": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3678,
        3792
      ],
      "op": "DUP3",
      "path": "0"
    },
    "774": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3678,
        3792
      ],
      "op": "ADD",
      "path": "0"
    },
    "775": {
      "op": "MSTORE"
    },
    "776": {
      "op": "PUSH1",
      "value": "0x2B"
    },
    "778": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "780": {
      "op": "DUP3"
    },
    "781": {
      "op": "ADD"
    },
    "782": {
      "op": "MSTORE"
    },
    "783": {
      "op": "PUSH32",
      "value": "0x4552433732313A3A2043616C6C20746F20636F6E7472616374206D6164652062"
    },
    "816": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "818": {
      "op": "DUP3"
    },
    "819": {
      "op": "ADD"
    },
    "820": {
      "op": "MSTORE"
    },
    "821": {
      "op": "PUSH11",
      "value": "0x3C903737B716B7BBB732B9"
    },
    "833": {
      "op": "PUSH1",
      "value": "0xA9"
    },
    "835": {
      "op": "SHL"
    },
    "836": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "838": {
      "op": "DUP3"
    },
    "839": {
      "op": "ADD"
    },
    "840": {
      "op": "MSTORE"
    },
    "841": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "843": {
      "op": "ADD"
    },
    "844": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3678,
        3792
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x219"
    },
    "847": {
      "op": "JUMP"
    },
    "848": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3678,
        3792
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "849": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3870,
        3873
      ],
      "op": "DUP2",
      "path": "0",
      "statement": 12
    },
    "850": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3870,
        3880
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "851": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3884,
        3886
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x41"
    },
    "853": {
      "branch": 16,
      "fn": "Allowlist._verifySignature",
      "offset": [
        3870,
        3886
      ],
      "op": "EQ",
      "path": "0"
    },
    "854": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3862,
        3921
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3A1"
    },
    "857": {
      "branch": 16,
      "fn": "Allowlist._verifySignature",
      "offset": [
        3862,
        3921
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "858": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3862,
        3921
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "860": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3862,
        3921
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "861": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "865": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "867": {
      "op": "SHL"
    },
    "868": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3862,
        3921
      ],
      "op": "DUP2",
      "path": "0"
    },
    "869": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3862,
        3921
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "870": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "872": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3862,
        3921
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "874": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3862,
        3921
      ],
      "op": "DUP3",
      "path": "0"
    },
    "875": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3862,
        3921
      ],
      "op": "ADD",
      "path": "0"
    },
    "876": {
      "op": "MSTORE"
    },
    "877": {
      "op": "PUSH1",
      "value": "0x1E"
    },
    "879": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "881": {
      "op": "DUP3"
    },
    "882": {
      "op": "ADD"
    },
    "883": {
      "op": "MSTORE"
    },
    "884": {
      "op": "PUSH32",
      "value": "0x4572723A3A20496E76616C6964207369676E6174757265206C656E6774680000"
    },
    "917": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "919": {
      "op": "DUP3"
    },
    "920": {
      "op": "ADD"
    },
    "921": {
      "op": "MSTORE"
    },
    "922": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "924": {
      "op": "ADD"
    },
    "925": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3862,
        3921
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x219"
    },
    "928": {
      "op": "JUMP"
    },
    "929": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3862,
        3921
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "930": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5808,
        5810
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "932": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5799,
        5811
      ],
      "op": "DUP3",
      "path": "0"
    },
    "933": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5799,
        5811
      ],
      "op": "DUP2",
      "path": "0"
    },
    "934": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5799,
        5811
      ],
      "op": "ADD",
      "path": "0"
    },
    "935": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5793,
        5812
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "936": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5883,
        5885
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "938": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5874,
        5886
      ],
      "op": "DUP1",
      "path": "0"
    },
    "939": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5874,
        5886
      ],
      "op": "DUP6",
      "path": "0"
    },
    "940": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5874,
        5886
      ],
      "op": "ADD",
      "path": "0"
    },
    "941": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5868,
        5887
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "942": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5995,
        5997
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "944": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5986,
        5998
      ],
      "op": "DUP1",
      "path": "0"
    },
    "945": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5986,
        5998
      ],
      "op": "DUP8",
      "path": "0"
    },
    "946": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5986,
        5998
      ],
      "op": "ADD",
      "path": "0"
    },
    "947": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5980,
        5999
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "948": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "DUP4",
      "path": "0"
    },
    "949": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "950": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4000,
        4009
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "952": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "DUP1",
      "path": "0"
    },
    "953": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "DUP3",
      "path": "0"
    },
    "954": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "955": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "SWAP7",
      "path": "0"
    },
    "956": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "DUP2",
      "path": "0"
    },
    "957": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "ADD",
      "path": "0"
    },
    "958": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "DUP1",
      "path": "0"
    },
    "959": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "DUP7",
      "path": "0"
    },
    "960": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "961": {
      "op": "DUP11"
    },
    "962": {
      "op": "SWAP1"
    },
    "963": {
      "op": "MSTORE"
    },
    "964": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5972,
        6000
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "965": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5972,
        6000
      ],
      "op": "DUP7",
      "path": "0"
    },
    "966": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5972,
        6000
      ],
      "op": "BYTE",
      "path": "0"
    },
    "967": {
      "op": "SWAP4"
    },
    "968": {
      "op": "DUP2"
    },
    "969": {
      "op": "ADD"
    },
    "970": {
      "op": "DUP5"
    },
    "971": {
      "op": "SWAP1"
    },
    "972": {
      "op": "MSTORE"
    },
    "973": {
      "op": "SWAP1"
    },
    "974": {
      "op": "DUP2"
    },
    "975": {
      "op": "ADD"
    },
    "976": {
      "op": "DUP5"
    },
    "977": {
      "op": "SWAP1"
    },
    "978": {
      "op": "MSTORE"
    },
    "979": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "981": {
      "op": "DUP2"
    },
    "982": {
      "op": "ADD"
    },
    "983": {
      "op": "DUP3"
    },
    "984": {
      "op": "SWAP1"
    },
    "985": {
      "op": "MSTORE"
    },
    "986": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5793,
        5812
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "987": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5793,
        5812
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "988": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5868,
        5887
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "989": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        5868,
        5887
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "990": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "992": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "993": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "995": {
      "op": "ADD"
    },
    "996": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "998": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1000": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1001": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1003": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1004": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "SUB",
      "path": "0"
    },
    "1005": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1006": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1007": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1008": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "SUB",
      "path": "0"
    },
    "1009": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1010": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "DUP6",
      "path": "0"
    },
    "1011": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "GAS",
      "path": "0"
    },
    "1012": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "STATICCALL",
      "path": "0"
    },
    "1013": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1014": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1015": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1016": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x405"
    },
    "1019": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1020": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "1021": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1023": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1024": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "RETURNDATACOPY",
      "path": "0"
    },
    "1025": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "1026": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1028": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "REVERT",
      "path": "0"
    },
    "1029": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1030": {
      "op": "POP"
    },
    "1031": {
      "op": "POP"
    },
    "1032": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1034": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1035": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1037": {
      "op": "NOT"
    },
    "1038": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1039": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "ADD",
      "path": "0"
    },
    "1040": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1041": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4272,
        4286
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1043": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4272,
        4286
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1044": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1045": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4134,
        4158
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "1046": {
      "op": "POP"
    },
    "1047": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1049": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1051": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1053": {
      "op": "SHL"
    },
    "1054": {
      "op": "SUB"
    },
    "1055": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4262,
        4286
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1056": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4262,
        4286
      ],
      "op": "DUP6",
      "path": "0"
    },
    "1057": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4262,
        4286
      ],
      "op": "AND",
      "path": "0"
    },
    "1058": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4272,
        4286
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1059": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4272,
        4286
      ],
      "op": "AND",
      "path": "0"
    },
    "1060": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4262,
        4286
      ],
      "op": "EQ",
      "path": "0"
    },
    "1061": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4262,
        4286
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1062": {
      "op": "POP"
    },
    "1063": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4262,
        4286
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1064": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4262,
        4286
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1065": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4369,
        4373
      ],
      "op": "DUP10",
      "path": "0",
      "statement": 13
    },
    "1066": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4369,
        4373
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1067": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4353,
        4398
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x7E4FE2A2A805A357593FDBDDE58C02F6A53D8B4960744CD31A98697FC11C2E36"
    },
    "1100": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4353,
        4398
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1101": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4231,
        4258
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1103": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4231,
        4258
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1104": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4353,
        4398
      ],
      "op": "LOG3",
      "path": "0"
    },
    "1105": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4451,
        4473
      ],
      "op": "SWAP8",
      "path": "0",
      "statement": 14
    },
    "1106": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3437,
        4480
      ],
      "op": "SWAP7",
      "path": "0"
    },
    "1107": {
      "op": "POP"
    },
    "1108": {
      "op": "POP"
    },
    "1109": {
      "op": "POP"
    },
    "1110": {
      "op": "POP"
    },
    "1111": {
      "op": "POP"
    },
    "1112": {
      "op": "POP"
    },
    "1113": {
      "op": "POP"
    },
    "1114": {
      "fn": "Allowlist._verifySignature",
      "jump": "o",
      "offset": [
        3437,
        4480
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1115": {
      "op": "JUMPDEST"
    },
    "1116": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "1121": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1123": {
      "op": "SHL"
    },
    "1124": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1126": {
      "op": "MSTORE"
    },
    "1127": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "1129": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "1131": {
      "op": "MSTORE"
    },
    "1132": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1134": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1136": {
      "op": "REVERT"
    },
    "1137": {
      "op": "JUMPDEST"
    },
    "1138": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1140": {
      "op": "DUP3"
    },
    "1141": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1143": {
      "op": "DUP4"
    },
    "1144": {
      "op": "ADD"
    },
    "1145": {
      "op": "SLT"
    },
    "1146": {
      "op": "PUSH2",
      "value": "0x482"
    },
    "1149": {
      "op": "JUMPI"
    },
    "1150": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1152": {
      "op": "DUP1"
    },
    "1153": {
      "op": "REVERT"
    },
    "1154": {
      "op": "JUMPDEST"
    },
    "1155": {
      "op": "DUP2"
    },
    "1156": {
      "op": "CALLDATALOAD"
    },
    "1157": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "1166": {
      "op": "DUP1"
    },
    "1167": {
      "op": "DUP3"
    },
    "1168": {
      "op": "GT"
    },
    "1169": {
      "op": "ISZERO"
    },
    "1170": {
      "op": "PUSH2",
      "value": "0x49D"
    },
    "1173": {
      "op": "JUMPI"
    },
    "1174": {
      "op": "PUSH2",
      "value": "0x49D"
    },
    "1177": {
      "op": "PUSH2",
      "value": "0x45B"
    },
    "1180": {
      "jump": "i",
      "op": "JUMP"
    },
    "1181": {
      "op": "JUMPDEST"
    },
    "1182": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1184": {
      "op": "MLOAD"
    },
    "1185": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1187": {
      "op": "DUP4"
    },
    "1188": {
      "op": "ADD"
    },
    "1189": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1191": {
      "op": "NOT"
    },
    "1192": {
      "op": "SWAP1"
    },
    "1193": {
      "op": "DUP2"
    },
    "1194": {
      "op": "AND"
    },
    "1195": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "1197": {
      "op": "ADD"
    },
    "1198": {
      "op": "AND"
    },
    "1199": {
      "op": "DUP2"
    },
    "1200": {
      "op": "ADD"
    },
    "1201": {
      "op": "SWAP1"
    },
    "1202": {
      "op": "DUP3"
    },
    "1203": {
      "op": "DUP3"
    },
    "1204": {
      "op": "GT"
    },
    "1205": {
      "op": "DUP2"
    },
    "1206": {
      "op": "DUP4"
    },
    "1207": {
      "op": "LT"
    },
    "1208": {
      "op": "OR"
    },
    "1209": {
      "op": "ISZERO"
    },
    "1210": {
      "op": "PUSH2",
      "value": "0x4C5"
    },
    "1213": {
      "op": "JUMPI"
    },
    "1214": {
      "op": "PUSH2",
      "value": "0x4C5"
    },
    "1217": {
      "op": "PUSH2",
      "value": "0x45B"
    },
    "1220": {
      "jump": "i",
      "op": "JUMP"
    },
    "1221": {
      "op": "JUMPDEST"
    },
    "1222": {
      "op": "DUP2"
    },
    "1223": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1225": {
      "op": "MSTORE"
    },
    "1226": {
      "op": "DUP4"
    },
    "1227": {
      "op": "DUP2"
    },
    "1228": {
      "op": "MSTORE"
    },
    "1229": {
      "op": "DUP7"
    },
    "1230": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1232": {
      "op": "DUP6"
    },
    "1233": {
      "op": "DUP9"
    },
    "1234": {
      "op": "ADD"
    },
    "1235": {
      "op": "ADD"
    },
    "1236": {
      "op": "GT"
    },
    "1237": {
      "op": "ISZERO"
    },
    "1238": {
      "op": "PUSH2",
      "value": "0x4DE"
    },
    "1241": {
      "op": "JUMPI"
    },
    "1242": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1244": {
      "op": "DUP1"
    },
    "1245": {
      "op": "REVERT"
    },
    "1246": {
      "op": "JUMPDEST"
    },
    "1247": {
      "op": "DUP4"
    },
    "1248": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1250": {
      "op": "DUP8"
    },
    "1251": {
      "op": "ADD"
    },
    "1252": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1254": {
      "op": "DUP4"
    },
    "1255": {
      "op": "ADD"
    },
    "1256": {
      "op": "CALLDATACOPY"
    },
    "1257": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1259": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1261": {
      "op": "DUP6"
    },
    "1262": {
      "op": "DUP4"
    },
    "1263": {
      "op": "ADD"
    },
    "1264": {
      "op": "ADD"
    },
    "1265": {
      "op": "MSTORE"
    },
    "1266": {
      "op": "DUP1"
    },
    "1267": {
      "op": "SWAP5"
    },
    "1268": {
      "op": "POP"
    },
    "1269": {
      "op": "POP"
    },
    "1270": {
      "op": "POP"
    },
    "1271": {
      "op": "POP"
    },
    "1272": {
      "op": "POP"
    },
    "1273": {
      "op": "SWAP3"
    },
    "1274": {
      "op": "SWAP2"
    },
    "1275": {
      "op": "POP"
    },
    "1276": {
      "op": "POP"
    },
    "1277": {
      "jump": "o",
      "op": "JUMP"
    },
    "1278": {
      "op": "JUMPDEST"
    },
    "1279": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1281": {
      "op": "DUP1"
    },
    "1282": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1284": {
      "op": "DUP4"
    },
    "1285": {
      "op": "DUP6"
    },
    "1286": {
      "op": "SUB"
    },
    "1287": {
      "op": "SLT"
    },
    "1288": {
      "op": "ISZERO"
    },
    "1289": {
      "op": "PUSH2",
      "value": "0x511"
    },
    "1292": {
      "op": "JUMPI"
    },
    "1293": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1295": {
      "op": "DUP1"
    },
    "1296": {
      "op": "REVERT"
    },
    "1297": {
      "op": "JUMPDEST"
    },
    "1298": {
      "op": "DUP3"
    },
    "1299": {
      "op": "CALLDATALOAD"
    },
    "1300": {
      "op": "SWAP2"
    },
    "1301": {
      "op": "POP"
    },
    "1302": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1304": {
      "op": "DUP4"
    },
    "1305": {
      "op": "ADD"
    },
    "1306": {
      "op": "CALLDATALOAD"
    },
    "1307": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "1316": {
      "op": "DUP2"
    },
    "1317": {
      "op": "GT"
    },
    "1318": {
      "op": "ISZERO"
    },
    "1319": {
      "op": "PUSH2",
      "value": "0x52F"
    },
    "1322": {
      "op": "JUMPI"
    },
    "1323": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1325": {
      "op": "DUP1"
    },
    "1326": {
      "op": "REVERT"
    },
    "1327": {
      "op": "JUMPDEST"
    },
    "1328": {
      "op": "PUSH2",
      "value": "0x53B"
    },
    "1331": {
      "op": "DUP6"
    },
    "1332": {
      "op": "DUP3"
    },
    "1333": {
      "op": "DUP7"
    },
    "1334": {
      "op": "ADD"
    },
    "1335": {
      "op": "PUSH2",
      "value": "0x471"
    },
    "1338": {
      "jump": "i",
      "op": "JUMP"
    },
    "1339": {
      "op": "JUMPDEST"
    },
    "1340": {
      "op": "SWAP2"
    },
    "1341": {
      "op": "POP"
    },
    "1342": {
      "op": "POP"
    },
    "1343": {
      "op": "SWAP3"
    },
    "1344": {
      "op": "POP"
    },
    "1345": {
      "op": "SWAP3"
    },
    "1346": {
      "op": "SWAP1"
    },
    "1347": {
      "op": "POP"
    },
    "1348": {
      "jump": "o",
      "op": "JUMP"
    },
    "1349": {
      "op": "JUMPDEST"
    },
    "1350": {
      "op": "DUP1"
    },
    "1351": {
      "op": "CALLDATALOAD"
    },
    "1352": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1354": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1356": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1358": {
      "op": "SHL"
    },
    "1359": {
      "op": "SUB"
    },
    "1360": {
      "op": "DUP2"
    },
    "1361": {
      "op": "AND"
    },
    "1362": {
      "op": "DUP2"
    },
    "1363": {
      "op": "EQ"
    },
    "1364": {
      "op": "PUSH2",
      "value": "0x55C"
    },
    "1367": {
      "op": "JUMPI"
    },
    "1368": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1370": {
      "op": "DUP1"
    },
    "1371": {
      "op": "REVERT"
    },
    "1372": {
      "op": "JUMPDEST"
    },
    "1373": {
      "op": "SWAP2"
    },
    "1374": {
      "op": "SWAP1"
    },
    "1375": {
      "op": "POP"
    },
    "1376": {
      "jump": "o",
      "op": "JUMP"
    },
    "1377": {
      "op": "JUMPDEST"
    },
    "1378": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1380": {
      "op": "DUP1"
    },
    "1381": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1383": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1385": {
      "op": "DUP5"
    },
    "1386": {
      "op": "DUP7"
    },
    "1387": {
      "op": "SUB"
    },
    "1388": {
      "op": "SLT"
    },
    "1389": {
      "op": "ISZERO"
    },
    "1390": {
      "op": "PUSH2",
      "value": "0x576"
    },
    "1393": {
      "op": "JUMPI"
    },
    "1394": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1396": {
      "op": "DUP1"
    },
    "1397": {
      "op": "REVERT"
    },
    "1398": {
      "op": "JUMPDEST"
    },
    "1399": {
      "op": "PUSH2",
      "value": "0x57F"
    },
    "1402": {
      "op": "DUP5"
    },
    "1403": {
      "op": "PUSH2",
      "value": "0x545"
    },
    "1406": {
      "jump": "i",
      "op": "JUMP"
    },
    "1407": {
      "op": "JUMPDEST"
    },
    "1408": {
      "op": "SWAP3"
    },
    "1409": {
      "op": "POP"
    },
    "1410": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1412": {
      "op": "DUP5"
    },
    "1413": {
      "op": "ADD"
    },
    "1414": {
      "op": "CALLDATALOAD"
    },
    "1415": {
      "op": "SWAP2"
    },
    "1416": {
      "op": "POP"
    },
    "1417": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1419": {
      "op": "DUP5"
    },
    "1420": {
      "op": "ADD"
    },
    "1421": {
      "op": "CALLDATALOAD"
    },
    "1422": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "1431": {
      "op": "DUP2"
    },
    "1432": {
      "op": "GT"
    },
    "1433": {
      "op": "ISZERO"
    },
    "1434": {
      "op": "PUSH2",
      "value": "0x5A2"
    },
    "1437": {
      "op": "JUMPI"
    },
    "1438": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1440": {
      "op": "DUP1"
    },
    "1441": {
      "op": "REVERT"
    },
    "1442": {
      "op": "JUMPDEST"
    },
    "1443": {
      "op": "PUSH2",
      "value": "0x5AE"
    },
    "1446": {
      "op": "DUP7"
    },
    "1447": {
      "op": "DUP3"
    },
    "1448": {
      "op": "DUP8"
    },
    "1449": {
      "op": "ADD"
    },
    "1450": {
      "op": "PUSH2",
      "value": "0x471"
    },
    "1453": {
      "jump": "i",
      "op": "JUMP"
    },
    "1454": {
      "op": "JUMPDEST"
    },
    "1455": {
      "op": "SWAP2"
    },
    "1456": {
      "op": "POP"
    },
    "1457": {
      "op": "POP"
    },
    "1458": {
      "op": "SWAP3"
    },
    "1459": {
      "op": "POP"
    },
    "1460": {
      "op": "SWAP3"
    },
    "1461": {
      "op": "POP"
    },
    "1462": {
      "op": "SWAP3"
    },
    "1463": {
      "jump": "o",
      "op": "JUMP"
    },
    "1464": {
      "op": "JUMPDEST"
    },
    "1465": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1467": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1469": {
      "op": "DUP3"
    },
    "1470": {
      "op": "DUP5"
    },
    "1471": {
      "op": "SUB"
    },
    "1472": {
      "op": "SLT"
    },
    "1473": {
      "op": "ISZERO"
    },
    "1474": {
      "op": "PUSH2",
      "value": "0x5CA"
    },
    "1477": {
      "op": "JUMPI"
    },
    "1478": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1480": {
      "op": "DUP1"
    },
    "1481": {
      "op": "REVERT"
    },
    "1482": {
      "op": "JUMPDEST"
    },
    "1483": {
      "op": "PUSH2",
      "value": "0x115"
    },
    "1486": {
      "op": "DUP3"
    },
    "1487": {
      "op": "PUSH2",
      "value": "0x545"
    },
    "1490": {
      "jump": "i",
      "op": "JUMP"
    }
  },
  "sha1": "3eb5ab184771592c6e91167fb2d225377076e3e1",
  "source": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\nimport \"./Ownable.sol\";\nimport \"../interfaces/IAllowlist.sol\";\n\n/**\n* @title Allowlist Contract.\n* @author Daccred.\n* @dev  The allowlist contract serves as a general inheritable\n*       contract that any contract with the need of working with\n*       signatures and signature verifications can inherit and \n*       work with with ease.\n*       Allowlists allow you to ensure that a particular address\n*       has been signed by a particular contract, and is therefore\n*       eligible to receive or be minted a particular token or \n*       partcular sets of tokens.\n*       It will be necessary to state that this contract will be\n*       directly owned by the Daccred.sol [link here], but on\n*       deploy, the address of the wallet deploying the contract\n*       will be stored as the `allowlistOwner`, this address\n*       cannot be changed, and this address will be evaluated for\n*       incoming signature confirmations.\n*       The address must be the signer of the signature.\n*       Changing this address means changing every signature \n*       signed. This is not good.\n*\n*       For clarity:\n*       Contract deployer: Daccred.sol.\n*/\ncontract Allowlist is IAllowlist, Ownable {\n    /// @dev    The wallet that initiated the transaction to deploy\n    ///         this allowlist contract\n    ///         [And other subsequent ones inheriting this], \n    ///         passed as msg.sender from the Daccred.sol.\n    address private allowlistOwner;\n\n    /// @dev constructor, setting the allowlistOwner.\n    constructor(address _allowlistOwner) {\n        /// @dev Set the variable name.\n        allowlistOwner = _allowlistOwner;\n    }\n\n    /// @dev    Emitted when a signature is verified by the\n    ///         allowlistOwner.\n    event VerifySignature(bytes32 indexed addressHash, bool indexed result);\n\n    /**\n    * @dev Return the allowlistOwner.\n    *\n    * @notice Callable by anyone.\n    *\n    * @return address of allowlistOwner.\n    */\n    function getAllowlistOwner() public view returns(address) {\n        return allowlistOwner;\n    }\n\n    /**\n    * @dev  Returns true if the signer of signature `sig` is the `allowlistOwner`.\n    *       And false if otherwise.\n    *\n    * @notice Callable by anyone.\n    *\n    * @return bool true or false.\n    */\n    function verifySignature(bytes32 hash, bytes memory sig)\n    public \n    returns (bool)\n    {\n        return _verifySignature(hash, sig);\n    }\n\n    /**\n    * @dev  Evaluate and return that a particular address message\n    *       was signed by the allowlistOwner.\n    *       In the SoulboundCore.sol, this function will be used\n    *       in the {issueWithSignature} function, to verify that\n    *       the hash of the address was indeed signed by the\n    *       allowlistOwner.\n    *       This functin will be called from the Daccred.sol or\n    *       DaccredDeployer.sol where the address of the \n    *       allowlistOwner will be passed to the function, as \n    *       msg.sender. Meaning that only the owner of the \n    *       allowlist deployed from the Daccred.sol can call \n    *       the function.\n    *       Or using the getAllowlistOwner() for validations.\n    *\n    * @notice Callable by this or inheriting contract.\n    *\n    * @param hash   Hash of the address.\n    * @param sig    Signature of the transaction, made offchain.\n    *\n    * @return bool true or false.\n    */\n    function _verifySignature(bytes32 hash, bytes memory sig)\n    internal\n    onlyOwner\n    returns(bool)\n    {\n        /// @dev    Require that the caller is the owner [deployer]\n        ///         of the contract, [the Daccred.sol].\n        require(\n            _msgSender() == owner(), \n            \"ERC721:: Call to contract made by non-owner\"\n        );\n        /// @dev Require the length of the signature is 65.\n        require(sig.length == 65, \"Err:: Invalid signature length\");\n        /// @dev Use assembly to get the 3 sections of a signature.\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(sig);\n        /// @dev    Using ecrecover to get the signer.\n        address signer = ecrecover(hash, v, r, s);\n        /// @dev Verify that the signer is the allowlistOwner.\n        bool signerIsAllowlistOwner = (signer == allowlistOwner);\n        /// @dev Emit the {VerifySignature} event.\n        emit VerifySignature(hash, signerIsAllowlistOwner);\n        /// @dev Return the result.\n        return signerIsAllowlistOwner;\n    }\n\n    /**\n    * @dev Returns true if the signer of `_signature` is `_signer`.\n    *\n    * @notice Callable by anyone.\n    *\n    * @return bool true or false.\n    */\n    function verifySigner(\n        address _signer, \n        bytes32 _hash, \n        bytes memory _signature\n    ) public pure returns(bool) {\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\n        return(_signer == ecrecover(_hash, v, r, s));\n    }\n\n    /**\n    * @dev  This function makes use of assembly to split the signature\n    *       into 3 parts.\n    *\n    * @param sig The signature to split with Assembly.\n    *\n    * @return r\n    * @return s\n    * @return v\n    */\n    function splitSignature(bytes memory sig) private pure returns(\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    )\n    {\n        assembly {\n            /**\n            * @dev  Copied from https://solidity-by-example.org/signature.\n            *       First 32 bytes stores the length of the signature\n            *       add(sig, 32) = pointer of sig + 32\n            *       effectively, skips first 32 bytes of signature\n            *       mload(p) loads next 32 bytes starting at the memory \n            *       address p into memory.\n            */\n\n            /// @dev First 32 bytes, after the length prefix.\n            r := mload(add(sig, 32))\n            /// @dev Second 32 bytes.\n            s := mload(add(sig, 64))\n            /// @dev Final byte (first byte of the next 32 bytes).\n            v := byte(0, mload(add(sig, 96)))\n        }\n\n    }\n}\n",
  "sourceMap": "1208:4811:0:-:0;;;1576:126;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1245:32:2;3057:10;1245:18;:32::i;:::-;1663:14:0;:32;;-1:-1:-1;;;;;;1663:32:0;-1:-1:-1;;;;;1663:32:0;;;;;;;;;;1208:4811;;2757:187:2;2830:16;2849:6;;-1:-1:-1;;;;;2865:17:2;;;-1:-1:-1;;;;;;2865:17:2;;;;;;2897:40;;2849:6;;;;;;;2897:40;;2830:16;2897:40;2820:124;2757:187;:::o;14:290:10:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:10;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:10:o;:::-;1208:4811:0;;;;;;",
  "sourcePath": "contracts/Allowlist.sol",
  "type": "contract"
}