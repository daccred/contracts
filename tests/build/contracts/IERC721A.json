{
  "abi": [
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "1": "C:/Users/antho/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.6.0/contracts/token/ERC721/IERC721.sol",
    "22": "contracts/contracts/packages/nft/contracts/interfaces/IERC721A.sol",
    "3": "C:/Users/antho/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.6.0/contracts/token/ERC721/extensions/IERC721Metadata.sol",
    "8": "C:/Users/antho/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.6.0/contracts/utils/introspection/IERC165.sol"
  },
  "ast": {
    "absolutePath": "contracts/contracts/packages/nft/contracts/interfaces/IERC721A.sol",
    "exportedSymbols": {
      "IERC165": [
        6792
      ],
      "IERC721": [
        6753
      ],
      "IERC721A": [
        3390
      ],
      "IERC721Metadata": [
        6780
      ]
    },
    "id": 3391,
    "license": "GPL-3.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3321,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".4"
        ],
        "nodeType": "PragmaDirective",
        "src": "429:23:22"
      },
      {
        "absolutePath": "C:/Users/antho/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.6.0/contracts/token/ERC721/IERC721.sol",
        "file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
        "id": 3322,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 3391,
        "sourceUnit": 6754,
        "src": "585:58:22",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "C:/Users/antho/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.6.0/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "id": 3323,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 3391,
        "sourceUnit": 6781,
        "src": "644:77:22",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 3325,
              "name": "IERC721",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 6753,
              "src": "805:7:22"
            },
            "id": 3326,
            "nodeType": "InheritanceSpecifier",
            "src": "805:7:22"
          },
          {
            "baseName": {
              "id": 3327,
              "name": "IERC721Metadata",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 6780,
              "src": "814:15:22"
            },
            "id": 3328,
            "nodeType": "InheritanceSpecifier",
            "src": "814:15:22"
          }
        ],
        "canonicalName": "IERC721A",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 3324,
          "nodeType": "StructuredDocumentation",
          "src": "723:59:22",
          "text": " @dev Interface of an ERC721A compliant contract."
        },
        "fullyImplemented": false,
        "id": 3390,
        "linearizedBaseContracts": [
          3390,
          6780,
          6753,
          6792
        ],
        "name": "IERC721A",
        "nameLocation": "793:8:22",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 3329,
              "nodeType": "StructuredDocumentation",
              "src": "836:76:22",
              "text": " The caller must own the token or be an approved operator."
            },
            "errorSelector": "cfb3b942",
            "id": 3331,
            "name": "ApprovalCallerNotOwnerNorApproved",
            "nameLocation": "923:33:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3330,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "956:2:22"
            },
            "src": "917:42:22"
          },
          {
            "documentation": {
              "id": 3332,
              "nodeType": "StructuredDocumentation",
              "src": "965:44:22",
              "text": " The token does not exist."
            },
            "errorSelector": "cf4700e4",
            "id": 3334,
            "name": "ApprovalQueryForNonexistentToken",
            "nameLocation": "1020:32:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3333,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1052:2:22"
            },
            "src": "1014:41:22"
          },
          {
            "documentation": {
              "id": 3335,
              "nodeType": "StructuredDocumentation",
              "src": "1061:66:22",
              "text": " The caller cannot approve to their own address."
            },
            "errorSelector": "b06307db",
            "id": 3337,
            "name": "ApproveToCaller",
            "nameLocation": "1138:15:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3336,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1153:2:22"
            },
            "src": "1132:24:22"
          },
          {
            "documentation": {
              "id": 3338,
              "nodeType": "StructuredDocumentation",
              "src": "1162:66:22",
              "text": " The caller cannot approve to the current owner."
            },
            "errorSelector": "943f7b8c",
            "id": 3340,
            "name": "ApprovalToCurrentOwner",
            "nameLocation": "1239:22:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3339,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1261:2:22"
            },
            "src": "1233:31:22"
          },
          {
            "documentation": {
              "id": 3341,
              "nodeType": "StructuredDocumentation",
              "src": "1270:65:22",
              "text": " Cannot query the balance for the zero address."
            },
            "errorSelector": "8f4eb604",
            "id": 3343,
            "name": "BalanceQueryForZeroAddress",
            "nameLocation": "1346:26:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3342,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1372:2:22"
            },
            "src": "1340:35:22"
          },
          {
            "documentation": {
              "id": 3344,
              "nodeType": "StructuredDocumentation",
              "src": "1381:51:22",
              "text": " Cannot mint to the zero address."
            },
            "errorSelector": "2e076300",
            "id": 3346,
            "name": "MintToZeroAddress",
            "nameLocation": "1443:17:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3345,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1460:2:22"
            },
            "src": "1437:26:22"
          },
          {
            "documentation": {
              "id": 3347,
              "nodeType": "StructuredDocumentation",
              "src": "1469:72:22",
              "text": " The quantity of tokens minted must be more than zero."
            },
            "errorSelector": "b562e8dd",
            "id": 3349,
            "name": "MintZeroQuantity",
            "nameLocation": "1552:16:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3348,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1568:2:22"
            },
            "src": "1546:25:22"
          },
          {
            "documentation": {
              "id": 3350,
              "nodeType": "StructuredDocumentation",
              "src": "1577:44:22",
              "text": " The token does not exist."
            },
            "errorSelector": "df2d9b42",
            "id": 3352,
            "name": "OwnerQueryForNonexistentToken",
            "nameLocation": "1632:29:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3351,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1661:2:22"
            },
            "src": "1626:38:22"
          },
          {
            "documentation": {
              "id": 3353,
              "nodeType": "StructuredDocumentation",
              "src": "1670:76:22",
              "text": " The caller must own the token or be an approved operator."
            },
            "errorSelector": "59c896be",
            "id": 3355,
            "name": "TransferCallerNotOwnerNorApproved",
            "nameLocation": "1757:33:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3354,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1790:2:22"
            },
            "src": "1751:42:22"
          },
          {
            "documentation": {
              "id": 3356,
              "nodeType": "StructuredDocumentation",
              "src": "1799:53:22",
              "text": " The token must be owned by `from`."
            },
            "errorSelector": "a1148100",
            "id": 3358,
            "name": "TransferFromIncorrectOwner",
            "nameLocation": "1863:26:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3357,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1889:2:22"
            },
            "src": "1857:35:22"
          },
          {
            "documentation": {
              "id": 3359,
              "nodeType": "StructuredDocumentation",
              "src": "1898:109:22",
              "text": " Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
            },
            "errorSelector": "d1a57ed6",
            "id": 3361,
            "name": "TransferToNonERC721ReceiverImplementer",
            "nameLocation": "2018:38:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3360,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2056:2:22"
            },
            "src": "2012:47:22"
          },
          {
            "documentation": {
              "id": 3362,
              "nodeType": "StructuredDocumentation",
              "src": "2065:55:22",
              "text": " Cannot transfer to the zero address."
            },
            "errorSelector": "ea553b34",
            "id": 3364,
            "name": "TransferToZeroAddress",
            "nameLocation": "2131:21:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3363,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2152:2:22"
            },
            "src": "2125:30:22"
          },
          {
            "documentation": {
              "id": 3365,
              "nodeType": "StructuredDocumentation",
              "src": "2161:44:22",
              "text": " The token does not exist."
            },
            "errorSelector": "a14c4b50",
            "id": 3367,
            "name": "URIQueryForNonexistentToken",
            "nameLocation": "2216:27:22",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 3366,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2243:2:22"
            },
            "src": "2210:36:22"
          },
          {
            "canonicalName": "IERC721A.TokenOwnership",
            "id": 3374,
            "members": [
              {
                "constant": false,
                "id": 3369,
                "mutability": "mutable",
                "name": "addr",
                "nameLocation": "2387:4:22",
                "nodeType": "VariableDeclaration",
                "scope": 3374,
                "src": "2379:12:22",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 3368,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "2379:7:22",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 3371,
                "mutability": "mutable",
                "name": "startTimestamp",
                "nameLocation": "2500:14:22",
                "nodeType": "VariableDeclaration",
                "scope": 3374,
                "src": "2493:21:22",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                },
                "typeName": {
                  "id": 3370,
                  "name": "uint64",
                  "nodeType": "ElementaryTypeName",
                  "src": "2493:6:22",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 3373,
                "mutability": "mutable",
                "name": "burned",
                "nameLocation": "2575:6:22",
                "nodeType": "VariableDeclaration",
                "scope": 3374,
                "src": "2570:11:22",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 3372,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "2570:4:22",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "TokenOwnership",
            "nameLocation": "2317:14:22",
            "nodeType": "StructDefinition",
            "scope": 3390,
            "src": "2310:278:22",
            "visibility": "public"
          },
          {
            "canonicalName": "IERC721A.AddressData",
            "id": 3383,
            "members": [
              {
                "constant": false,
                "id": 3376,
                "mutability": "mutable",
                "name": "balance",
                "nameLocation": "2743:7:22",
                "nodeType": "VariableDeclaration",
                "scope": 3383,
                "src": "2736:14:22",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                },
                "typeName": {
                  "id": 3375,
                  "name": "uint64",
                  "nodeType": "ElementaryTypeName",
                  "src": "2736:6:22",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 3378,
                "mutability": "mutable",
                "name": "numberMinted",
                "nameLocation": "2842:12:22",
                "nodeType": "VariableDeclaration",
                "scope": 3383,
                "src": "2835:19:22",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                },
                "typeName": {
                  "id": 3377,
                  "name": "uint64",
                  "nodeType": "ElementaryTypeName",
                  "src": "2835:6:22",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 3380,
                "mutability": "mutable",
                "name": "numberBurned",
                "nameLocation": "2946:12:22",
                "nodeType": "VariableDeclaration",
                "scope": 3383,
                "src": "2939:19:22",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                },
                "typeName": {
                  "id": 3379,
                  "name": "uint64",
                  "nodeType": "ElementaryTypeName",
                  "src": "2939:6:22",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 3382,
                "mutability": "mutable",
                "name": "aux",
                "nameLocation": "3173:3:22",
                "nodeType": "VariableDeclaration",
                "scope": 3383,
                "src": "3166:10:22",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                },
                "typeName": {
                  "id": 3381,
                  "name": "uint64",
                  "nodeType": "ElementaryTypeName",
                  "src": "3166:6:22",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "AddressData",
            "nameLocation": "2659:11:22",
            "nodeType": "StructDefinition",
            "scope": 3390,
            "src": "2652:531:22",
            "visibility": "public"
          },
          {
            "documentation": {
              "id": 3384,
              "nodeType": "StructuredDocumentation",
              "src": "3189:193:22",
              "text": " @dev Returns the total amount of tokens stored by the contract.\n Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens."
            },
            "functionSelector": "18160ddd",
            "id": 3389,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "totalSupply",
            "nameLocation": "3396:11:22",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3385,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3407:2:22"
            },
            "returnParameters": {
              "id": 3388,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3387,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3389,
                  "src": "3433:7:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3386,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3433:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3432:9:22"
            },
            "scope": 3390,
            "src": "3387:55:22",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 3391,
        "src": "783:2661:22",
        "usedErrors": [
          3331,
          3334,
          3337,
          3340,
          3343,
          3346,
          3349,
          3352,
          3355,
          3358,
          3361,
          3364,
          3367
        ]
      }
    ],
    "src": "429:3016:22"
  },
  "bytecode": "",
  "bytecodeSha1": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.15+commit.e14f2714"
  },
  "contractName": "IERC721A",
  "coverageMap": {
    "branches": {},
    "statements": {}
  },
  "dependencies": [
    "OpenZeppelin/openzeppelin-contracts@4.6.0/IERC165",
    "OpenZeppelin/openzeppelin-contracts@4.6.0/IERC721",
    "OpenZeppelin/openzeppelin-contracts@4.6.0/IERC721Metadata"
  ],
  "deployedBytecode": "",
  "deployedSourceMap": "",
  "language": "Solidity",
  "natspec": {
    "details": "Interface of an ERC721A compliant contract.",
    "errors": {
      "ApprovalCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "ApprovalQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "ApprovalToCurrentOwner()": [
        {
          "notice": "The caller cannot approve to the current owner."
        }
      ],
      "ApproveToCaller()": [
        {
          "notice": "The caller cannot approve to their own address."
        }
      ],
      "BalanceQueryForZeroAddress()": [
        {
          "notice": "Cannot query the balance for the zero address."
        }
      ],
      "MintToZeroAddress()": [
        {
          "notice": "Cannot mint to the zero address."
        }
      ],
      "MintZeroQuantity()": [
        {
          "notice": "The quantity of tokens minted must be more than zero."
        }
      ],
      "OwnerQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "TransferCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "TransferFromIncorrectOwner()": [
        {
          "notice": "The token must be owned by `from`."
        }
      ],
      "TransferToNonERC721ReceiverImplementer()": [
        {
          "notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
        }
      ],
      "TransferToZeroAddress()": [
        {
          "notice": "Cannot transfer to the zero address."
        }
      ],
      "URIQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in ``owner``'s account."
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokenURI(uint256)": {
        "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
      },
      "totalSupply()": {
        "details": "Returns the total amount of tokens stored by the contract. Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      }
    },
    "version": 1
  },
  "offset": [
    783,
    3444
  ],
  "opcodes": "",
  "pcMap": {},
  "sha1": "5808c45f9cb748174c5a9c4859ed5409336e1d28",
  "source": "// SPDX-License-Identifier: GPL-3.0\n\n// \t _____     ______     ______     ______     ______     ______     _____\n//  /\\  __-.  /\\  __ \\   /\\  ___\\   /\\  ___\\   /\\  == \\   /\\  ___\\   /\\  __-.\n//  \\ \\ \\/\\ \\ \\ \\  __ \\  \\ \\ \\____  \\ \\ \\____  \\ \\  __<   \\ \\  __\\   \\ \\ \\/\\ \\\n//   \\ \\____-  \\ \\_\\ \\_\\  \\ \\_____\\  \\ \\_____\\  \\ \\_\\ \\_\\  \\ \\_____\\  \\ \\____-\n//    \\/____/   \\/_/\\/_/   \\/_____/   \\/_____/   \\/_/ /_/   \\/_____/   \\/____/\n\npragma solidity ^0.8.4;\n\n/**\n * @title IERC721 Extension.\n * @author Daccred.\n * @dev IERC721 Extensions giving us access to ERC721 core capabilities.\n */\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\n\n/**\n * @dev Interface of an ERC721A compliant contract.\n */\ninterface IERC721A is IERC721, IERC721Metadata {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * The caller cannot approve to their own address.\n     */\n    error ApproveToCaller();\n\n    /**\n     * The caller cannot approve to the current owner.\n     */\n    error ApprovalToCurrentOwner();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    // Compiler will pack this into a single 256bit word.\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n    }\n\n    // Compiler will pack this into a single 256bit word.\n    struct AddressData {\n        // Realistically, 2**64-1 is more than enough.\n        uint64 balance;\n        // Keeps track of mint count with minimal overhead for tokenomics.\n        uint64 numberMinted;\n        // Keeps track of burn count with minimal overhead for tokenomics.\n        uint64 numberBurned;\n        // For miscellaneous variable(s) pertaining to the address\n        // (e.g. number of whitelist mint slots used).\n        // If there are multiple variables, please pack them into a uint64.\n        uint64 aux;\n    }\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     *\n     * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\n     */\n    function totalSupply() external view returns (uint256);\n}\n",
  "sourceMap": "",
  "sourcePath": "contracts/contracts/packages/nft/contracts/interfaces/IERC721A.sol",
  "type": "interface"
}