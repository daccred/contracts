{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Attest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Revoke",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_getBaseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "_baseURI",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "isMinted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "issuerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "37": "contracts/contracts/packages/soulbound/contracts/Soulbound.sol",
    "41": "contracts/contracts/packages/soulbound/contracts/eips/ERC-4973.sol"
  },
  "ast": {
    "absolutePath": "contracts/contracts/packages/soulbound/contracts/Soulbound.sol",
    "exportedSymbols": {
      "ERC165": [
        5549
      ],
      "ERC4973": [
        5876
      ],
      "IERC165": [
        5528
      ],
      "IERC4973": [
        5605
      ],
      "IERC721Metadata": [
        5567
      ],
      "ISoulbond": [
        5970
      ],
      "Soulbound": [
        4383
      ]
    },
    "id": 4384,
    "license": "GPL-3.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 4118,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".8"
        ],
        "nodeType": "PragmaDirective",
        "src": "36:23:37"
      },
      {
        "absolutePath": "contracts/contracts/packages/soulbound/interfaces/ISoulbound.sol",
        "file": "../interfaces/ISoulbound.sol",
        "id": 4119,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4384,
        "sourceUnit": 5971,
        "src": "61:38:37",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/contracts/packages/soulbound/contracts/eips/ERC-4973.sol",
        "file": "./eips/ERC-4973.sol",
        "id": 4120,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4384,
        "sourceUnit": 5877,
        "src": "100:29:37",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 4122,
              "name": "ERC4973",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 5876,
              "src": "824:7:37"
            },
            "id": 4123,
            "nodeType": "InheritanceSpecifier",
            "src": "824:7:37"
          }
        ],
        "canonicalName": "Soulbound",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 4121,
          "nodeType": "StructuredDocumentation",
          "src": "131:670:37",
          "text": " @title Soulbound Token Contract.\n @author Daccred.\n @dev  Soulbound Token Base Template.\n       This contract was inspired by\n       https://github.com/ethereum/EIPs/blob/master/assets/eip-4973/ERC-4973.sol\n       This contract is inherited by any contract to implement the Soulbound\n       template.\n       Soulbound tokens  cannot be transferred when minted to a particular address.\n       This is the base instance of the contract,\n       it includes minting functions and revoke functions.\n       Inheriting functions can wrap around the specified functions.\n       Also, this base contract instance does not include a capped supply."
        },
        "fullyImplemented": true,
        "id": 4383,
        "linearizedBaseContracts": [
          4383,
          5876,
          5605,
          5567,
          5549,
          5528
        ],
        "name": "Soulbound",
        "nameLocation": "811:9:37",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "documentation": {
              "id": 4124,
              "nodeType": "StructuredDocumentation",
              "src": "838:277:37",
              "text": " @dev  Stores the base URI on cases when the user wants to mint a token,\n       it automatically generates a string casted tokenURI using the\n       generateTokenURI function. This variable can only be modified by\n       the allowlist owner."
            },
            "id": 4126,
            "mutability": "mutable",
            "name": "baseURI",
            "nameLocation": "1135:7:37",
            "nodeType": "VariableDeclaration",
            "scope": 4383,
            "src": "1120:22:37",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 4125,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1120:6:37",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "documentation": {
              "id": 4127,
              "nodeType": "StructuredDocumentation",
              "src": "1149:79:37",
              "text": "@dev Mapping of speific addresses to tokenIds and boolean for mint records."
            },
            "id": 4133,
            "mutability": "mutable",
            "name": "mints",
            "nameLocation": "1286:5:37",
            "nodeType": "VariableDeclaration",
            "scope": 4383,
            "src": "1233:58:37",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
              "typeString": "mapping(address => mapping(uint256 => bool))"
            },
            "typeName": {
              "id": 4132,
              "keyType": {
                "id": 4128,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1241:7:37",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1233:44:37",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
                "typeString": "mapping(address => mapping(uint256 => bool))"
              },
              "valueType": {
                "id": 4131,
                "keyType": {
                  "id": 4129,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1260:7:37",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "nodeType": "Mapping",
                "src": "1252:24:37",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                  "typeString": "mapping(uint256 => bool)"
                },
                "valueType": {
                  "id": 4130,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "1271:4:37",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                }
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 4145,
              "nodeType": "Block",
              "src": "1461:2:37",
              "statements": []
            },
            "documentation": {
              "id": 4134,
              "nodeType": "StructuredDocumentation",
              "src": "1298:70:37",
              "text": "@dev Allows the deployer to set a name and a symbol for the token."
            },
            "id": 4146,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 4141,
                    "name": "name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4136,
                    "src": "1443:4:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "id": 4142,
                    "name": "symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4138,
                    "src": "1449:6:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 4143,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 4140,
                  "name": "ERC4973",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 5876,
                  "src": "1435:7:37"
                },
                "nodeType": "ModifierInvocation",
                "src": "1435:21:37"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4139,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4136,
                  "mutability": "mutable",
                  "name": "name",
                  "nameLocation": "1399:4:37",
                  "nodeType": "VariableDeclaration",
                  "scope": 4146,
                  "src": "1385:18:37",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4135,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1385:6:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4138,
                  "mutability": "mutable",
                  "name": "symbol",
                  "nameLocation": "1419:6:37",
                  "nodeType": "VariableDeclaration",
                  "scope": 4146,
                  "src": "1405:20:37",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4137,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1405:6:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1384:42:37"
            },
            "returnParameters": {
              "id": 4144,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1461:0:37"
            },
            "scope": 4383,
            "src": "1373:90:37",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 4166,
              "nodeType": "Block",
              "src": "2320:181:37",
              "statements": [
                {
                  "documentation": "@dev Mint Soulbound token to `_to` using ERC4973 _mint().",
                  "expression": {
                    "arguments": [
                      {
                        "id": 4159,
                        "name": "_to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4149,
                        "src": "2419:3:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4160,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4151,
                        "src": "2424:8:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 4161,
                        "name": "tokenURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4153,
                        "src": "2434:8:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 4158,
                      "name": "mintSoulboundToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4305,
                      "src": "2400:18:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (address,uint256,string memory)"
                      }
                    },
                    "id": 4162,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2400:43:37",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4163,
                  "nodeType": "ExpressionStatement",
                  "src": "2400:43:37"
                },
                {
                  "documentation": "@dev Return true.",
                  "expression": {
                    "hexValue": "74727565",
                    "id": 4164,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2490:4:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 4157,
                  "id": 4165,
                  "nodeType": "Return",
                  "src": "2483:11:37"
                }
              ]
            },
            "documentation": {
              "id": 4147,
              "nodeType": "StructuredDocumentation",
              "src": "1469:722:37",
              "text": " @dev  Mints a new token `_tokenId` to `_to`, giving to ownership of token `_tokenId`.\n       This function will be used hand in hand with ERC721's _mint() function.\n       Emits the {Attest} event.\n       `_to` cannot transfer the token.\n       `_to` must not be a 0 address.\n       `_tokenId` must be an existent token.\n       This does not evaluate total supply of tokens before minting.\n @notice Callable by anyone.\n @param _to        Address to which token `_tokenId` is minted.\n @param _tokenId   Token to mint.\n @param tokenURI   Auto generated or user passed URI for minted token.\n @return bool true or false."
            },
            "id": 4167,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "issue",
            "nameLocation": "2205:5:37",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4154,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4149,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "2228:3:37",
                  "nodeType": "VariableDeclaration",
                  "scope": 4167,
                  "src": "2220:11:37",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4148,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2220:7:37",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4151,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "2249:8:37",
                  "nodeType": "VariableDeclaration",
                  "scope": 4167,
                  "src": "2241:16:37",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4150,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2241:7:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4153,
                  "mutability": "mutable",
                  "name": "tokenURI",
                  "nameLocation": "2281:8:37",
                  "nodeType": "VariableDeclaration",
                  "scope": 4167,
                  "src": "2267:22:37",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4152,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2267:6:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2210:85:37"
            },
            "returnParameters": {
              "id": 4157,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4156,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4167,
                  "src": "2314:4:37",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4155,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2314:4:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2313:6:37"
            },
            "scope": 4383,
            "src": "2196:305:37",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 4199,
              "nodeType": "Block",
              "src": "3411:355:37",
              "statements": [
                {
                  "documentation": "@dev Require token exists.",
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 4179,
                            "name": "_tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4172,
                            "src": "3476:8:37",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 4178,
                          "name": "_exists",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5797,
                          "src": "3468:7:37",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (uint256) view returns (bool)"
                          }
                        },
                        "id": 4180,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3468:17:37",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f6e2d6578697374656e7420746f6b656e2e",
                        "id": 4181,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3487:21:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_8c0d8f43323770a1dd202a4a690419e3948b07e562a1c5b5bee2020c96039cb2",
                          "typeString": "literal_string \"Non-existent token.\""
                        },
                        "value": "Non-existent token."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_8c0d8f43323770a1dd202a4a690419e3948b07e562a1c5b5bee2020c96039cb2",
                          "typeString": "literal_string \"Non-existent token.\""
                        }
                      ],
                      "id": 4177,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3460:7:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4182,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3460:49:37",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4183,
                  "nodeType": "ExpressionStatement",
                  "src": "3460:49:37"
                },
                {
                  "documentation": "@dev Require _tokenId is owned by _from.",
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 4189,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "id": 4186,
                              "name": "_tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4172,
                              "src": "3588:8:37",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 4185,
                            "name": "ownerOf",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5780,
                            "src": "3580:7:37",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                              "typeString": "function (uint256) view returns (address)"
                            }
                          },
                          "id": 4187,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3580:17:37",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 4188,
                          "name": "_from",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4170,
                          "src": "3601:5:37",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "3580:26:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "546f6b656e206e6f74206f776e65642062792061646472657373",
                        "id": 4190,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3608:28:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3530adbde4ceb2e09524c86c72dc5c102ccf0ab5b3d278483f4421b30348154a",
                          "typeString": "literal_string \"Token not owned by address\""
                        },
                        "value": "Token not owned by address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3530adbde4ceb2e09524c86c72dc5c102ccf0ab5b3d278483f4421b30348154a",
                          "typeString": "literal_string \"Token not owned by address\""
                        }
                      ],
                      "id": 4184,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3572:7:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4191,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3572:65:37",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4192,
                  "nodeType": "ExpressionStatement",
                  "src": "3572:65:37"
                },
                {
                  "documentation": "@dev Burn the token.",
                  "expression": {
                    "arguments": [
                      {
                        "id": 4194,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4172,
                        "src": "3699:8:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4193,
                      "name": "burnSoulboundToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4338,
                      "src": "3680:18:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 4195,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3680:28:37",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4196,
                  "nodeType": "ExpressionStatement",
                  "src": "3680:28:37"
                },
                {
                  "documentation": "@dev Return true.",
                  "expression": {
                    "hexValue": "74727565",
                    "id": 4197,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3755:4:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 4176,
                  "id": 4198,
                  "nodeType": "Return",
                  "src": "3748:11:37"
                }
              ]
            },
            "documentation": {
              "id": 4168,
              "nodeType": "StructuredDocumentation",
              "src": "2507:826:37",
              "text": " @dev  Withdraws ownership of token `_tokenId` from `_From`.\n       This will be done when the ERC721's _burn() function is called.\n       Emits the {Revoke} event.\n       `_from` must own the token.\n       `_from` must not be a 0 address.\n       `_tokenId` must be an existent token.\n       The function can only be called by the issuer of the token.\n       This modifier onlyIssuer will be implemented in the contract.\n       [Modifiers cannot be made in interfaces].\n       This does not evaluate total supply of tokens before minting.\n @notice Callable by this or inheriting contract.\n @param _from      Address which owns token `_tokenId`.\n @param _tokenId   Token to revoke.\n @return bool true or false."
            },
            "id": 4200,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "revoke",
            "nameLocation": "3347:6:37",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4173,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4170,
                  "mutability": "mutable",
                  "name": "_from",
                  "nameLocation": "3362:5:37",
                  "nodeType": "VariableDeclaration",
                  "scope": 4200,
                  "src": "3354:13:37",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4169,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3354:7:37",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4172,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "3377:8:37",
                  "nodeType": "VariableDeclaration",
                  "scope": 4200,
                  "src": "3369:16:37",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4171,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3369:7:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3353:33:37"
            },
            "returnParameters": {
              "id": 4176,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4175,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4200,
                  "src": "3405:4:37",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4174,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3405:4:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3404:6:37"
            },
            "scope": 4383,
            "src": "3338:428:37",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 4241,
              "nodeType": "Block",
              "src": "4409:413:37",
              "statements": [
                {
                  "documentation": "@dev Require _to is not a zero address.",
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 4216,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 4211,
                          "name": "_to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4203,
                          "src": "4479:3:37",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 4214,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4494:1:37",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 4213,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "4486:7:37",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 4212,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "4486:7:37",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 4215,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4486:10:37",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "4479:17:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "517565727920666f72207a65726f20616464726573732e",
                        "id": 4217,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4498:25:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_005e8d856629456edb7ab6f50cb9a953faf7bd57251d26a58543713b45fac495",
                          "typeString": "literal_string \"Query for zero address.\""
                        },
                        "value": "Query for zero address."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_005e8d856629456edb7ab6f50cb9a953faf7bd57251d26a58543713b45fac495",
                          "typeString": "literal_string \"Query for zero address.\""
                        }
                      ],
                      "id": 4210,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4471:7:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4218,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4471:53:37",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4219,
                  "nodeType": "ExpressionStatement",
                  "src": "4471:53:37"
                },
                {
                  "documentation": "@dev Require token exists.",
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 4222,
                            "name": "_tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4205,
                            "src": "4589:8:37",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 4221,
                          "name": "_exists",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5797,
                          "src": "4581:7:37",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (uint256) view returns (bool)"
                          }
                        },
                        "id": 4223,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4581:17:37",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f6e2d6578697374656e7420746f6b656e2e",
                        "id": 4224,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4600:21:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_8c0d8f43323770a1dd202a4a690419e3948b07e562a1c5b5bee2020c96039cb2",
                          "typeString": "literal_string \"Non-existent token.\""
                        },
                        "value": "Non-existent token."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_8c0d8f43323770a1dd202a4a690419e3948b07e562a1c5b5bee2020c96039cb2",
                          "typeString": "literal_string \"Non-existent token.\""
                        }
                      ],
                      "id": 4220,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4573:7:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4225,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4573:49:37",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4226,
                  "nodeType": "ExpressionStatement",
                  "src": "4573:49:37"
                },
                {
                  "documentation": "@dev Require _tokenId is owned by _to.",
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 4232,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "id": 4229,
                              "name": "_tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4205,
                              "src": "4699:8:37",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 4228,
                            "name": "ownerOf",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5780,
                            "src": "4691:7:37",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                              "typeString": "function (uint256) view returns (address)"
                            }
                          },
                          "id": 4230,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4691:17:37",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 4231,
                          "name": "_to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4203,
                          "src": "4712:3:37",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "4691:24:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "546f6b656e206e6f74206f776e65642062792061646472657373",
                        "id": 4233,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4717:28:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3530adbde4ceb2e09524c86c72dc5c102ccf0ab5b3d278483f4421b30348154a",
                          "typeString": "literal_string \"Token not owned by address\""
                        },
                        "value": "Token not owned by address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3530adbde4ceb2e09524c86c72dc5c102ccf0ab5b3d278483f4421b30348154a",
                          "typeString": "literal_string \"Token not owned by address\""
                        }
                      ],
                      "id": 4227,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4683:7:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4234,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4683:63:37",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4235,
                  "nodeType": "ExpressionStatement",
                  "src": "4683:63:37"
                },
                {
                  "documentation": "@dev Returns this address.",
                  "expression": {
                    "arguments": [
                      {
                        "id": 4238,
                        "name": "this",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -28,
                        "src": "4810:4:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Soulbound_$4383",
                          "typeString": "contract Soulbound"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_Soulbound_$4383",
                          "typeString": "contract Soulbound"
                        }
                      ],
                      "id": 4237,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "4802:7:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_address_$",
                        "typeString": "type(address)"
                      },
                      "typeName": {
                        "id": 4236,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4802:7:37",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 4239,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4802:13:37",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 4209,
                  "id": 4240,
                  "nodeType": "Return",
                  "src": "4795:20:37"
                }
              ]
            },
            "documentation": {
              "id": 4201,
              "nodeType": "StructuredDocumentation",
              "src": "3772:525:37",
              "text": " @dev  Since a token cannnot be minted twice.\n       This function returns the address that minted token `_tokenId` to `_to`,\n       otherwise this contract.\n       `_to` must not be a 0 address.\n       `_tokenId` must be an existent token.\n       Owner of _tokenId must be _to.\n @notice Callable by anyone.\n @param _to        Address to which token `_tokenId` is minted.\n @param _tokenId   Token minted.\n @return address of issuer."
            },
            "functionSelector": "fb8f198d",
            "id": 4242,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "issuerOf",
            "nameLocation": "4311:8:37",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4206,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4203,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "4328:3:37",
                  "nodeType": "VariableDeclaration",
                  "scope": 4242,
                  "src": "4320:11:37",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4202,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4320:7:37",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4205,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "4341:8:37",
                  "nodeType": "VariableDeclaration",
                  "scope": 4242,
                  "src": "4333:16:37",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4204,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4333:7:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4319:31:37"
            },
            "returnParameters": {
              "id": 4209,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4208,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4242,
                  "src": "4396:7:37",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4207,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4396:7:37",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4395:9:37"
            },
            "scope": 4383,
            "src": "4302:520:37",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 4258,
              "nodeType": "Block",
              "src": "5329:44:37",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 4252,
                        "name": "mints",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4133,
                        "src": "5346:5:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
                          "typeString": "mapping(address => mapping(uint256 => bool))"
                        }
                      },
                      "id": 4254,
                      "indexExpression": {
                        "id": 4253,
                        "name": "_to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4245,
                        "src": "5352:3:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "5346:10:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                        "typeString": "mapping(uint256 => bool)"
                      }
                    },
                    "id": 4256,
                    "indexExpression": {
                      "id": 4255,
                      "name": "_tokenId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4247,
                      "src": "5357:8:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "5346:20:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 4251,
                  "id": 4257,
                  "nodeType": "Return",
                  "src": "5339:27:37"
                }
              ]
            },
            "documentation": {
              "id": 4243,
              "nodeType": "StructuredDocumentation",
              "src": "4828:392:37",
              "text": " @dev  Returns true if token `_tokenId` was minted from this contract to `_to`.\n       `_to` must not be a 0 address.\n       `_tokenId` must be an existent token.\n @notice Callable by anyone.\n @param _to        Address to which token `_tokenId` is minted.\n @param _tokenId   Token minted.\n @return bool true or false."
            },
            "functionSelector": "5899e7b2",
            "id": 4259,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isMinted",
            "nameLocation": "5234:8:37",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4248,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4245,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "5251:3:37",
                  "nodeType": "VariableDeclaration",
                  "scope": 4259,
                  "src": "5243:11:37",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4244,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5243:7:37",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4247,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "5264:8:37",
                  "nodeType": "VariableDeclaration",
                  "scope": 4259,
                  "src": "5256:16:37",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4246,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5256:7:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5242:31:37"
            },
            "returnParameters": {
              "id": 4251,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4250,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4259,
                  "src": "5319:4:37",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4249,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5319:4:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5318:6:37"
            },
            "scope": 4383,
            "src": "5225:148:37",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 4304,
              "nodeType": "Block",
              "src": "5728:548:37",
              "statements": [
                {
                  "documentation": "@dev Require the address receiving is not a zero address.",
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 4275,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 4270,
                          "name": "to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4262,
                          "src": "5816:2:37",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 4273,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5830:1:37",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 4272,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "5822:7:37",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 4271,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "5822:7:37",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 4274,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5822:10:37",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "5816:16:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4d696e7420746f207a65726f20616464726573732e",
                        "id": 4276,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5834:23:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b3cd0cc0adee66fdd10c0f21fe5cb0de39672daa3845cfc9b86f6248c4187fe0",
                          "typeString": "literal_string \"Mint to zero address.\""
                        },
                        "value": "Mint to zero address."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b3cd0cc0adee66fdd10c0f21fe5cb0de39672daa3845cfc9b86f6248c4187fe0",
                          "typeString": "literal_string \"Mint to zero address.\""
                        }
                      ],
                      "id": 4269,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5808:7:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4277,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5808:50:37",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4278,
                  "nodeType": "ExpressionStatement",
                  "src": "5808:50:37"
                },
                {
                  "documentation": "@dev    ERC-4973 doesn't include checks for empty tokenURIs\n         but they should be necessary.",
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 4286,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "arguments": [
                              {
                                "id": 4282,
                                "name": "tokenURI",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4266,
                                "src": "6004:8:37",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              ],
                              "id": 4281,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "5998:5:37",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                "typeString": "type(bytes storage pointer)"
                              },
                              "typeName": {
                                "id": 4280,
                                "name": "bytes",
                                "nodeType": "ElementaryTypeName",
                                "src": "5998:5:37",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 4283,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5998:15:37",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "id": 4284,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "5998:22:37",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 4285,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6024:1:37",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "5998:27:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "456d70747920746f6b656e5552492e",
                        "id": 4287,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6027:17:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_1d891222b44d3abffe01f576969f9f733cbf76c2739aa002fc7a68d63427339f",
                          "typeString": "literal_string \"Empty tokenURI.\""
                        },
                        "value": "Empty tokenURI."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_1d891222b44d3abffe01f576969f9f733cbf76c2739aa002fc7a68d63427339f",
                          "typeString": "literal_string \"Empty tokenURI.\""
                        }
                      ],
                      "id": 4279,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5990:7:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4288,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5990:55:37",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4289,
                  "nodeType": "ExpressionStatement",
                  "src": "5990:55:37"
                },
                {
                  "documentation": "@dev    Mint to the `to` address.\n         ERC4973 runs check for existent token.",
                  "expression": {
                    "arguments": [
                      {
                        "id": 4291,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4262,
                        "src": "6166:2:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4292,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4264,
                        "src": "6170:7:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 4293,
                        "name": "tokenURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4266,
                        "src": "6179:8:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 4290,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5842,
                      "src": "6160:5:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
                        "typeString": "function (address,uint256,string memory) returns (uint256)"
                      }
                    },
                    "id": 4294,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6160:28:37",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 4295,
                  "nodeType": "ExpressionStatement",
                  "src": "6160:28:37"
                },
                {
                  "documentation": "@dev Set record of owner to true;",
                  "expression": {
                    "id": 4302,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 4296,
                          "name": "mints",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4133,
                          "src": "6244:5:37",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
                            "typeString": "mapping(address => mapping(uint256 => bool))"
                          }
                        },
                        "id": 4299,
                        "indexExpression": {
                          "id": 4297,
                          "name": "to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4262,
                          "src": "6250:2:37",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "6244:9:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                          "typeString": "mapping(uint256 => bool)"
                        }
                      },
                      "id": 4300,
                      "indexExpression": {
                        "id": 4298,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4264,
                        "src": "6254:7:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "6244:18:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 4301,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "6265:4:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "6244:25:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4303,
                  "nodeType": "ExpressionStatement",
                  "src": "6244:25:37"
                }
              ]
            },
            "documentation": {
              "id": 4260,
              "nodeType": "StructuredDocumentation",
              "src": "5379:225:37",
              "text": " @dev Mints `tokenId` of the soulbound token to `to`.\n @param to         Receiver of the tokens.\n @param tokenId    Amount to be minted, GT 0.\n @param tokenURI   URI of token minted."
            },
            "id": 4305,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mintSoulboundToken",
            "nameLocation": "5618:18:37",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4267,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4262,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "5654:2:37",
                  "nodeType": "VariableDeclaration",
                  "scope": 4305,
                  "src": "5646:10:37",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4261,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5646:7:37",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4264,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "5674:7:37",
                  "nodeType": "VariableDeclaration",
                  "scope": 4305,
                  "src": "5666:15:37",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4263,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5666:7:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4266,
                  "mutability": "mutable",
                  "name": "tokenURI",
                  "nameLocation": "5705:8:37",
                  "nodeType": "VariableDeclaration",
                  "scope": 4305,
                  "src": "5691:22:37",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4265,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "5691:6:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5636:83:37"
            },
            "returnParameters": {
              "id": 4268,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5728:0:37"
            },
            "scope": 4383,
            "src": "5609:667:37",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "private"
          },
          {
            "body": {
              "id": 4337,
              "nodeType": "Block",
              "src": "6490:368:37",
              "statements": [
                {
                  "documentation": "@dev Checks that the token actually exists.",
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 4313,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4308,
                            "src": "6572:7:37",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 4312,
                          "name": "_exists",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5797,
                          "src": "6564:7:37",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (uint256) view returns (bool)"
                          }
                        },
                        "id": 4314,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6564:16:37",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4275726e206f6620696e6578697374656e7420746f6b656e",
                        "id": 4315,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6582:26:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e62e94c4703f3d2220adca7d86fbde12466a7fcf9da73713f2c22063a947d725",
                          "typeString": "literal_string \"Burn of inexistent token\""
                        },
                        "value": "Burn of inexistent token"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e62e94c4703f3d2220adca7d86fbde12466a7fcf9da73713f2c22063a947d725",
                          "typeString": "literal_string \"Burn of inexistent token\""
                        }
                      ],
                      "id": 4311,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6556:7:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4316,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6556:53:37",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4317,
                  "nodeType": "ExpressionStatement",
                  "src": "6556:53:37"
                },
                {
                  "assignments": [
                    4320
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4320,
                      "mutability": "mutable",
                      "name": "_tokenOwner",
                      "nameLocation": "6672:11:37",
                      "nodeType": "VariableDeclaration",
                      "scope": 4337,
                      "src": "6664:19:37",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 4319,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6664:7:37",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "documentation": "@dev Get owner of token tokenId.",
                  "id": 4324,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 4322,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4308,
                        "src": "6694:7:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4321,
                      "name": "ownerOf",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5780,
                      "src": "6686:7:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                        "typeString": "function (uint256) view returns (address)"
                      }
                    },
                    "id": 4323,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6686:16:37",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6664:38:37"
                },
                {
                  "documentation": "@dev Burn the token.",
                  "expression": {
                    "arguments": [
                      {
                        "id": 4326,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4308,
                        "src": "6751:7:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4325,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5875,
                      "src": "6745:5:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 4327,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6745:14:37",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4328,
                  "nodeType": "ExpressionStatement",
                  "src": "6745:14:37"
                },
                {
                  "documentation": "@dev Set record of owner to false.",
                  "expression": {
                    "id": 4335,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 4329,
                          "name": "mints",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4133,
                          "src": "6816:5:37",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
                            "typeString": "mapping(address => mapping(uint256 => bool))"
                          }
                        },
                        "id": 4332,
                        "indexExpression": {
                          "id": 4330,
                          "name": "_tokenOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4320,
                          "src": "6822:11:37",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "6816:18:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                          "typeString": "mapping(uint256 => bool)"
                        }
                      },
                      "id": 4333,
                      "indexExpression": {
                        "id": 4331,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4308,
                        "src": "6835:7:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "6816:27:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "66616c7365",
                      "id": 4334,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "6846:5:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "6816:35:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4336,
                  "nodeType": "ExpressionStatement",
                  "src": "6816:35:37"
                }
              ]
            },
            "documentation": {
              "id": 4306,
              "nodeType": "StructuredDocumentation",
              "src": "6282:150:37",
              "text": " @dev  Burns a soulbound token, on the condition that\n       the token exists.\n @param tokenId Token to be burnt."
            },
            "id": 4338,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burnSoulboundToken",
            "nameLocation": "6446:18:37",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4309,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4308,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "6473:7:37",
                  "nodeType": "VariableDeclaration",
                  "scope": 4338,
                  "src": "6465:15:37",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4307,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6465:7:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6464:17:37"
            },
            "returnParameters": {
              "id": 4310,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6490:0:37"
            },
            "scope": 4383,
            "src": "6437:421:37",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "private"
          },
          {
            "body": {
              "id": 4359,
              "nodeType": "Block",
              "src": "7083:180:37",
              "statements": [
                {
                  "documentation": "@dev Ensure that the word length is 0.",
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 4351,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "arguments": [
                              {
                                "id": 4347,
                                "name": "_baseURI",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4341,
                                "src": "7158:8:37",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              ],
                              "id": 4346,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "7152:5:37",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                "typeString": "type(bytes storage pointer)"
                              },
                              "typeName": {
                                "id": 4345,
                                "name": "bytes",
                                "nodeType": "ElementaryTypeName",
                                "src": "7152:5:37",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 4348,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7152:15:37",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "id": 4349,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "7152:22:37",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 4350,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "7178:1:37",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "7152:27:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e76616c6964206c656e677468",
                        "id": 4352,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7181:16:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_089295123856887e817ba9ef604c626ebffe924cc87e7d9c9d8c4f3d4f2186f7",
                          "typeString": "literal_string \"Invalid length\""
                        },
                        "value": "Invalid length"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_089295123856887e817ba9ef604c626ebffe924cc87e7d9c9d8c4f3d4f2186f7",
                          "typeString": "literal_string \"Invalid length\""
                        }
                      ],
                      "id": 4344,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7144:7:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4353,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7144:54:37",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4354,
                  "nodeType": "ExpressionStatement",
                  "src": "7144:54:37"
                },
                {
                  "documentation": "@dev Set baseURI.",
                  "expression": {
                    "id": 4357,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4355,
                      "name": "baseURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4126,
                      "src": "7238:7:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 4356,
                      "name": "_baseURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4341,
                      "src": "7248:8:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "7238:18:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 4358,
                  "nodeType": "ExpressionStatement",
                  "src": "7238:18:37"
                }
              ]
            },
            "documentation": {
              "id": 4339,
              "nodeType": "StructuredDocumentation",
              "src": "6864:160:37",
              "text": " @dev Sets the baseURI to `_baseURI`.\n @notice Callable by this or inheriting contract.\n @param _baseURI String URI."
            },
            "id": 4360,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_setBaseURI",
            "nameLocation": "7038:11:37",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4342,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4341,
                  "mutability": "mutable",
                  "name": "_baseURI",
                  "nameLocation": "7064:8:37",
                  "nodeType": "VariableDeclaration",
                  "scope": 4360,
                  "src": "7050:22:37",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4340,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "7050:6:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7049:24:37"
            },
            "returnParameters": {
              "id": 4343,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7083:0:37"
            },
            "scope": 4383,
            "src": "7029:234:37",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 4381,
              "nodeType": "Block",
              "src": "7493:180:37",
              "statements": [
                {
                  "documentation": "@dev Require baseURI length is not 0.",
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 4373,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "arguments": [
                              {
                                "id": 4369,
                                "name": "baseURI",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4126,
                                "src": "7567:7:37",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_storage",
                                  "typeString": "string storage ref"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_string_storage",
                                  "typeString": "string storage ref"
                                }
                              ],
                              "id": 4368,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "7561:5:37",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                "typeString": "type(bytes storage pointer)"
                              },
                              "typeName": {
                                "id": 4367,
                                "name": "bytes",
                                "nodeType": "ElementaryTypeName",
                                "src": "7561:5:37",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 4370,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7561:14:37",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_storage_ptr",
                              "typeString": "bytes storage pointer"
                            }
                          },
                          "id": 4371,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "7561:21:37",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 4372,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "7586:1:37",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "7561:26:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "456d7074792062617365555249",
                        "id": 4374,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7589:15:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3247d8bc89d36854791dbafe948ddc082d8cf6636c64b41fbbdf5761acfb1e22",
                          "typeString": "literal_string \"Empty baseURI\""
                        },
                        "value": "Empty baseURI"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3247d8bc89d36854791dbafe948ddc082d8cf6636c64b41fbbdf5761acfb1e22",
                          "typeString": "literal_string \"Empty baseURI\""
                        }
                      ],
                      "id": 4366,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7553:7:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4375,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7553:52:37",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4376,
                  "nodeType": "ExpressionStatement",
                  "src": "7553:52:37"
                },
                {
                  "documentation": "@dev Return baseURI.",
                  "expression": {
                    "id": 4379,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4377,
                      "name": "_baseURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4364,
                      "src": "7648:8:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 4378,
                      "name": "baseURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4126,
                      "src": "7659:7:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "src": "7648:18:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "id": 4380,
                  "nodeType": "ExpressionStatement",
                  "src": "7648:18:37"
                }
              ]
            },
            "documentation": {
              "id": 4361,
              "nodeType": "StructuredDocumentation",
              "src": "7269:151:37",
              "text": " @dev Returns already set baseURI if it exists.\n @notice Callable by anyone.\n @return _baseURI baseURI set."
            },
            "functionSelector": "c9dd94c7",
            "id": 4382,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_getBaseURI",
            "nameLocation": "7434:11:37",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4362,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7445:2:37"
            },
            "returnParameters": {
              "id": 4365,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4364,
                  "mutability": "mutable",
                  "name": "_baseURI",
                  "nameLocation": "7483:8:37",
                  "nodeType": "VariableDeclaration",
                  "scope": 4382,
                  "src": "7469:22:37",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4363,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "7469:6:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7468:24:37"
            },
            "scope": 4383,
            "src": "7425:248:37",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 4384,
        "src": "802:6873:37",
        "usedErrors": []
      }
    ],
    "src": "36:7640:37"
  },
  "bytecode": "60806040523480156200001157600080fd5b5060405162000c1a38038062000c1a83398101604081905262000034916200012b565b8181600062000044838262000224565b50600162000053828262000224565b5050505050620002f0565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200008657600080fd5b81516001600160401b0380821115620000a357620000a36200005e565b604051601f8301601f19908116603f01168101908282118183101715620000ce57620000ce6200005e565b81604052838152602092508683858801011115620000eb57600080fd5b600091505b838210156200010f5785820183015181830184015290820190620000f0565b83821115620001215760008385830101525b9695505050505050565b600080604083850312156200013f57600080fd5b82516001600160401b03808211156200015757600080fd5b620001658683870162000074565b935060208501519150808211156200017c57600080fd5b506200018b8582860162000074565b9150509250929050565b600181811c90821680620001aa57607f821691505b602082108103620001cb57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200021f57600081815260208120601f850160051c81016020861015620001fa5750805b601f850160051c820191505b818110156200021b5782815560010162000206565b5050505b505050565b81516001600160401b038111156200024057620002406200005e565b620002588162000251845462000195565b84620001d1565b602080601f831160018114620002905760008415620002775750858301515b600019600386901b1c1916600185901b1785556200021b565b600085815260208120601f198616915b82811015620002c157888601518255948401946001909101908401620002a0565b5085821015620002e05787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61091a80620003006000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806370a082311161006657806370a082311461015957806395d89b411461017a578063c87b56dd14610182578063c9dd94c714610195578063fb8f198d1461019d57600080fd5b806301ffc9a7146100a357806306fdde03146100cb57806342966c68146100e05780635899e7b2146100f55780636352211e1461012e575b600080fd5b6100b66100b1366004610785565b6101b0565b60405190151581526020015b60405180910390f35b6100d3610202565b6040516100c291906107b6565b6100f36100ee36600461080b565b610294565b005b6100b6610103366004610840565b6001600160a01b03919091166000908152600660209081526040808320938352929052205460ff1690565b61014161013c36600461080b565b61030e565b6040516001600160a01b0390911681526020016100c2565b61016c61016736600461086a565b610373565b6040519081526020016100c2565b6100d36103fc565b6100d361019036600461080b565b61040b565b6100d3610510565b6101416101ab366004610840565b61056d565b60006001600160e01b03198216635b5e139f60e01b14806101e157506001600160e01b03198216635164cf4760e01b145b806101fc57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461021190610885565b80601f016020809104026020016040519081016040528092919081815260200182805461023d90610885565b801561028a5780601f1061025f5761010080835404028352916020019161028a565b820191906000526020600020905b81548152906001019060200180831161026d57829003601f168201915b5050505050905090565b61029d8161030e565b6001600160a01b0316336001600160a01b0316146103025760405162461bcd60e51b815260206004820152601a60248201527f6275726e3a2073656e646572206d757374206265206f776e657200000000000060448201526064015b60405180910390fd5b61030b81610690565b50565b6000818152600260205260408120546001600160a01b0316806101fc5760405162461bcd60e51b815260206004820152601c60248201527f6f776e65724f663a20746f6b656e20646f65736e27742065786973740000000060448201526064016102f9565b60006001600160a01b0382166103e05760405162461bcd60e51b815260206004820152602c60248201527f62616c616e63654f663a2061646472657373207a65726f206973206e6f74206160448201526b103b30b634b21037bbb732b960a11b60648201526084016102f9565b506001600160a01b031660009081526004602052604090205490565b60606001805461021190610885565b6000818152600260205260409020546060906001600160a01b03166104725760405162461bcd60e51b815260206004820152601d60248201527f746f6b656e5552493a20746f6b656e20646f65736e277420657869737400000060448201526064016102f9565b6000828152600360205260409020805461048b90610885565b80601f01602080910402602001604051908101604052809291908181526020018280546104b790610885565b80156105045780601f106104d957610100808354040283529160200191610504565b820191906000526020600020905b8154815290600101906020018083116104e757829003601f168201915b50505050509050919050565b60606005805461051f90610885565b90506000036105605760405162461bcd60e51b815260206004820152600d60248201526c456d707479206261736555524960981b60448201526064016102f9565b6005805461021190610885565b60006001600160a01b0383166105c55760405162461bcd60e51b815260206004820152601760248201527f517565727920666f72207a65726f20616464726573732e00000000000000000060448201526064016102f9565b6000828152600260205260409020546001600160a01b031661061f5760405162461bcd60e51b81526020600482015260136024820152722737b716b2bc34b9ba32b73a103a37b5b2b71760691b60448201526064016102f9565b826001600160a01b03166106328361030e565b6001600160a01b0316146106885760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e206e6f74206f776e6564206279206164647265737300000000000060448201526064016102f9565b503092915050565b600061069b8261030e565b6001600160a01b038116600090815260046020526040812080549293506001929091906106c99084906108bf565b9091555050600082815260026020908152604080832080546001600160a01b0319169055600390915281206106fd91610737565b60405182906001600160a01b038316907fec9ab91322523c899ede7830ec9bfc992b5981cdcc27b91162fb23de5791117b90600090a35050565b50805461074390610885565b6000825580601f10610753575050565b601f01602090049060005260206000209081019061030b91905b80821115610781576000815560010161076d565b5090565b60006020828403121561079757600080fd5b81356001600160e01b0319811681146107af57600080fd5b9392505050565b600060208083528351808285015260005b818110156107e3578581018301518582016040015282016107c7565b818111156107f5576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561081d57600080fd5b5035919050565b80356001600160a01b038116811461083b57600080fd5b919050565b6000806040838503121561085357600080fd5b61085c83610824565b946020939093013593505050565b60006020828403121561087c57600080fd5b6107af82610824565b600181811c9082168061089957607f821691505b6020821081036108b957634e487b7160e01b600052602260045260246000fd5b50919050565b6000828210156108df57634e487b7160e01b600052601160045260246000fd5b50039056fea2646970667358221220f9ef4625cdeed4f21daaf2a349a3ed91718c587a04b040ae19a27945bfd34a2264736f6c634300080f0033",
  "bytecodeSha1": "a9ab484f7c2de8a9798ef45b4f2db8c2de2b98dd",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.15+commit.e14f2714"
  },
  "contractName": "Soulbound",
  "coverageMap": {
    "branches": {
      "37": {
        "Soulbound._getBaseURI": {
          "23": [
            7561,
            7587,
            true
          ]
        },
        "Soulbound.issuerOf": {
          "24": [
            4479,
            4496,
            true
          ],
          "25": [
            4691,
            4715,
            true
          ]
        }
      },
      "41": {
        "ERC4973.balanceOf": {
          "27": [
            5570,
            5589,
            true
          ]
        },
        "ERC4973.burn": {
          "26": [
            5316,
            5346,
            true
          ]
        }
      }
    },
    "statements": {
      "37": {
        "Soulbound._getBaseURI": {
          "13": [
            7553,
            7605
          ],
          "14": [
            7648,
            7666
          ]
        },
        "Soulbound.isMinted": {
          "0": [
            5339,
            5366
          ]
        },
        "Soulbound.issuerOf": {
          "15": [
            4471,
            4524
          ],
          "16": [
            4573,
            4622
          ],
          "17": [
            4683,
            4746
          ],
          "18": [
            4795,
            4815
          ]
        }
      },
      "41": {
        "ERC165.supportsInterface": {
          "2": [
            1750,
            1797
          ]
        },
        "ERC4973._burn": {
          "19": [
            6510,
            6531
          ],
          "20": [
            6541,
            6564
          ],
          "21": [
            6574,
            6600
          ],
          "22": [
            6611,
            6638
          ]
        },
        "ERC4973._exists": {
          "10": [
            6005,
            6042
          ]
        },
        "ERC4973.balanceOf": {
          "7": [
            5549,
            5659
          ],
          "8": [
            5669,
            5692
          ]
        },
        "ERC4973.burn": {
          "4": [
            5308,
            5377
          ],
          "5": [
            5387,
            5401
          ]
        },
        "ERC4973.name": {
          "3": [
            4861,
            4873
          ]
        },
        "ERC4973.ownerOf": {
          "6": [
            5829,
            5889
          ]
        },
        "ERC4973.supportsInterface": {
          "1": [
            4593,
            4769
          ]
        },
        "ERC4973.symbol": {
          "9": [
            4967,
            4981
          ]
        },
        "ERC4973.tokenURI": {
          "11": [
            5136,
            5194
          ],
          "12": [
            5204,
            5230
          ]
        }
      }
    }
  },
  "dependencies": [
    "ERC165",
    "ERC4973",
    "IERC165",
    "IERC4973",
    "IERC721Metadata"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b506004361061009e5760003560e01c806370a082311161006657806370a082311461015957806395d89b411461017a578063c87b56dd14610182578063c9dd94c714610195578063fb8f198d1461019d57600080fd5b806301ffc9a7146100a357806306fdde03146100cb57806342966c68146100e05780635899e7b2146100f55780636352211e1461012e575b600080fd5b6100b66100b1366004610785565b6101b0565b60405190151581526020015b60405180910390f35b6100d3610202565b6040516100c291906107b6565b6100f36100ee36600461080b565b610294565b005b6100b6610103366004610840565b6001600160a01b03919091166000908152600660209081526040808320938352929052205460ff1690565b61014161013c36600461080b565b61030e565b6040516001600160a01b0390911681526020016100c2565b61016c61016736600461086a565b610373565b6040519081526020016100c2565b6100d36103fc565b6100d361019036600461080b565b61040b565b6100d3610510565b6101416101ab366004610840565b61056d565b60006001600160e01b03198216635b5e139f60e01b14806101e157506001600160e01b03198216635164cf4760e01b145b806101fc57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461021190610885565b80601f016020809104026020016040519081016040528092919081815260200182805461023d90610885565b801561028a5780601f1061025f5761010080835404028352916020019161028a565b820191906000526020600020905b81548152906001019060200180831161026d57829003601f168201915b5050505050905090565b61029d8161030e565b6001600160a01b0316336001600160a01b0316146103025760405162461bcd60e51b815260206004820152601a60248201527f6275726e3a2073656e646572206d757374206265206f776e657200000000000060448201526064015b60405180910390fd5b61030b81610690565b50565b6000818152600260205260408120546001600160a01b0316806101fc5760405162461bcd60e51b815260206004820152601c60248201527f6f776e65724f663a20746f6b656e20646f65736e27742065786973740000000060448201526064016102f9565b60006001600160a01b0382166103e05760405162461bcd60e51b815260206004820152602c60248201527f62616c616e63654f663a2061646472657373207a65726f206973206e6f74206160448201526b103b30b634b21037bbb732b960a11b60648201526084016102f9565b506001600160a01b031660009081526004602052604090205490565b60606001805461021190610885565b6000818152600260205260409020546060906001600160a01b03166104725760405162461bcd60e51b815260206004820152601d60248201527f746f6b656e5552493a20746f6b656e20646f65736e277420657869737400000060448201526064016102f9565b6000828152600360205260409020805461048b90610885565b80601f01602080910402602001604051908101604052809291908181526020018280546104b790610885565b80156105045780601f106104d957610100808354040283529160200191610504565b820191906000526020600020905b8154815290600101906020018083116104e757829003601f168201915b50505050509050919050565b60606005805461051f90610885565b90506000036105605760405162461bcd60e51b815260206004820152600d60248201526c456d707479206261736555524960981b60448201526064016102f9565b6005805461021190610885565b60006001600160a01b0383166105c55760405162461bcd60e51b815260206004820152601760248201527f517565727920666f72207a65726f20616464726573732e00000000000000000060448201526064016102f9565b6000828152600260205260409020546001600160a01b031661061f5760405162461bcd60e51b81526020600482015260136024820152722737b716b2bc34b9ba32b73a103a37b5b2b71760691b60448201526064016102f9565b826001600160a01b03166106328361030e565b6001600160a01b0316146106885760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e206e6f74206f776e6564206279206164647265737300000000000060448201526064016102f9565b503092915050565b600061069b8261030e565b6001600160a01b038116600090815260046020526040812080549293506001929091906106c99084906108bf565b9091555050600082815260026020908152604080832080546001600160a01b0319169055600390915281206106fd91610737565b60405182906001600160a01b038316907fec9ab91322523c899ede7830ec9bfc992b5981cdcc27b91162fb23de5791117b90600090a35050565b50805461074390610885565b6000825580601f10610753575050565b601f01602090049060005260206000209081019061030b91905b80821115610781576000815560010161076d565b5090565b60006020828403121561079757600080fd5b81356001600160e01b0319811681146107af57600080fd5b9392505050565b600060208083528351808285015260005b818110156107e3578581018301518582016040015282016107c7565b818111156107f5576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561081d57600080fd5b5035919050565b80356001600160a01b038116811461083b57600080fd5b919050565b6000806040838503121561085357600080fd5b61085c83610824565b946020939093013593505050565b60006020828403121561087c57600080fd5b6107af82610824565b600181811c9082168061089957607f821691505b6020821081036108b957634e487b7160e01b600052602260045260246000fd5b50919050565b6000828210156108df57634e487b7160e01b600052601160045260246000fd5b50039056fea2646970667358221220f9ef4625cdeed4f21daaf2a349a3ed91718c587a04b040ae19a27945bfd34a2264736f6c634300080f0033",
  "deployedSourceMap": "802:6873:37:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4448:328:41;;;;;;:::i;:::-;;:::i;:::-;;;470:14:43;;463:22;445:41;;433:2;418:18;4448:328:41;;;;;;;;4782:98;;;:::i;:::-;;;;;;;:::i;5243:165::-;;;;;;:::i;:::-;;:::i;:::-;;5225:148:37;;;;;;:::i;:::-;-1:-1:-1;;;;;5346:10:37;;;;5319:4;5346:10;;;:5;:10;;;;;;;;:20;;;;;;;;;;;5225:148;5705:213:41;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1885:32:43;;;1867:51;;1855:2;1840:18;5705:213:41;1721:203:43;5414:285:41;;;;;;:::i;:::-;;:::i;:::-;;;2266:25:43;;;2254:2;2239:18;5414:285:41;2120:177:43;4886:102:41;;;:::i;4994:243::-;;;;;;:::i;:::-;;:::i;7425:248:37:-;;;:::i;4302:520::-;;;;;;:::i;:::-;;:::i;4448:328:41:-;4573:4;-1:-1:-1;;;;;;4612:48:41;;-1:-1:-1;;;4612:48:41;;:105;;-1:-1:-1;;;;;;;4676:41:41;;-1:-1:-1;;;4676:41:41;4612:105;:157;;;-1:-1:-1;;;;;;;;;;1757:40:41;;;4733:36;4593:176;4448:328;-1:-1:-1;;4448:328:41:o;4782:98::-;4836:13;4868:5;4861:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4782:98;:::o;5243:165::-;5330:16;5338:7;5330;:16::i;:::-;-1:-1:-1;;;;;5316:30:41;:10;-1:-1:-1;;;;;5316:30:41;;5308:69;;;;-1:-1:-1;;;5308:69:41;;2889:2:43;5308:69:41;;;2871:21:43;2928:2;2908:18;;;2901:30;2967:28;2947:18;;;2940:56;3013:18;;5308:69:41;;;;;;;;;5387:14;5393:7;5387:5;:14::i;:::-;5243:165;:::o;5705:213::-;5768:7;5803:16;;;:7;:16;;;;;;-1:-1:-1;;;;;5803:16:41;;5829:60;;;;-1:-1:-1;;;5829:60:41;;3244:2:43;5829:60:41;;;3226:21:43;3283:2;3263:18;;;3256:30;3322;3302:18;;;3295:58;3370:18;;5829:60:41;3042:352:43;5414:285:41;5526:7;-1:-1:-1;;;;;5570:19:41;;5549:110;;;;-1:-1:-1;;;5549:110:41;;3601:2:43;5549:110:41;;;3583:21:43;3640:2;3620:18;;;3613:30;3679:34;3659:18;;;3652:62;-1:-1:-1;;;3730:18:43;;;3723:42;3782:19;;5549:110:41;3399:408:43;5549:110:41;-1:-1:-1;;;;;;5676:16:41;;;;;:9;:16;;;;;;;5414:285::o;4886:102::-;4942:13;4974:7;4967:14;;;;;:::i;4994:243::-;5989:4;6012:16;;;:7;:16;;;;;;5107:13;;-1:-1:-1;;;;;6012:16:41;5136:58;;;;-1:-1:-1;;;5136:58:41;;4014:2:43;5136:58:41;;;3996:21:43;4053:2;4033:18;;;4026:30;4092:31;4072:18;;;4065:59;4141:18;;5136:58:41;3812:353:43;5136:58:41;5211:19;;;;:10;:19;;;;;5204:26;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4994:243;;;:::o;7425:248:37:-;7469:22;7567:7;7561:21;;;;;:::i;:::-;;;7586:1;7561:26;7553:52;;;;-1:-1:-1;;;7553:52:37;;4372:2:43;7553:52:37;;;4354:21:43;4411:2;4391:18;;;4384:30;-1:-1:-1;;;4430:18:43;;;4423:43;4483:18;;7553:52:37;4170:337:43;7553:52:37;7659:7;7648:18;;;;;:::i;4302:520::-;4396:7;-1:-1:-1;;;;;4479:17:37;;4471:53;;;;-1:-1:-1;;;4471:53:37;;4714:2:43;4471:53:37;;;4696:21:43;4753:2;4733:18;;;4726:30;4792:25;4772:18;;;4765:53;4835:18;;4471:53:37;4512:347:43;4471:53:37;5989:4:41;6012:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6012:16:41;4573:49:37;;;;-1:-1:-1;;;4573:49:37;;5066:2:43;4573:49:37;;;5048:21:43;5105:2;5085:18;;;5078:30;-1:-1:-1;;;5124:18:43;;;5117:49;5183:18;;4573:49:37;4864:343:43;4573:49:37;4712:3;-1:-1:-1;;;;;4691:24:37;:17;4699:8;4691:7;:17::i;:::-;-1:-1:-1;;;;;4691:24:37;;4683:63;;;;-1:-1:-1;;;4683:63:37;;5414:2:43;4683:63:37;;;5396:21:43;5453:2;5433:18;;;5426:30;5492:28;5472:18;;;5465:56;5538:18;;4683:63:37;5212:350:43;4683:63:37;-1:-1:-1;4810:4:37;4302:520;;;;:::o;6408:237:41:-;6467:13;6483:16;6491:7;6483;:16::i;:::-;-1:-1:-1;;;;;6510:16:41;;;;;;:9;:16;;;;;:21;;6467:32;;-1:-1:-1;6530:1:41;;6510:16;;;:21;;6530:1;;6510:21;:::i;:::-;;;;-1:-1:-1;;6548:16:41;;;;:7;:16;;;;;;;;6541:23;;-1:-1:-1;;;;;;6541:23:41;;;6581:10;:19;;;;;6574:26;;;:::i;:::-;6616:22;;6630:7;;-1:-1:-1;;;;;6616:22:41;;;;;;;;6457:188;6408:237;:::o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:286:43:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:43;;209:43;;199:71;;266:1;263;256:12;199:71;289:5;14:286;-1:-1:-1;;;14:286:43:o;497:597::-;609:4;638:2;667;656:9;649:21;699:6;693:13;742:6;737:2;726:9;722:18;715:34;767:1;777:140;791:6;788:1;785:13;777:140;;;886:14;;;882:23;;876:30;852:17;;;871:2;848:26;841:66;806:10;;777:140;;;935:6;932:1;929:13;926:91;;;1005:1;1000:2;991:6;980:9;976:22;972:31;965:42;926:91;-1:-1:-1;1078:2:43;1057:15;-1:-1:-1;;1053:29:43;1038:45;;;;1085:2;1034:54;;497:597;-1:-1:-1;;;497:597:43:o;1099:180::-;1158:6;1211:2;1199:9;1190:7;1186:23;1182:32;1179:52;;;1227:1;1224;1217:12;1179:52;-1:-1:-1;1250:23:43;;1099:180;-1:-1:-1;1099:180:43:o;1284:173::-;1352:20;;-1:-1:-1;;;;;1401:31:43;;1391:42;;1381:70;;1447:1;1444;1437:12;1381:70;1284:173;;;:::o;1462:254::-;1530:6;1538;1591:2;1579:9;1570:7;1566:23;1562:32;1559:52;;;1607:1;1604;1597:12;1559:52;1630:29;1649:9;1630:29;:::i;:::-;1620:39;1706:2;1691:18;;;;1678:32;;-1:-1:-1;;;1462:254:43:o;1929:186::-;1988:6;2041:2;2029:9;2020:7;2016:23;2012:32;2009:52;;;2057:1;2054;2047:12;2009:52;2080:29;2099:9;2080:29;:::i;2302:380::-;2381:1;2377:12;;;;2424;;;2445:61;;2499:4;2491:6;2487:17;2477:27;;2445:61;2552:2;2544:6;2541:14;2521:18;2518:38;2515:161;;2598:10;2593:3;2589:20;2586:1;2579:31;2633:4;2630:1;2623:15;2661:4;2658:1;2651:15;2515:161;;2302:380;;;:::o;5567:222::-;5607:4;5635:1;5632;5629:8;5626:131;;;5679:10;5674:3;5670:20;5667:1;5660:31;5714:4;5711:1;5704:15;5742:4;5739:1;5732:15;5626:131;-1:-1:-1;5774:9:43;;5567:222::o",
  "language": "Solidity",
  "natspec": {
    "author": "Daccred.",
    "details": "Soulbound Token Base Template.       This contract was inspired by       https://github.com/ethereum/EIPs/blob/master/assets/eip-4973/ERC-4973.sol       This contract is inherited by any contract to implement the Soulbound       template.       Soulbound tokens  cannot be transferred when minted to a particular address.       This is the base instance of the contract,       it includes minting functions and revoke functions.       Inheriting functions can wrap around the specified functions.       Also, this base contract instance does not include a capped supply.",
    "kind": "dev",
    "methods": {
      "_getBaseURI()": {
        "details": "Returns already set baseURI if it exists.",
        "notice": "Callable by anyone.",
        "returns": {
          "_baseURI": "baseURI set."
        }
      },
      "balanceOf(address)": {
        "details": "ABTs assigned to the zero address are considered invalid, and this  function throws for queries about the zero address.",
        "notice": "Count all ABTs assigned to an owner",
        "params": {
          "owner": "An address for whom to query the balance"
        },
        "returns": {
          "_0": "The number of ABTs owned by `owner`, possibly zero"
        }
      },
      "burn(uint256)": {
        "details": "Must emit a `event Revoke` with the `address to` field pointing to  the zero address.",
        "notice": "Destroys `tokenId`. At any time, an ABT receiver must be able to  disassociate themselves from an ABT publicly through calling this  function.",
        "params": {
          "tokenId": "The identifier for an ABT"
        }
      },
      "constructor": {
        "details": "Allows the deployer to set a name and a symbol for the token."
      },
      "isMinted(address,uint256)": {
        "details": "Returns true if token `_tokenId` was minted from this contract to `_to`.       `_to` must not be a 0 address.       `_tokenId` must be an existent token.",
        "notice": "Callable by anyone.",
        "params": {
          "_to": "Address to which token `_tokenId` is minted.",
          "_tokenId": "Token minted."
        },
        "returns": {
          "_0": "bool true or false."
        }
      },
      "issuerOf(address,uint256)": {
        "details": "Since a token cannnot be minted twice.       This function returns the address that minted token `_tokenId` to `_to`,       otherwise this contract.       `_to` must not be a 0 address.       `_tokenId` must be an existent token.       Owner of _tokenId must be _to.",
        "notice": "Callable by anyone.",
        "params": {
          "_to": "Address to which token `_tokenId` is minted.",
          "_tokenId": "Token minted."
        },
        "returns": {
          "_0": "address of issuer."
        }
      },
      "ownerOf(uint256)": {
        "details": "ABTs assigned to zero address are considered invalid, and queries  about them do throw.",
        "notice": "Find the address bound to an ERC4973 account-bound token",
        "params": {
          "tokenId": "The identifier for an ABT"
        },
        "returns": {
          "_0": "The address of the owner bound to the ABT"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "stateVariables": {
      "baseURI": {
        "details": "Stores the base URI on cases when the user wants to mint a token,       it automatically generates a string casted tokenURI using the       generateTokenURI function. This variable can only be modified by       the allowlist owner."
      },
      "mints": {
        "details": "Mapping of speific addresses to tokenIds and boolean for mint records."
      }
    },
    "title": "Soulbound Token Contract.",
    "version": 1
  },
  "offset": [
    802,
    7675
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x159 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0xC9DD94C7 EQ PUSH2 0x195 JUMPI DUP1 PUSH4 0xFB8F198D EQ PUSH2 0x19D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xCB JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0xE0 JUMPI DUP1 PUSH4 0x5899E7B2 EQ PUSH2 0xF5 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x12E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0xB1 CALLDATASIZE PUSH1 0x4 PUSH2 0x785 JUMP JUMPDEST PUSH2 0x1B0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD3 PUSH2 0x202 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC2 SWAP2 SWAP1 PUSH2 0x7B6 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0xEE CALLDATASIZE PUSH1 0x4 PUSH2 0x80B JUMP JUMPDEST PUSH2 0x294 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xB6 PUSH2 0x103 CALLDATASIZE PUSH1 0x4 PUSH2 0x840 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x141 PUSH2 0x13C CALLDATASIZE PUSH1 0x4 PUSH2 0x80B JUMP JUMPDEST PUSH2 0x30E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC2 JUMP JUMPDEST PUSH2 0x16C PUSH2 0x167 CALLDATASIZE PUSH1 0x4 PUSH2 0x86A JUMP JUMPDEST PUSH2 0x373 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC2 JUMP JUMPDEST PUSH2 0xD3 PUSH2 0x3FC JUMP JUMPDEST PUSH2 0xD3 PUSH2 0x190 CALLDATASIZE PUSH1 0x4 PUSH2 0x80B JUMP JUMPDEST PUSH2 0x40B JUMP JUMPDEST PUSH2 0xD3 PUSH2 0x510 JUMP JUMPDEST PUSH2 0x141 PUSH2 0x1AB CALLDATASIZE PUSH1 0x4 PUSH2 0x840 JUMP JUMPDEST PUSH2 0x56D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x1E1 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5164CF47 PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x1FC JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x211 SWAP1 PUSH2 0x885 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x23D SWAP1 PUSH2 0x885 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x28A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x25F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x28A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x26D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x29D DUP2 PUSH2 0x30E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x302 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6275726E3A2073656E646572206D757374206265206F776E6572000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x30B DUP2 PUSH2 0x690 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x1FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F776E65724F663A20746F6B656E20646F65736E277420657869737400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2F9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x3E0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x62616C616E63654F663A2061646472657373207A65726F206973206E6F742061 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x103B30B634B21037BBB732B9 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2F9 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x211 SWAP1 PUSH2 0x885 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x472 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x746F6B656E5552493A20746F6B656E20646F65736E2774206578697374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2F9 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x48B SWAP1 PUSH2 0x885 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x4B7 SWAP1 PUSH2 0x885 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x504 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4D9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x504 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4E7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x5 DUP1 SLOAD PUSH2 0x51F SWAP1 PUSH2 0x885 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SUB PUSH2 0x560 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x456D7074792062617365555249 PUSH1 0x98 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2F9 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH2 0x211 SWAP1 PUSH2 0x885 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x5C5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x517565727920666F72207A65726F20616464726573732E000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2F9 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x61F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x2737B716B2BC34B9BA32B73A103A37B5B2B717 PUSH1 0x69 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2F9 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x632 DUP4 PUSH2 0x30E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x688 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F6B656E206E6F74206F776E65642062792061646472657373000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2F9 JUMP JUMPDEST POP ADDRESS SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x69B DUP3 PUSH2 0x30E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP3 SWAP4 POP PUSH1 0x1 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0x6C9 SWAP1 DUP5 SWAP1 PUSH2 0x8BF JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE PUSH1 0x3 SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH2 0x6FD SWAP2 PUSH2 0x737 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH32 0xEC9AB91322523C899EDE7830EC9BFC992B5981CDCC27B91162FB23DE5791117B SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST POP DUP1 SLOAD PUSH2 0x743 SWAP1 PUSH2 0x885 JUMP JUMPDEST PUSH1 0x0 DUP3 SSTORE DUP1 PUSH1 0x1F LT PUSH2 0x753 JUMPI POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x30B SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x781 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x76D JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x797 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x7AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x7E3 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x7C7 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x7F5 JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x81D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x83B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x853 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x85C DUP4 PUSH2 0x824 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x87C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7AF DUP3 PUSH2 0x824 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x899 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x8B9 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x8DF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SUB SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF9 0xEF CHAINID 0x25 0xCD 0xEE 0xD4 CALLCODE SAR 0xAA CALLCODE LOG3 0x49 LOG3 0xED SWAP2 PUSH18 0x8C587A04B040AE19A27945BFD34A2264736F PUSH13 0x634300080F0033000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        802,
        7675
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "5": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "CALLVALUE",
      "path": "37"
    },
    "6": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "DUP1",
      "path": "37"
    },
    "7": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "ISZERO",
      "path": "37"
    },
    "8": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "12": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "DUP1",
      "path": "37"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "REVERT",
      "path": "37"
    },
    "16": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "17": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "POP",
      "path": "37"
    },
    "18": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "CALLDATASIZE",
      "path": "37"
    },
    "21": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "LT",
      "path": "37"
    },
    "22": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x9E"
    },
    "25": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "26": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "CALLDATALOAD",
      "path": "37"
    },
    "29": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "SHR",
      "path": "37"
    },
    "32": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "DUP1",
      "path": "37"
    },
    "33": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "PUSH4",
      "path": "37",
      "value": "0x70A08231"
    },
    "38": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "GT",
      "path": "37"
    },
    "39": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x66"
    },
    "42": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "43": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "DUP1",
      "path": "37"
    },
    "44": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "PUSH4",
      "path": "37",
      "value": "0x70A08231"
    },
    "49": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "EQ",
      "path": "37"
    },
    "50": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x159"
    },
    "53": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "54": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "DUP1",
      "path": "37"
    },
    "55": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "PUSH4",
      "path": "37",
      "value": "0x95D89B41"
    },
    "60": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "EQ",
      "path": "37"
    },
    "61": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x17A"
    },
    "64": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "65": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "DUP1",
      "path": "37"
    },
    "66": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "PUSH4",
      "path": "37",
      "value": "0xC87B56DD"
    },
    "71": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "EQ",
      "path": "37"
    },
    "72": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x182"
    },
    "75": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "76": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "DUP1",
      "path": "37"
    },
    "77": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "PUSH4",
      "path": "37",
      "value": "0xC9DD94C7"
    },
    "82": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "EQ",
      "path": "37"
    },
    "83": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x195"
    },
    "86": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "87": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "DUP1",
      "path": "37"
    },
    "88": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "PUSH4",
      "path": "37",
      "value": "0xFB8F198D"
    },
    "93": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "EQ",
      "path": "37"
    },
    "94": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x19D"
    },
    "97": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "98": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "100": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "DUP1",
      "path": "37"
    },
    "101": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "REVERT",
      "path": "37"
    },
    "102": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "103": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "DUP1",
      "path": "37"
    },
    "104": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "PUSH4",
      "path": "37",
      "value": "0x1FFC9A7"
    },
    "109": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "EQ",
      "path": "37"
    },
    "110": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0xA3"
    },
    "113": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "114": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "DUP1",
      "path": "37"
    },
    "115": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "PUSH4",
      "path": "37",
      "value": "0x6FDDE03"
    },
    "120": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "EQ",
      "path": "37"
    },
    "121": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0xCB"
    },
    "124": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "125": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "DUP1",
      "path": "37"
    },
    "126": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "PUSH4",
      "path": "37",
      "value": "0x42966C68"
    },
    "131": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "EQ",
      "path": "37"
    },
    "132": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0xE0"
    },
    "135": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "136": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "DUP1",
      "path": "37"
    },
    "137": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "PUSH4",
      "path": "37",
      "value": "0x5899E7B2"
    },
    "142": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "EQ",
      "path": "37"
    },
    "143": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0xF5"
    },
    "146": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "147": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "DUP1",
      "path": "37"
    },
    "148": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "PUSH4",
      "path": "37",
      "value": "0x6352211E"
    },
    "153": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "EQ",
      "path": "37"
    },
    "154": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x12E"
    },
    "157": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "158": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "159": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "161": {
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "DUP1",
      "path": "37"
    },
    "162": {
      "first_revert": true,
      "fn": null,
      "offset": [
        802,
        7675
      ],
      "op": "REVERT",
      "path": "37"
    },
    "163": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4448,
        4776
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "164": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4448,
        4776
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0xB6"
    },
    "167": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4448,
        4776
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0xB1"
    },
    "170": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4448,
        4776
      ],
      "op": "CALLDATASIZE",
      "path": "41"
    },
    "171": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4448,
        4776
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x4"
    },
    "173": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4448,
        4776
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x785"
    },
    "176": {
      "fn": "ERC4973.supportsInterface",
      "jump": "i",
      "offset": [
        4448,
        4776
      ],
      "op": "JUMP",
      "path": "41"
    },
    "177": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4448,
        4776
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "178": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4448,
        4776
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x1B0"
    },
    "181": {
      "fn": "ERC4973.supportsInterface",
      "jump": "i",
      "offset": [
        4448,
        4776
      ],
      "op": "JUMP",
      "path": "41"
    },
    "182": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4448,
        4776
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "183": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4448,
        4776
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "185": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4448,
        4776
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "186": {
      "op": "SWAP1"
    },
    "187": {
      "op": "ISZERO"
    },
    "188": {
      "op": "ISZERO"
    },
    "189": {
      "op": "DUP2"
    },
    "190": {
      "op": "MSTORE"
    },
    "191": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "193": {
      "op": "ADD"
    },
    "194": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4448,
        4776
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "195": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4448,
        4776
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "197": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4448,
        4776
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "198": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4448,
        4776
      ],
      "op": "DUP1",
      "path": "41"
    },
    "199": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4448,
        4776
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "200": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4448,
        4776
      ],
      "op": "SUB",
      "path": "41"
    },
    "201": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4448,
        4776
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "202": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4448,
        4776
      ],
      "op": "RETURN",
      "path": "41"
    },
    "203": {
      "fn": "ERC4973.name",
      "offset": [
        4782,
        4880
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "204": {
      "fn": "ERC4973.name",
      "offset": [
        4782,
        4880
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0xD3"
    },
    "207": {
      "fn": "ERC4973.name",
      "offset": [
        4782,
        4880
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x202"
    },
    "210": {
      "fn": "ERC4973.name",
      "jump": "i",
      "offset": [
        4782,
        4880
      ],
      "op": "JUMP",
      "path": "41"
    },
    "211": {
      "fn": "ERC4973.name",
      "offset": [
        4782,
        4880
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "212": {
      "fn": "ERC4973.name",
      "offset": [
        4782,
        4880
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "214": {
      "fn": "ERC4973.name",
      "offset": [
        4782,
        4880
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "215": {
      "fn": "ERC4973.name",
      "offset": [
        4782,
        4880
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0xC2"
    },
    "218": {
      "fn": "ERC4973.name",
      "offset": [
        4782,
        4880
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "219": {
      "fn": "ERC4973.name",
      "offset": [
        4782,
        4880
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "220": {
      "fn": "ERC4973.name",
      "offset": [
        4782,
        4880
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x7B6"
    },
    "223": {
      "fn": "ERC4973.name",
      "jump": "i",
      "offset": [
        4782,
        4880
      ],
      "op": "JUMP",
      "path": "41"
    },
    "224": {
      "fn": "ERC4973.burn",
      "offset": [
        5243,
        5408
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "225": {
      "fn": "ERC4973.burn",
      "offset": [
        5243,
        5408
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0xF3"
    },
    "228": {
      "fn": "ERC4973.burn",
      "offset": [
        5243,
        5408
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0xEE"
    },
    "231": {
      "fn": "ERC4973.burn",
      "offset": [
        5243,
        5408
      ],
      "op": "CALLDATASIZE",
      "path": "41"
    },
    "232": {
      "fn": "ERC4973.burn",
      "offset": [
        5243,
        5408
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x4"
    },
    "234": {
      "fn": "ERC4973.burn",
      "offset": [
        5243,
        5408
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x80B"
    },
    "237": {
      "fn": "ERC4973.burn",
      "jump": "i",
      "offset": [
        5243,
        5408
      ],
      "op": "JUMP",
      "path": "41"
    },
    "238": {
      "fn": "ERC4973.burn",
      "offset": [
        5243,
        5408
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "239": {
      "fn": "ERC4973.burn",
      "offset": [
        5243,
        5408
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x294"
    },
    "242": {
      "fn": "ERC4973.burn",
      "jump": "i",
      "offset": [
        5243,
        5408
      ],
      "op": "JUMP",
      "path": "41"
    },
    "243": {
      "fn": "ERC4973.burn",
      "offset": [
        5243,
        5408
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "244": {
      "fn": "ERC4973.burn",
      "offset": [
        5243,
        5408
      ],
      "op": "STOP",
      "path": "41"
    },
    "245": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5225,
        5373
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "246": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5225,
        5373
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0xB6"
    },
    "249": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5225,
        5373
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x103"
    },
    "252": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5225,
        5373
      ],
      "op": "CALLDATASIZE",
      "path": "37"
    },
    "253": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5225,
        5373
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x4"
    },
    "255": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5225,
        5373
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x840"
    },
    "258": {
      "fn": "Soulbound.isMinted",
      "jump": "i",
      "offset": [
        5225,
        5373
      ],
      "op": "JUMP",
      "path": "37"
    },
    "259": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5225,
        5373
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "260": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "262": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "264": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "266": {
      "op": "SHL"
    },
    "267": {
      "op": "SUB"
    },
    "268": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5346,
        5356
      ],
      "op": "SWAP2",
      "path": "37",
      "statement": 0
    },
    "269": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5346,
        5356
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "270": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5346,
        5356
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "271": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5346,
        5356
      ],
      "op": "AND",
      "path": "37"
    },
    "272": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5319,
        5323
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "274": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5346,
        5356
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "275": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5346,
        5356
      ],
      "op": "DUP2",
      "path": "37"
    },
    "276": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5346,
        5356
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "277": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5346,
        5351
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x6"
    },
    "279": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5346,
        5356
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "281": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5346,
        5356
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "282": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5346,
        5356
      ],
      "op": "DUP2",
      "path": "37"
    },
    "283": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5346,
        5356
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "284": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5346,
        5356
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "286": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5346,
        5356
      ],
      "op": "DUP1",
      "path": "37"
    },
    "287": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5346,
        5356
      ],
      "op": "DUP4",
      "path": "37"
    },
    "288": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5346,
        5356
      ],
      "op": "KECCAK256",
      "path": "37"
    },
    "289": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5346,
        5366
      ],
      "op": "SWAP4",
      "path": "37"
    },
    "290": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5346,
        5366
      ],
      "op": "DUP4",
      "path": "37"
    },
    "291": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5346,
        5366
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "292": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5346,
        5366
      ],
      "op": "SWAP3",
      "path": "37"
    },
    "293": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5346,
        5366
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "294": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5346,
        5366
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "295": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5346,
        5366
      ],
      "op": "KECCAK256",
      "path": "37"
    },
    "296": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5346,
        5366
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "297": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5346,
        5366
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0xFF"
    },
    "299": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5346,
        5366
      ],
      "op": "AND",
      "path": "37"
    },
    "300": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5346,
        5366
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "301": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5225,
        5373
      ],
      "op": "JUMP",
      "path": "37"
    },
    "302": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5705,
        5918
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "303": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5705,
        5918
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x141"
    },
    "306": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5705,
        5918
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x13C"
    },
    "309": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5705,
        5918
      ],
      "op": "CALLDATASIZE",
      "path": "41"
    },
    "310": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5705,
        5918
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x4"
    },
    "312": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5705,
        5918
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x80B"
    },
    "315": {
      "fn": "ERC4973.ownerOf",
      "jump": "i",
      "offset": [
        5705,
        5918
      ],
      "op": "JUMP",
      "path": "41"
    },
    "316": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5705,
        5918
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "317": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5705,
        5918
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x30E"
    },
    "320": {
      "fn": "ERC4973.ownerOf",
      "jump": "i",
      "offset": [
        5705,
        5918
      ],
      "op": "JUMP",
      "path": "41"
    },
    "321": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5705,
        5918
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "322": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5705,
        5918
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "324": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5705,
        5918
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "325": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "327": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "329": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "331": {
      "op": "SHL"
    },
    "332": {
      "op": "SUB"
    },
    "333": {
      "op": "SWAP1"
    },
    "334": {
      "op": "SWAP2"
    },
    "335": {
      "op": "AND"
    },
    "336": {
      "op": "DUP2"
    },
    "337": {
      "op": "MSTORE"
    },
    "338": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "340": {
      "op": "ADD"
    },
    "341": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5705,
        5918
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0xC2"
    },
    "344": {
      "op": "JUMP"
    },
    "345": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5414,
        5699
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "346": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5414,
        5699
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x16C"
    },
    "349": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5414,
        5699
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x167"
    },
    "352": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5414,
        5699
      ],
      "op": "CALLDATASIZE",
      "path": "41"
    },
    "353": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5414,
        5699
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x4"
    },
    "355": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5414,
        5699
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x86A"
    },
    "358": {
      "fn": "ERC4973.balanceOf",
      "jump": "i",
      "offset": [
        5414,
        5699
      ],
      "op": "JUMP",
      "path": "41"
    },
    "359": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5414,
        5699
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "360": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5414,
        5699
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x373"
    },
    "363": {
      "fn": "ERC4973.balanceOf",
      "jump": "i",
      "offset": [
        5414,
        5699
      ],
      "op": "JUMP",
      "path": "41"
    },
    "364": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5414,
        5699
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "365": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5414,
        5699
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "367": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5414,
        5699
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "368": {
      "op": "SWAP1"
    },
    "369": {
      "op": "DUP2"
    },
    "370": {
      "op": "MSTORE"
    },
    "371": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "373": {
      "op": "ADD"
    },
    "374": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5414,
        5699
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0xC2"
    },
    "377": {
      "op": "JUMP"
    },
    "378": {
      "fn": "ERC4973.symbol",
      "offset": [
        4886,
        4988
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "379": {
      "fn": "ERC4973.symbol",
      "offset": [
        4886,
        4988
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0xD3"
    },
    "382": {
      "fn": "ERC4973.symbol",
      "offset": [
        4886,
        4988
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x3FC"
    },
    "385": {
      "fn": "ERC4973.symbol",
      "jump": "i",
      "offset": [
        4886,
        4988
      ],
      "op": "JUMP",
      "path": "41"
    },
    "386": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4994,
        5237
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "387": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4994,
        5237
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0xD3"
    },
    "390": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4994,
        5237
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x190"
    },
    "393": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4994,
        5237
      ],
      "op": "CALLDATASIZE",
      "path": "41"
    },
    "394": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4994,
        5237
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x4"
    },
    "396": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4994,
        5237
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x80B"
    },
    "399": {
      "fn": "ERC4973.tokenURI",
      "jump": "i",
      "offset": [
        4994,
        5237
      ],
      "op": "JUMP",
      "path": "41"
    },
    "400": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4994,
        5237
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "401": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4994,
        5237
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x40B"
    },
    "404": {
      "fn": "ERC4973.tokenURI",
      "jump": "i",
      "offset": [
        4994,
        5237
      ],
      "op": "JUMP",
      "path": "41"
    },
    "405": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7425,
        7673
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "406": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7425,
        7673
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0xD3"
    },
    "409": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7425,
        7673
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x510"
    },
    "412": {
      "fn": "Soulbound._getBaseURI",
      "jump": "i",
      "offset": [
        7425,
        7673
      ],
      "op": "JUMP",
      "path": "37"
    },
    "413": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4302,
        4822
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "414": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4302,
        4822
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x141"
    },
    "417": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4302,
        4822
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1AB"
    },
    "420": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4302,
        4822
      ],
      "op": "CALLDATASIZE",
      "path": "37"
    },
    "421": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4302,
        4822
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x4"
    },
    "423": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4302,
        4822
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x840"
    },
    "426": {
      "fn": "Soulbound.issuerOf",
      "jump": "i",
      "offset": [
        4302,
        4822
      ],
      "op": "JUMP",
      "path": "37"
    },
    "427": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4302,
        4822
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "428": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4302,
        4822
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x56D"
    },
    "431": {
      "fn": "Soulbound.issuerOf",
      "jump": "i",
      "offset": [
        4302,
        4822
      ],
      "op": "JUMP",
      "path": "37"
    },
    "432": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4448,
        4776
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "433": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4573,
        4577
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x0"
    },
    "435": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "437": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "439": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "441": {
      "op": "SHL"
    },
    "442": {
      "op": "SUB"
    },
    "443": {
      "op": "NOT"
    },
    "444": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4612,
        4660
      ],
      "op": "DUP3",
      "path": "41",
      "statement": 1
    },
    "445": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4612,
        4660
      ],
      "op": "AND",
      "path": "41"
    },
    "446": {
      "op": "PUSH4",
      "value": "0x5B5E139F"
    },
    "451": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "453": {
      "op": "SHL"
    },
    "454": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4612,
        4660
      ],
      "op": "EQ",
      "path": "41"
    },
    "455": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4612,
        4660
      ],
      "op": "DUP1",
      "path": "41"
    },
    "456": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4612,
        4717
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x1E1"
    },
    "459": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4612,
        4717
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "460": {
      "op": "POP"
    },
    "461": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "463": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "465": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "467": {
      "op": "SHL"
    },
    "468": {
      "op": "SUB"
    },
    "469": {
      "op": "NOT"
    },
    "470": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4676,
        4717
      ],
      "op": "DUP3",
      "path": "41"
    },
    "471": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4676,
        4717
      ],
      "op": "AND",
      "path": "41"
    },
    "472": {
      "op": "PUSH4",
      "value": "0x5164CF47"
    },
    "477": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "479": {
      "op": "SHL"
    },
    "480": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4676,
        4717
      ],
      "op": "EQ",
      "path": "41"
    },
    "481": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4612,
        4717
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "482": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4612,
        4769
      ],
      "op": "DUP1",
      "path": "41"
    },
    "483": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4612,
        4769
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x1FC"
    },
    "486": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4612,
        4769
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "487": {
      "op": "POP"
    },
    "488": {
      "op": "PUSH4",
      "value": "0x1FFC9A7"
    },
    "493": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "495": {
      "op": "SHL"
    },
    "496": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "498": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "500": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "502": {
      "op": "SHL"
    },
    "503": {
      "op": "SUB"
    },
    "504": {
      "op": "NOT"
    },
    "505": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        1757,
        1797
      ],
      "op": "DUP4",
      "path": "41",
      "statement": 2
    },
    "506": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        1757,
        1797
      ],
      "op": "AND",
      "path": "41"
    },
    "507": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        1757,
        1797
      ],
      "op": "EQ",
      "path": "41"
    },
    "508": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4733,
        4769
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "509": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4593,
        4769
      ],
      "op": "SWAP3",
      "path": "41"
    },
    "510": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4448,
        4776
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "511": {
      "op": "POP"
    },
    "512": {
      "op": "POP"
    },
    "513": {
      "fn": "ERC4973.supportsInterface",
      "jump": "o",
      "offset": [
        4448,
        4776
      ],
      "op": "JUMP",
      "path": "41"
    },
    "514": {
      "fn": "ERC4973.name",
      "offset": [
        4782,
        4880
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "515": {
      "fn": "ERC4973.name",
      "offset": [
        4836,
        4849
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x60"
    },
    "517": {
      "fn": "ERC4973.name",
      "offset": [
        4868,
        4873
      ],
      "op": "PUSH1",
      "path": "41",
      "statement": 3,
      "value": "0x0"
    },
    "519": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "DUP1",
      "path": "41"
    },
    "520": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "521": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x211"
    },
    "524": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "525": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x885"
    },
    "528": {
      "fn": "ERC4973.name",
      "jump": "i",
      "offset": [
        4861,
        4873
      ],
      "op": "JUMP",
      "path": "41"
    },
    "529": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "530": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "DUP1",
      "path": "41"
    },
    "531": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x1F"
    },
    "533": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "ADD",
      "path": "41"
    },
    "534": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x20"
    },
    "536": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "DUP1",
      "path": "41"
    },
    "537": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "538": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "DIV",
      "path": "41"
    },
    "539": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "MUL",
      "path": "41"
    },
    "540": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x20"
    },
    "542": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "ADD",
      "path": "41"
    },
    "543": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "545": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "546": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "547": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "DUP2",
      "path": "41"
    },
    "548": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "ADD",
      "path": "41"
    },
    "549": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "551": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "552": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "DUP1",
      "path": "41"
    },
    "553": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "SWAP3",
      "path": "41"
    },
    "554": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "555": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "556": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "DUP2",
      "path": "41"
    },
    "557": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "DUP2",
      "path": "41"
    },
    "558": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "559": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x20"
    },
    "561": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "ADD",
      "path": "41"
    },
    "562": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "DUP3",
      "path": "41"
    },
    "563": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "DUP1",
      "path": "41"
    },
    "564": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "565": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x23D"
    },
    "568": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "569": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x885"
    },
    "572": {
      "fn": "ERC4973.name",
      "jump": "i",
      "offset": [
        4861,
        4873
      ],
      "op": "JUMP",
      "path": "41"
    },
    "573": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "574": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "DUP1",
      "path": "41"
    },
    "575": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "ISZERO",
      "path": "41"
    },
    "576": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x28A"
    },
    "579": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "580": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "DUP1",
      "path": "41"
    },
    "581": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x1F"
    },
    "583": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "LT",
      "path": "41"
    },
    "584": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x25F"
    },
    "587": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "588": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x100"
    },
    "591": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "DUP1",
      "path": "41"
    },
    "592": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "DUP4",
      "path": "41"
    },
    "593": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "594": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "DIV",
      "path": "41"
    },
    "595": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "MUL",
      "path": "41"
    },
    "596": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "DUP4",
      "path": "41"
    },
    "597": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "598": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "599": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x20"
    },
    "601": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "ADD",
      "path": "41"
    },
    "602": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "603": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x28A"
    },
    "606": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "JUMP",
      "path": "41"
    },
    "607": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "608": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "DUP3",
      "path": "41"
    },
    "609": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "ADD",
      "path": "41"
    },
    "610": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "611": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "612": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x0"
    },
    "614": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "615": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x20"
    },
    "617": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x0"
    },
    "619": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "KECCAK256",
      "path": "41"
    },
    "620": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "621": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "622": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "DUP2",
      "path": "41"
    },
    "623": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "624": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "DUP2",
      "path": "41"
    },
    "625": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "626": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "627": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x1"
    },
    "629": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "ADD",
      "path": "41"
    },
    "630": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "631": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x20"
    },
    "633": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "ADD",
      "path": "41"
    },
    "634": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "DUP1",
      "path": "41"
    },
    "635": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "DUP4",
      "path": "41"
    },
    "636": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "GT",
      "path": "41"
    },
    "637": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x26D"
    },
    "640": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "641": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "DUP3",
      "path": "41"
    },
    "642": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "643": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "SUB",
      "path": "41"
    },
    "644": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x1F"
    },
    "646": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "AND",
      "path": "41"
    },
    "647": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "DUP3",
      "path": "41"
    },
    "648": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "ADD",
      "path": "41"
    },
    "649": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "650": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "651": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "POP",
      "path": "41"
    },
    "652": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "POP",
      "path": "41"
    },
    "653": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "POP",
      "path": "41"
    },
    "654": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "POP",
      "path": "41"
    },
    "655": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "POP",
      "path": "41"
    },
    "656": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "657": {
      "fn": "ERC4973.name",
      "offset": [
        4861,
        4873
      ],
      "op": "POP",
      "path": "41"
    },
    "658": {
      "fn": "ERC4973.name",
      "offset": [
        4782,
        4880
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "659": {
      "fn": "ERC4973.name",
      "jump": "o",
      "offset": [
        4782,
        4880
      ],
      "op": "JUMP",
      "path": "41"
    },
    "660": {
      "fn": "ERC4973.burn",
      "offset": [
        5243,
        5408
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "661": {
      "fn": "ERC4973.burn",
      "offset": [
        5330,
        5346
      ],
      "op": "PUSH2",
      "path": "41",
      "statement": 4,
      "value": "0x29D"
    },
    "664": {
      "fn": "ERC4973.burn",
      "offset": [
        5338,
        5345
      ],
      "op": "DUP2",
      "path": "41"
    },
    "665": {
      "fn": "ERC4973.burn",
      "offset": [
        5330,
        5337
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x30E"
    },
    "668": {
      "fn": "ERC4973.burn",
      "jump": "i",
      "offset": [
        5330,
        5346
      ],
      "op": "JUMP",
      "path": "41"
    },
    "669": {
      "fn": "ERC4973.burn",
      "offset": [
        5330,
        5346
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "670": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "672": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "674": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "676": {
      "op": "SHL"
    },
    "677": {
      "op": "SUB"
    },
    "678": {
      "fn": "ERC4973.burn",
      "offset": [
        5316,
        5346
      ],
      "op": "AND",
      "path": "41"
    },
    "679": {
      "fn": "ERC4973.burn",
      "offset": [
        5316,
        5326
      ],
      "op": "CALLER",
      "path": "41"
    },
    "680": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "682": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "684": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "686": {
      "op": "SHL"
    },
    "687": {
      "op": "SUB"
    },
    "688": {
      "fn": "ERC4973.burn",
      "offset": [
        5316,
        5346
      ],
      "op": "AND",
      "path": "41"
    },
    "689": {
      "branch": 26,
      "fn": "ERC4973.burn",
      "offset": [
        5316,
        5346
      ],
      "op": "EQ",
      "path": "41"
    },
    "690": {
      "fn": "ERC4973.burn",
      "offset": [
        5308,
        5377
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x302"
    },
    "693": {
      "branch": 26,
      "fn": "ERC4973.burn",
      "offset": [
        5308,
        5377
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "694": {
      "fn": "ERC4973.burn",
      "offset": [
        5308,
        5377
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "696": {
      "fn": "ERC4973.burn",
      "offset": [
        5308,
        5377
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "697": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "701": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "703": {
      "op": "SHL"
    },
    "704": {
      "fn": "ERC4973.burn",
      "offset": [
        5308,
        5377
      ],
      "op": "DUP2",
      "path": "41"
    },
    "705": {
      "fn": "ERC4973.burn",
      "offset": [
        5308,
        5377
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "706": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "708": {
      "fn": "ERC4973.burn",
      "offset": [
        5308,
        5377
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x4"
    },
    "710": {
      "fn": "ERC4973.burn",
      "offset": [
        5308,
        5377
      ],
      "op": "DUP3",
      "path": "41"
    },
    "711": {
      "fn": "ERC4973.burn",
      "offset": [
        5308,
        5377
      ],
      "op": "ADD",
      "path": "41"
    },
    "712": {
      "op": "MSTORE"
    },
    "713": {
      "op": "PUSH1",
      "value": "0x1A"
    },
    "715": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "717": {
      "op": "DUP3"
    },
    "718": {
      "op": "ADD"
    },
    "719": {
      "op": "MSTORE"
    },
    "720": {
      "op": "PUSH32",
      "value": "0x6275726E3A2073656E646572206D757374206265206F776E6572000000000000"
    },
    "753": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "755": {
      "op": "DUP3"
    },
    "756": {
      "op": "ADD"
    },
    "757": {
      "op": "MSTORE"
    },
    "758": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "760": {
      "op": "ADD"
    },
    "761": {
      "fn": "ERC4973.burn",
      "offset": [
        5308,
        5377
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "762": {
      "fn": "ERC4973.burn",
      "offset": [
        5308,
        5377
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "764": {
      "fn": "ERC4973.burn",
      "offset": [
        5308,
        5377
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "765": {
      "fn": "ERC4973.burn",
      "offset": [
        5308,
        5377
      ],
      "op": "DUP1",
      "path": "41"
    },
    "766": {
      "fn": "ERC4973.burn",
      "offset": [
        5308,
        5377
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "767": {
      "fn": "ERC4973.burn",
      "offset": [
        5308,
        5377
      ],
      "op": "SUB",
      "path": "41"
    },
    "768": {
      "fn": "ERC4973.burn",
      "offset": [
        5308,
        5377
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "769": {
      "fn": "ERC4973.burn",
      "offset": [
        5308,
        5377
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "41"
    },
    "770": {
      "fn": "ERC4973.burn",
      "offset": [
        5308,
        5377
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "771": {
      "fn": "ERC4973.burn",
      "offset": [
        5387,
        5401
      ],
      "op": "PUSH2",
      "path": "41",
      "statement": 5,
      "value": "0x30B"
    },
    "774": {
      "fn": "ERC4973.burn",
      "offset": [
        5393,
        5400
      ],
      "op": "DUP2",
      "path": "41"
    },
    "775": {
      "fn": "ERC4973.burn",
      "offset": [
        5387,
        5392
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x690"
    },
    "778": {
      "fn": "ERC4973.burn",
      "jump": "i",
      "offset": [
        5387,
        5401
      ],
      "op": "JUMP",
      "path": "41"
    },
    "779": {
      "fn": "ERC4973.burn",
      "offset": [
        5387,
        5401
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "780": {
      "fn": "ERC4973.burn",
      "offset": [
        5243,
        5408
      ],
      "op": "POP",
      "path": "41"
    },
    "781": {
      "fn": "ERC4973.burn",
      "jump": "o",
      "offset": [
        5243,
        5408
      ],
      "op": "JUMP",
      "path": "41"
    },
    "782": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5705,
        5918
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "783": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5768,
        5775
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x0"
    },
    "785": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5803,
        5819
      ],
      "op": "DUP2",
      "path": "41"
    },
    "786": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5803,
        5819
      ],
      "op": "DUP2",
      "path": "41"
    },
    "787": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5803,
        5819
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "788": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5803,
        5810
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x2"
    },
    "790": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5803,
        5819
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x20"
    },
    "792": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5803,
        5819
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "793": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5803,
        5819
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "795": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5803,
        5819
      ],
      "op": "DUP2",
      "path": "41"
    },
    "796": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5803,
        5819
      ],
      "op": "KECCAK256",
      "path": "41"
    },
    "797": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5803,
        5819
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "798": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "800": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "802": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "804": {
      "op": "SHL"
    },
    "805": {
      "op": "SUB"
    },
    "806": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5803,
        5819
      ],
      "op": "AND",
      "path": "41"
    },
    "807": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5803,
        5819
      ],
      "op": "DUP1",
      "path": "41"
    },
    "808": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5829,
        5889
      ],
      "op": "PUSH2",
      "path": "41",
      "statement": 6,
      "value": "0x1FC"
    },
    "811": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5829,
        5889
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "812": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5829,
        5889
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "814": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5829,
        5889
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "815": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "819": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "821": {
      "op": "SHL"
    },
    "822": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5829,
        5889
      ],
      "op": "DUP2",
      "path": "41"
    },
    "823": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5829,
        5889
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "824": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "826": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5829,
        5889
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x4"
    },
    "828": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5829,
        5889
      ],
      "op": "DUP3",
      "path": "41"
    },
    "829": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5829,
        5889
      ],
      "op": "ADD",
      "path": "41"
    },
    "830": {
      "op": "MSTORE"
    },
    "831": {
      "op": "PUSH1",
      "value": "0x1C"
    },
    "833": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "835": {
      "op": "DUP3"
    },
    "836": {
      "op": "ADD"
    },
    "837": {
      "op": "MSTORE"
    },
    "838": {
      "op": "PUSH32",
      "value": "0x6F776E65724F663A20746F6B656E20646F65736E277420657869737400000000"
    },
    "871": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "873": {
      "op": "DUP3"
    },
    "874": {
      "op": "ADD"
    },
    "875": {
      "op": "MSTORE"
    },
    "876": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "878": {
      "op": "ADD"
    },
    "879": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5829,
        5889
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x2F9"
    },
    "882": {
      "op": "JUMP"
    },
    "883": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5414,
        5699
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "884": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5526,
        5533
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x0"
    },
    "886": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "888": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "890": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "892": {
      "op": "SHL"
    },
    "893": {
      "op": "SUB"
    },
    "894": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5570,
        5589
      ],
      "op": "DUP3",
      "path": "41",
      "statement": 7
    },
    "895": {
      "branch": 27,
      "fn": "ERC4973.balanceOf",
      "offset": [
        5570,
        5589
      ],
      "op": "AND",
      "path": "41"
    },
    "896": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5549,
        5659
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x3E0"
    },
    "899": {
      "branch": 27,
      "fn": "ERC4973.balanceOf",
      "offset": [
        5549,
        5659
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "900": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5549,
        5659
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "902": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5549,
        5659
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "903": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "907": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "909": {
      "op": "SHL"
    },
    "910": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5549,
        5659
      ],
      "op": "DUP2",
      "path": "41"
    },
    "911": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5549,
        5659
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "912": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "914": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5549,
        5659
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x4"
    },
    "916": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5549,
        5659
      ],
      "op": "DUP3",
      "path": "41"
    },
    "917": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5549,
        5659
      ],
      "op": "ADD",
      "path": "41"
    },
    "918": {
      "op": "MSTORE"
    },
    "919": {
      "op": "PUSH1",
      "value": "0x2C"
    },
    "921": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "923": {
      "op": "DUP3"
    },
    "924": {
      "op": "ADD"
    },
    "925": {
      "op": "MSTORE"
    },
    "926": {
      "op": "PUSH32",
      "value": "0x62616C616E63654F663A2061646472657373207A65726F206973206E6F742061"
    },
    "959": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "961": {
      "op": "DUP3"
    },
    "962": {
      "op": "ADD"
    },
    "963": {
      "op": "MSTORE"
    },
    "964": {
      "op": "PUSH12",
      "value": "0x103B30B634B21037BBB732B9"
    },
    "977": {
      "op": "PUSH1",
      "value": "0xA1"
    },
    "979": {
      "op": "SHL"
    },
    "980": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "982": {
      "op": "DUP3"
    },
    "983": {
      "op": "ADD"
    },
    "984": {
      "op": "MSTORE"
    },
    "985": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "987": {
      "op": "ADD"
    },
    "988": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5549,
        5659
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x2F9"
    },
    "991": {
      "op": "JUMP"
    },
    "992": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5549,
        5659
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "993": {
      "op": "POP"
    },
    "994": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "996": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "998": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1000": {
      "op": "SHL"
    },
    "1001": {
      "op": "SUB"
    },
    "1002": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5676,
        5692
      ],
      "op": "AND",
      "path": "41",
      "statement": 8
    },
    "1003": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5676,
        5692
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x0"
    },
    "1005": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5676,
        5692
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1006": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5676,
        5692
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1007": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5676,
        5692
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1008": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5676,
        5685
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x4"
    },
    "1010": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5676,
        5692
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x20"
    },
    "1012": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5676,
        5692
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1013": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5676,
        5692
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "1015": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5676,
        5692
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1016": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5676,
        5692
      ],
      "op": "KECCAK256",
      "path": "41"
    },
    "1017": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5676,
        5692
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "1018": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5676,
        5692
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1019": {
      "fn": "ERC4973.balanceOf",
      "jump": "o",
      "offset": [
        5414,
        5699
      ],
      "op": "JUMP",
      "path": "41"
    },
    "1020": {
      "fn": "ERC4973.symbol",
      "offset": [
        4886,
        4988
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "1021": {
      "fn": "ERC4973.symbol",
      "offset": [
        4942,
        4955
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x60"
    },
    "1023": {
      "fn": "ERC4973.symbol",
      "offset": [
        4974,
        4981
      ],
      "op": "PUSH1",
      "path": "41",
      "statement": 9,
      "value": "0x1"
    },
    "1025": {
      "fn": "ERC4973.symbol",
      "offset": [
        4967,
        4981
      ],
      "op": "DUP1",
      "path": "41"
    },
    "1026": {
      "fn": "ERC4973.symbol",
      "offset": [
        4967,
        4981
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "1027": {
      "fn": "ERC4973.symbol",
      "offset": [
        4967,
        4981
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x211"
    },
    "1030": {
      "fn": "ERC4973.symbol",
      "offset": [
        4967,
        4981
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1031": {
      "fn": "ERC4973.symbol",
      "offset": [
        4967,
        4981
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x885"
    },
    "1034": {
      "fn": "ERC4973.symbol",
      "jump": "i",
      "offset": [
        4967,
        4981
      ],
      "op": "JUMP",
      "path": "41"
    },
    "1035": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4994,
        5237
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "1036": {
      "fn": "ERC4973._exists",
      "offset": [
        5989,
        5993
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x0"
    },
    "1038": {
      "fn": "ERC4973._exists",
      "offset": [
        6012,
        6028
      ],
      "op": "DUP2",
      "path": "41",
      "statement": 10
    },
    "1039": {
      "fn": "ERC4973._exists",
      "offset": [
        6012,
        6028
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1040": {
      "fn": "ERC4973._exists",
      "offset": [
        6012,
        6028
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1041": {
      "fn": "ERC4973._exists",
      "offset": [
        6012,
        6019
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x2"
    },
    "1043": {
      "fn": "ERC4973._exists",
      "offset": [
        6012,
        6028
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x20"
    },
    "1045": {
      "fn": "ERC4973._exists",
      "offset": [
        6012,
        6028
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1046": {
      "fn": "ERC4973._exists",
      "offset": [
        6012,
        6028
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "1048": {
      "fn": "ERC4973._exists",
      "offset": [
        6012,
        6028
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1049": {
      "fn": "ERC4973._exists",
      "offset": [
        6012,
        6028
      ],
      "op": "KECCAK256",
      "path": "41"
    },
    "1050": {
      "fn": "ERC4973._exists",
      "offset": [
        6012,
        6028
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "1051": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5107,
        5120
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x60"
    },
    "1053": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5107,
        5120
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1054": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1056": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1058": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1060": {
      "op": "SHL"
    },
    "1061": {
      "op": "SUB"
    },
    "1062": {
      "fn": "ERC4973._exists",
      "offset": [
        6012,
        6028
      ],
      "op": "AND",
      "path": "41"
    },
    "1063": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5136,
        5194
      ],
      "op": "PUSH2",
      "path": "41",
      "statement": 11,
      "value": "0x472"
    },
    "1066": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5136,
        5194
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "1067": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5136,
        5194
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "1069": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5136,
        5194
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "1070": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1074": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1076": {
      "op": "SHL"
    },
    "1077": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5136,
        5194
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1078": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5136,
        5194
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1079": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1081": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5136,
        5194
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x4"
    },
    "1083": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5136,
        5194
      ],
      "op": "DUP3",
      "path": "41"
    },
    "1084": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5136,
        5194
      ],
      "op": "ADD",
      "path": "41"
    },
    "1085": {
      "op": "MSTORE"
    },
    "1086": {
      "op": "PUSH1",
      "value": "0x1D"
    },
    "1088": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1090": {
      "op": "DUP3"
    },
    "1091": {
      "op": "ADD"
    },
    "1092": {
      "op": "MSTORE"
    },
    "1093": {
      "op": "PUSH32",
      "value": "0x746F6B656E5552493A20746F6B656E20646F65736E2774206578697374000000"
    },
    "1126": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1128": {
      "op": "DUP3"
    },
    "1129": {
      "op": "ADD"
    },
    "1130": {
      "op": "MSTORE"
    },
    "1131": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1133": {
      "op": "ADD"
    },
    "1134": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5136,
        5194
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x2F9"
    },
    "1137": {
      "op": "JUMP"
    },
    "1138": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5136,
        5194
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "1139": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5211,
        5230
      ],
      "op": "PUSH1",
      "path": "41",
      "statement": 12,
      "value": "0x0"
    },
    "1141": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5211,
        5230
      ],
      "op": "DUP3",
      "path": "41"
    },
    "1142": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5211,
        5230
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1143": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5211,
        5230
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1144": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5211,
        5221
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x3"
    },
    "1146": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5211,
        5230
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x20"
    },
    "1148": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5211,
        5230
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1149": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5211,
        5230
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "1151": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5211,
        5230
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1152": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5211,
        5230
      ],
      "op": "KECCAK256",
      "path": "41"
    },
    "1153": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "DUP1",
      "path": "41"
    },
    "1154": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "1155": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x48B"
    },
    "1158": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1159": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x885"
    },
    "1162": {
      "fn": "ERC4973.tokenURI",
      "jump": "i",
      "offset": [
        5204,
        5230
      ],
      "op": "JUMP",
      "path": "41"
    },
    "1163": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "1164": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "DUP1",
      "path": "41"
    },
    "1165": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x1F"
    },
    "1167": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "ADD",
      "path": "41"
    },
    "1168": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x20"
    },
    "1170": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "DUP1",
      "path": "41"
    },
    "1171": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1172": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "DIV",
      "path": "41"
    },
    "1173": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "MUL",
      "path": "41"
    },
    "1174": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x20"
    },
    "1176": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "ADD",
      "path": "41"
    },
    "1177": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "1179": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "1180": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1181": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1182": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "ADD",
      "path": "41"
    },
    "1183": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "1185": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1186": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "DUP1",
      "path": "41"
    },
    "1187": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "SWAP3",
      "path": "41"
    },
    "1188": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1189": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1190": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1191": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1192": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1193": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x20"
    },
    "1195": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "ADD",
      "path": "41"
    },
    "1196": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "DUP3",
      "path": "41"
    },
    "1197": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "DUP1",
      "path": "41"
    },
    "1198": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "1199": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x4B7"
    },
    "1202": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1203": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x885"
    },
    "1206": {
      "fn": "ERC4973.tokenURI",
      "jump": "i",
      "offset": [
        5204,
        5230
      ],
      "op": "JUMP",
      "path": "41"
    },
    "1207": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "1208": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "DUP1",
      "path": "41"
    },
    "1209": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "ISZERO",
      "path": "41"
    },
    "1210": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x504"
    },
    "1213": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "1214": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "DUP1",
      "path": "41"
    },
    "1215": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x1F"
    },
    "1217": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "LT",
      "path": "41"
    },
    "1218": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x4D9"
    },
    "1221": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "1222": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x100"
    },
    "1225": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "DUP1",
      "path": "41"
    },
    "1226": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "DUP4",
      "path": "41"
    },
    "1227": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "1228": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "DIV",
      "path": "41"
    },
    "1229": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "MUL",
      "path": "41"
    },
    "1230": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "DUP4",
      "path": "41"
    },
    "1231": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1232": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1233": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x20"
    },
    "1235": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "ADD",
      "path": "41"
    },
    "1236": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1237": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x504"
    },
    "1240": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "JUMP",
      "path": "41"
    },
    "1241": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "1242": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "DUP3",
      "path": "41"
    },
    "1243": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "ADD",
      "path": "41"
    },
    "1244": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1245": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1246": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x0"
    },
    "1248": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1249": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x20"
    },
    "1251": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x0"
    },
    "1253": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "KECCAK256",
      "path": "41"
    },
    "1254": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1255": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "1256": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1257": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "1258": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1259": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1260": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1261": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x1"
    },
    "1263": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "ADD",
      "path": "41"
    },
    "1264": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1265": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x20"
    },
    "1267": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "ADD",
      "path": "41"
    },
    "1268": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "DUP1",
      "path": "41"
    },
    "1269": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "DUP4",
      "path": "41"
    },
    "1270": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "GT",
      "path": "41"
    },
    "1271": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x4E7"
    },
    "1274": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "1275": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "DUP3",
      "path": "41"
    },
    "1276": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1277": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "SUB",
      "path": "41"
    },
    "1278": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x1F"
    },
    "1280": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "AND",
      "path": "41"
    },
    "1281": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "DUP3",
      "path": "41"
    },
    "1282": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "ADD",
      "path": "41"
    },
    "1283": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1284": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "1285": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "POP",
      "path": "41"
    },
    "1286": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "POP",
      "path": "41"
    },
    "1287": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "POP",
      "path": "41"
    },
    "1288": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "POP",
      "path": "41"
    },
    "1289": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "POP",
      "path": "41"
    },
    "1290": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1291": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        5204,
        5230
      ],
      "op": "POP",
      "path": "41"
    },
    "1292": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4994,
        5237
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1293": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4994,
        5237
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1294": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4994,
        5237
      ],
      "op": "POP",
      "path": "41"
    },
    "1295": {
      "fn": "ERC4973.tokenURI",
      "jump": "o",
      "offset": [
        4994,
        5237
      ],
      "op": "JUMP",
      "path": "41"
    },
    "1296": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7425,
        7673
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "1297": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7469,
        7491
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x60"
    },
    "1299": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7567,
        7574
      ],
      "op": "PUSH1",
      "path": "37",
      "statement": 13,
      "value": "0x5"
    },
    "1301": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7561,
        7582
      ],
      "op": "DUP1",
      "path": "37"
    },
    "1302": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7561,
        7582
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "1303": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7561,
        7582
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x51F"
    },
    "1306": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7561,
        7582
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "1307": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7561,
        7582
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x885"
    },
    "1310": {
      "fn": "Soulbound._getBaseURI",
      "jump": "i",
      "offset": [
        7561,
        7582
      ],
      "op": "JUMP",
      "path": "37"
    },
    "1311": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7561,
        7582
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "1312": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7561,
        7582
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "1313": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7561,
        7582
      ],
      "op": "POP",
      "path": "37"
    },
    "1314": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7586,
        7587
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "1316": {
      "branch": 23,
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7561,
        7587
      ],
      "op": "SUB",
      "path": "37"
    },
    "1317": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7553,
        7605
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x560"
    },
    "1320": {
      "branch": 23,
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7553,
        7605
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "1321": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7553,
        7605
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "1323": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7553,
        7605
      ],
      "op": "MLOAD",
      "path": "37"
    },
    "1324": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1328": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1330": {
      "op": "SHL"
    },
    "1331": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7553,
        7605
      ],
      "op": "DUP2",
      "path": "37"
    },
    "1332": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7553,
        7605
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "1333": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1335": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7553,
        7605
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x4"
    },
    "1337": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7553,
        7605
      ],
      "op": "DUP3",
      "path": "37"
    },
    "1338": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7553,
        7605
      ],
      "op": "ADD",
      "path": "37"
    },
    "1339": {
      "op": "MSTORE"
    },
    "1340": {
      "op": "PUSH1",
      "value": "0xD"
    },
    "1342": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1344": {
      "op": "DUP3"
    },
    "1345": {
      "op": "ADD"
    },
    "1346": {
      "op": "MSTORE"
    },
    "1347": {
      "op": "PUSH13",
      "value": "0x456D7074792062617365555249"
    },
    "1361": {
      "op": "PUSH1",
      "value": "0x98"
    },
    "1363": {
      "op": "SHL"
    },
    "1364": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1366": {
      "op": "DUP3"
    },
    "1367": {
      "op": "ADD"
    },
    "1368": {
      "op": "MSTORE"
    },
    "1369": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1371": {
      "op": "ADD"
    },
    "1372": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7553,
        7605
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x2F9"
    },
    "1375": {
      "op": "JUMP"
    },
    "1376": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7553,
        7605
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "1377": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7659,
        7666
      ],
      "op": "PUSH1",
      "path": "37",
      "statement": 14,
      "value": "0x5"
    },
    "1379": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7648,
        7666
      ],
      "op": "DUP1",
      "path": "37"
    },
    "1380": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7648,
        7666
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "1381": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7648,
        7666
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x211"
    },
    "1384": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7648,
        7666
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "1385": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7648,
        7666
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x885"
    },
    "1388": {
      "fn": "Soulbound._getBaseURI",
      "jump": "i",
      "offset": [
        7648,
        7666
      ],
      "op": "JUMP",
      "path": "37"
    },
    "1389": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4302,
        4822
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "1390": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4396,
        4403
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "1392": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1394": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1396": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1398": {
      "op": "SHL"
    },
    "1399": {
      "op": "SUB"
    },
    "1400": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4479,
        4496
      ],
      "op": "DUP4",
      "path": "37",
      "statement": 15
    },
    "1401": {
      "branch": 24,
      "fn": "Soulbound.issuerOf",
      "offset": [
        4479,
        4496
      ],
      "op": "AND",
      "path": "37"
    },
    "1402": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4471,
        4524
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x5C5"
    },
    "1405": {
      "branch": 24,
      "fn": "Soulbound.issuerOf",
      "offset": [
        4471,
        4524
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "1406": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4471,
        4524
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "1408": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4471,
        4524
      ],
      "op": "MLOAD",
      "path": "37"
    },
    "1409": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1413": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1415": {
      "op": "SHL"
    },
    "1416": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4471,
        4524
      ],
      "op": "DUP2",
      "path": "37"
    },
    "1417": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4471,
        4524
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "1418": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1420": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4471,
        4524
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x4"
    },
    "1422": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4471,
        4524
      ],
      "op": "DUP3",
      "path": "37"
    },
    "1423": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4471,
        4524
      ],
      "op": "ADD",
      "path": "37"
    },
    "1424": {
      "op": "MSTORE"
    },
    "1425": {
      "op": "PUSH1",
      "value": "0x17"
    },
    "1427": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1429": {
      "op": "DUP3"
    },
    "1430": {
      "op": "ADD"
    },
    "1431": {
      "op": "MSTORE"
    },
    "1432": {
      "op": "PUSH32",
      "value": "0x517565727920666F72207A65726F20616464726573732E000000000000000000"
    },
    "1465": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1467": {
      "op": "DUP3"
    },
    "1468": {
      "op": "ADD"
    },
    "1469": {
      "op": "MSTORE"
    },
    "1470": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1472": {
      "op": "ADD"
    },
    "1473": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4471,
        4524
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x2F9"
    },
    "1476": {
      "op": "JUMP"
    },
    "1477": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4471,
        4524
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "1478": {
      "fn": "ERC4973._exists",
      "offset": [
        5989,
        5993
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x0"
    },
    "1480": {
      "fn": "ERC4973._exists",
      "offset": [
        6012,
        6028
      ],
      "op": "DUP3",
      "path": "41"
    },
    "1481": {
      "fn": "ERC4973._exists",
      "offset": [
        6012,
        6028
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1482": {
      "fn": "ERC4973._exists",
      "offset": [
        6012,
        6028
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1483": {
      "fn": "ERC4973._exists",
      "offset": [
        6012,
        6019
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x2"
    },
    "1485": {
      "fn": "ERC4973._exists",
      "offset": [
        6012,
        6028
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x20"
    },
    "1487": {
      "fn": "ERC4973._exists",
      "offset": [
        6012,
        6028
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1488": {
      "fn": "ERC4973._exists",
      "offset": [
        6012,
        6028
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "1490": {
      "fn": "ERC4973._exists",
      "offset": [
        6012,
        6028
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1491": {
      "fn": "ERC4973._exists",
      "offset": [
        6012,
        6028
      ],
      "op": "KECCAK256",
      "path": "41"
    },
    "1492": {
      "fn": "ERC4973._exists",
      "offset": [
        6012,
        6028
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "1493": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1495": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1497": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1499": {
      "op": "SHL"
    },
    "1500": {
      "op": "SUB"
    },
    "1501": {
      "fn": "ERC4973._exists",
      "offset": [
        6012,
        6028
      ],
      "op": "AND",
      "path": "41"
    },
    "1502": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4573,
        4622
      ],
      "op": "PUSH2",
      "path": "37",
      "statement": 16,
      "value": "0x61F"
    },
    "1505": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4573,
        4622
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "1506": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4573,
        4622
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "1508": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4573,
        4622
      ],
      "op": "MLOAD",
      "path": "37"
    },
    "1509": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1513": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1515": {
      "op": "SHL"
    },
    "1516": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4573,
        4622
      ],
      "op": "DUP2",
      "path": "37"
    },
    "1517": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4573,
        4622
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "1518": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1520": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4573,
        4622
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x4"
    },
    "1522": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4573,
        4622
      ],
      "op": "DUP3",
      "path": "37"
    },
    "1523": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4573,
        4622
      ],
      "op": "ADD",
      "path": "37"
    },
    "1524": {
      "op": "MSTORE"
    },
    "1525": {
      "op": "PUSH1",
      "value": "0x13"
    },
    "1527": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1529": {
      "op": "DUP3"
    },
    "1530": {
      "op": "ADD"
    },
    "1531": {
      "op": "MSTORE"
    },
    "1532": {
      "op": "PUSH19",
      "value": "0x2737B716B2BC34B9BA32B73A103A37B5B2B717"
    },
    "1552": {
      "op": "PUSH1",
      "value": "0x69"
    },
    "1554": {
      "op": "SHL"
    },
    "1555": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1557": {
      "op": "DUP3"
    },
    "1558": {
      "op": "ADD"
    },
    "1559": {
      "op": "MSTORE"
    },
    "1560": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1562": {
      "op": "ADD"
    },
    "1563": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4573,
        4622
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x2F9"
    },
    "1566": {
      "op": "JUMP"
    },
    "1567": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4573,
        4622
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "1568": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4712,
        4715
      ],
      "op": "DUP3",
      "path": "37",
      "statement": 17
    },
    "1569": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1571": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1573": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1575": {
      "op": "SHL"
    },
    "1576": {
      "op": "SUB"
    },
    "1577": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4691,
        4715
      ],
      "op": "AND",
      "path": "37"
    },
    "1578": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4691,
        4708
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x632"
    },
    "1581": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4699,
        4707
      ],
      "op": "DUP4",
      "path": "37"
    },
    "1582": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4691,
        4698
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x30E"
    },
    "1585": {
      "fn": "Soulbound.issuerOf",
      "jump": "i",
      "offset": [
        4691,
        4708
      ],
      "op": "JUMP",
      "path": "37"
    },
    "1586": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4691,
        4708
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "1587": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1589": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1591": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1593": {
      "op": "SHL"
    },
    "1594": {
      "op": "SUB"
    },
    "1595": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4691,
        4715
      ],
      "op": "AND",
      "path": "37"
    },
    "1596": {
      "branch": 25,
      "fn": "Soulbound.issuerOf",
      "offset": [
        4691,
        4715
      ],
      "op": "EQ",
      "path": "37"
    },
    "1597": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4683,
        4746
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x688"
    },
    "1600": {
      "branch": 25,
      "fn": "Soulbound.issuerOf",
      "offset": [
        4683,
        4746
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "1601": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4683,
        4746
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "1603": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4683,
        4746
      ],
      "op": "MLOAD",
      "path": "37"
    },
    "1604": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1608": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1610": {
      "op": "SHL"
    },
    "1611": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4683,
        4746
      ],
      "op": "DUP2",
      "path": "37"
    },
    "1612": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4683,
        4746
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "1613": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1615": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4683,
        4746
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x4"
    },
    "1617": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4683,
        4746
      ],
      "op": "DUP3",
      "path": "37"
    },
    "1618": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4683,
        4746
      ],
      "op": "ADD",
      "path": "37"
    },
    "1619": {
      "op": "MSTORE"
    },
    "1620": {
      "op": "PUSH1",
      "value": "0x1A"
    },
    "1622": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1624": {
      "op": "DUP3"
    },
    "1625": {
      "op": "ADD"
    },
    "1626": {
      "op": "MSTORE"
    },
    "1627": {
      "op": "PUSH32",
      "value": "0x546F6B656E206E6F74206F776E65642062792061646472657373000000000000"
    },
    "1660": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1662": {
      "op": "DUP3"
    },
    "1663": {
      "op": "ADD"
    },
    "1664": {
      "op": "MSTORE"
    },
    "1665": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1667": {
      "op": "ADD"
    },
    "1668": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4683,
        4746
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x2F9"
    },
    "1671": {
      "op": "JUMP"
    },
    "1672": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4683,
        4746
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "1673": {
      "op": "POP"
    },
    "1674": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4810,
        4814
      ],
      "op": "ADDRESS",
      "path": "37",
      "statement": 18
    },
    "1675": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4302,
        4822
      ],
      "op": "SWAP3",
      "path": "37"
    },
    "1676": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4302,
        4822
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "1677": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4302,
        4822
      ],
      "op": "POP",
      "path": "37"
    },
    "1678": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4302,
        4822
      ],
      "op": "POP",
      "path": "37"
    },
    "1679": {
      "fn": "Soulbound.issuerOf",
      "jump": "o",
      "offset": [
        4302,
        4822
      ],
      "op": "JUMP",
      "path": "37"
    },
    "1680": {
      "fn": "ERC4973._burn",
      "offset": [
        6408,
        6645
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "1681": {
      "fn": "ERC4973._burn",
      "offset": [
        6467,
        6480
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x0"
    },
    "1683": {
      "fn": "ERC4973._burn",
      "offset": [
        6483,
        6499
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x69B"
    },
    "1686": {
      "fn": "ERC4973._burn",
      "offset": [
        6491,
        6498
      ],
      "op": "DUP3",
      "path": "41"
    },
    "1687": {
      "fn": "ERC4973._burn",
      "offset": [
        6483,
        6490
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x30E"
    },
    "1690": {
      "fn": "ERC4973._burn",
      "jump": "i",
      "offset": [
        6483,
        6499
      ],
      "op": "JUMP",
      "path": "41"
    },
    "1691": {
      "fn": "ERC4973._burn",
      "offset": [
        6483,
        6499
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "1692": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1694": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1696": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1698": {
      "op": "SHL"
    },
    "1699": {
      "op": "SUB"
    },
    "1700": {
      "fn": "ERC4973._burn",
      "offset": [
        6510,
        6526
      ],
      "op": "DUP2",
      "path": "41",
      "statement": 19
    },
    "1701": {
      "fn": "ERC4973._burn",
      "offset": [
        6510,
        6526
      ],
      "op": "AND",
      "path": "41"
    },
    "1702": {
      "fn": "ERC4973._burn",
      "offset": [
        6510,
        6526
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x0"
    },
    "1704": {
      "fn": "ERC4973._burn",
      "offset": [
        6510,
        6526
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1705": {
      "fn": "ERC4973._burn",
      "offset": [
        6510,
        6526
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1706": {
      "fn": "ERC4973._burn",
      "offset": [
        6510,
        6526
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1707": {
      "fn": "ERC4973._burn",
      "offset": [
        6510,
        6519
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x4"
    },
    "1709": {
      "fn": "ERC4973._burn",
      "offset": [
        6510,
        6526
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x20"
    },
    "1711": {
      "fn": "ERC4973._burn",
      "offset": [
        6510,
        6526
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1712": {
      "fn": "ERC4973._burn",
      "offset": [
        6510,
        6526
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "1714": {
      "fn": "ERC4973._burn",
      "offset": [
        6510,
        6526
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1715": {
      "fn": "ERC4973._burn",
      "offset": [
        6510,
        6526
      ],
      "op": "KECCAK256",
      "path": "41"
    },
    "1716": {
      "fn": "ERC4973._burn",
      "offset": [
        6510,
        6531
      ],
      "op": "DUP1",
      "path": "41"
    },
    "1717": {
      "fn": "ERC4973._burn",
      "offset": [
        6510,
        6531
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "1718": {
      "fn": "ERC4973._burn",
      "offset": [
        6467,
        6499
      ],
      "op": "SWAP3",
      "path": "41"
    },
    "1719": {
      "fn": "ERC4973._burn",
      "offset": [
        6467,
        6499
      ],
      "op": "SWAP4",
      "path": "41"
    },
    "1720": {
      "op": "POP"
    },
    "1721": {
      "fn": "ERC4973._burn",
      "offset": [
        6530,
        6531
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x1"
    },
    "1723": {
      "fn": "ERC4973._burn",
      "offset": [
        6530,
        6531
      ],
      "op": "SWAP3",
      "path": "41"
    },
    "1724": {
      "fn": "ERC4973._burn",
      "offset": [
        6510,
        6526
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1725": {
      "fn": "ERC4973._burn",
      "offset": [
        6510,
        6526
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1726": {
      "fn": "ERC4973._burn",
      "offset": [
        6510,
        6526
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1727": {
      "fn": "ERC4973._burn",
      "offset": [
        6510,
        6531
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x6C9"
    },
    "1730": {
      "fn": "ERC4973._burn",
      "offset": [
        6510,
        6531
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1731": {
      "fn": "ERC4973._burn",
      "offset": [
        6530,
        6531
      ],
      "op": "DUP5",
      "path": "41"
    },
    "1732": {
      "fn": "ERC4973._burn",
      "offset": [
        6530,
        6531
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1733": {
      "fn": "ERC4973._burn",
      "offset": [
        6510,
        6531
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x8BF"
    },
    "1736": {
      "fn": "ERC4973._burn",
      "jump": "i",
      "offset": [
        6510,
        6531
      ],
      "op": "JUMP",
      "path": "41"
    },
    "1737": {
      "fn": "ERC4973._burn",
      "offset": [
        6510,
        6531
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "1738": {
      "fn": "ERC4973._burn",
      "offset": [
        6510,
        6531
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1739": {
      "fn": "ERC4973._burn",
      "offset": [
        6510,
        6531
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1740": {
      "fn": "ERC4973._burn",
      "offset": [
        6510,
        6531
      ],
      "op": "SSTORE",
      "path": "41"
    },
    "1741": {
      "op": "POP"
    },
    "1742": {
      "op": "POP"
    },
    "1743": {
      "fn": "ERC4973._burn",
      "offset": [
        6548,
        6564
      ],
      "op": "PUSH1",
      "path": "41",
      "statement": 20,
      "value": "0x0"
    },
    "1745": {
      "fn": "ERC4973._burn",
      "offset": [
        6548,
        6564
      ],
      "op": "DUP3",
      "path": "41"
    },
    "1746": {
      "fn": "ERC4973._burn",
      "offset": [
        6548,
        6564
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1747": {
      "fn": "ERC4973._burn",
      "offset": [
        6548,
        6564
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1748": {
      "fn": "ERC4973._burn",
      "offset": [
        6548,
        6555
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x2"
    },
    "1750": {
      "fn": "ERC4973._burn",
      "offset": [
        6548,
        6564
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x20"
    },
    "1752": {
      "fn": "ERC4973._burn",
      "offset": [
        6548,
        6564
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1753": {
      "fn": "ERC4973._burn",
      "offset": [
        6548,
        6564
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1754": {
      "fn": "ERC4973._burn",
      "offset": [
        6548,
        6564
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1755": {
      "fn": "ERC4973._burn",
      "offset": [
        6548,
        6564
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "1757": {
      "fn": "ERC4973._burn",
      "offset": [
        6548,
        6564
      ],
      "op": "DUP1",
      "path": "41"
    },
    "1758": {
      "fn": "ERC4973._burn",
      "offset": [
        6548,
        6564
      ],
      "op": "DUP4",
      "path": "41"
    },
    "1759": {
      "fn": "ERC4973._burn",
      "offset": [
        6548,
        6564
      ],
      "op": "KECCAK256",
      "path": "41"
    },
    "1760": {
      "fn": "ERC4973._burn",
      "offset": [
        6541,
        6564
      ],
      "op": "DUP1",
      "path": "41"
    },
    "1761": {
      "fn": "ERC4973._burn",
      "offset": [
        6541,
        6564
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "1762": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1764": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1766": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1768": {
      "op": "SHL"
    },
    "1769": {
      "op": "SUB"
    },
    "1770": {
      "op": "NOT"
    },
    "1771": {
      "fn": "ERC4973._burn",
      "offset": [
        6541,
        6564
      ],
      "op": "AND",
      "path": "41"
    },
    "1772": {
      "fn": "ERC4973._burn",
      "offset": [
        6541,
        6564
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1773": {
      "fn": "ERC4973._burn",
      "offset": [
        6541,
        6564
      ],
      "op": "SSTORE",
      "path": "41"
    },
    "1774": {
      "fn": "ERC4973._burn",
      "offset": [
        6581,
        6591
      ],
      "op": "PUSH1",
      "path": "41",
      "statement": 21,
      "value": "0x3"
    },
    "1776": {
      "fn": "ERC4973._burn",
      "offset": [
        6581,
        6600
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1777": {
      "fn": "ERC4973._burn",
      "offset": [
        6581,
        6600
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1778": {
      "fn": "ERC4973._burn",
      "offset": [
        6581,
        6600
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1779": {
      "fn": "ERC4973._burn",
      "offset": [
        6581,
        6600
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1780": {
      "fn": "ERC4973._burn",
      "offset": [
        6581,
        6600
      ],
      "op": "KECCAK256",
      "path": "41"
    },
    "1781": {
      "fn": "ERC4973._burn",
      "offset": [
        6574,
        6600
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x6FD"
    },
    "1784": {
      "fn": "ERC4973._burn",
      "offset": [
        6574,
        6600
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1785": {
      "fn": "ERC4973._burn",
      "offset": [
        6574,
        6600
      ],
      "op": "PUSH2",
      "path": "41",
      "value": "0x737"
    },
    "1788": {
      "fn": "ERC4973._burn",
      "jump": "i",
      "offset": [
        6574,
        6600
      ],
      "op": "JUMP",
      "path": "41"
    },
    "1789": {
      "fn": "ERC4973._burn",
      "offset": [
        6574,
        6600
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "1790": {
      "fn": "ERC4973._burn",
      "offset": [
        6616,
        6638
      ],
      "op": "PUSH1",
      "path": "41",
      "statement": 22,
      "value": "0x40"
    },
    "1792": {
      "fn": "ERC4973._burn",
      "offset": [
        6616,
        6638
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "1793": {
      "fn": "ERC4973._burn",
      "offset": [
        6630,
        6637
      ],
      "op": "DUP3",
      "path": "41"
    },
    "1794": {
      "fn": "ERC4973._burn",
      "offset": [
        6630,
        6637
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1795": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1797": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1799": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1801": {
      "op": "SHL"
    },
    "1802": {
      "op": "SUB"
    },
    "1803": {
      "fn": "ERC4973._burn",
      "offset": [
        6616,
        6638
      ],
      "op": "DUP4",
      "path": "41"
    },
    "1804": {
      "fn": "ERC4973._burn",
      "offset": [
        6616,
        6638
      ],
      "op": "AND",
      "path": "41"
    },
    "1805": {
      "fn": "ERC4973._burn",
      "offset": [
        6616,
        6638
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1806": {
      "fn": "ERC4973._burn",
      "offset": [
        6616,
        6638
      ],
      "op": "PUSH32",
      "path": "41",
      "value": "0xEC9AB91322523C899EDE7830EC9BFC992B5981CDCC27B91162FB23DE5791117B"
    },
    "1839": {
      "fn": "ERC4973._burn",
      "offset": [
        6616,
        6638
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1840": {
      "fn": "ERC4973._burn",
      "offset": [
        6616,
        6638
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x0"
    },
    "1842": {
      "fn": "ERC4973._burn",
      "offset": [
        6616,
        6638
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1843": {
      "fn": "ERC4973._burn",
      "offset": [
        6616,
        6638
      ],
      "op": "LOG3",
      "path": "41"
    },
    "1844": {
      "fn": "ERC4973._burn",
      "offset": [
        6457,
        6645
      ],
      "op": "POP",
      "path": "41"
    },
    "1845": {
      "fn": "ERC4973._burn",
      "offset": [
        6408,
        6645
      ],
      "op": "POP",
      "path": "41"
    },
    "1846": {
      "fn": "ERC4973._burn",
      "jump": "o",
      "offset": [
        6408,
        6645
      ],
      "op": "JUMP",
      "path": "41"
    },
    "1847": {
      "op": "JUMPDEST"
    },
    "1848": {
      "op": "POP"
    },
    "1849": {
      "op": "DUP1"
    },
    "1850": {
      "op": "SLOAD"
    },
    "1851": {
      "op": "PUSH2",
      "value": "0x743"
    },
    "1854": {
      "op": "SWAP1"
    },
    "1855": {
      "op": "PUSH2",
      "value": "0x885"
    },
    "1858": {
      "jump": "i",
      "op": "JUMP"
    },
    "1859": {
      "op": "JUMPDEST"
    },
    "1860": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1862": {
      "op": "DUP3"
    },
    "1863": {
      "op": "SSTORE"
    },
    "1864": {
      "op": "DUP1"
    },
    "1865": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1867": {
      "op": "LT"
    },
    "1868": {
      "op": "PUSH2",
      "value": "0x753"
    },
    "1871": {
      "op": "JUMPI"
    },
    "1872": {
      "op": "POP"
    },
    "1873": {
      "op": "POP"
    },
    "1874": {
      "jump": "o",
      "op": "JUMP"
    },
    "1875": {
      "op": "JUMPDEST"
    },
    "1876": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1878": {
      "op": "ADD"
    },
    "1879": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1881": {
      "op": "SWAP1"
    },
    "1882": {
      "op": "DIV"
    },
    "1883": {
      "op": "SWAP1"
    },
    "1884": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1886": {
      "op": "MSTORE"
    },
    "1887": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1889": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1891": {
      "op": "KECCAK256"
    },
    "1892": {
      "op": "SWAP1"
    },
    "1893": {
      "op": "DUP2"
    },
    "1894": {
      "op": "ADD"
    },
    "1895": {
      "op": "SWAP1"
    },
    "1896": {
      "op": "PUSH2",
      "value": "0x30B"
    },
    "1899": {
      "op": "SWAP2"
    },
    "1900": {
      "op": "SWAP1"
    },
    "1901": {
      "op": "JUMPDEST"
    },
    "1902": {
      "op": "DUP1"
    },
    "1903": {
      "op": "DUP3"
    },
    "1904": {
      "op": "GT"
    },
    "1905": {
      "op": "ISZERO"
    },
    "1906": {
      "op": "PUSH2",
      "value": "0x781"
    },
    "1909": {
      "op": "JUMPI"
    },
    "1910": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1912": {
      "op": "DUP2"
    },
    "1913": {
      "op": "SSTORE"
    },
    "1914": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1916": {
      "op": "ADD"
    },
    "1917": {
      "op": "PUSH2",
      "value": "0x76D"
    },
    "1920": {
      "op": "JUMP"
    },
    "1921": {
      "op": "JUMPDEST"
    },
    "1922": {
      "op": "POP"
    },
    "1923": {
      "op": "SWAP1"
    },
    "1924": {
      "jump": "o",
      "op": "JUMP"
    },
    "1925": {
      "op": "JUMPDEST"
    },
    "1926": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1928": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1930": {
      "op": "DUP3"
    },
    "1931": {
      "op": "DUP5"
    },
    "1932": {
      "op": "SUB"
    },
    "1933": {
      "op": "SLT"
    },
    "1934": {
      "op": "ISZERO"
    },
    "1935": {
      "op": "PUSH2",
      "value": "0x797"
    },
    "1938": {
      "op": "JUMPI"
    },
    "1939": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1941": {
      "op": "DUP1"
    },
    "1942": {
      "op": "REVERT"
    },
    "1943": {
      "op": "JUMPDEST"
    },
    "1944": {
      "op": "DUP2"
    },
    "1945": {
      "op": "CALLDATALOAD"
    },
    "1946": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1948": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1950": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1952": {
      "op": "SHL"
    },
    "1953": {
      "op": "SUB"
    },
    "1954": {
      "op": "NOT"
    },
    "1955": {
      "op": "DUP2"
    },
    "1956": {
      "op": "AND"
    },
    "1957": {
      "op": "DUP2"
    },
    "1958": {
      "op": "EQ"
    },
    "1959": {
      "op": "PUSH2",
      "value": "0x7AF"
    },
    "1962": {
      "op": "JUMPI"
    },
    "1963": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1965": {
      "op": "DUP1"
    },
    "1966": {
      "op": "REVERT"
    },
    "1967": {
      "op": "JUMPDEST"
    },
    "1968": {
      "op": "SWAP4"
    },
    "1969": {
      "op": "SWAP3"
    },
    "1970": {
      "op": "POP"
    },
    "1971": {
      "op": "POP"
    },
    "1972": {
      "op": "POP"
    },
    "1973": {
      "jump": "o",
      "op": "JUMP"
    },
    "1974": {
      "op": "JUMPDEST"
    },
    "1975": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1977": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1979": {
      "op": "DUP1"
    },
    "1980": {
      "op": "DUP4"
    },
    "1981": {
      "op": "MSTORE"
    },
    "1982": {
      "op": "DUP4"
    },
    "1983": {
      "op": "MLOAD"
    },
    "1984": {
      "op": "DUP1"
    },
    "1985": {
      "op": "DUP3"
    },
    "1986": {
      "op": "DUP6"
    },
    "1987": {
      "op": "ADD"
    },
    "1988": {
      "op": "MSTORE"
    },
    "1989": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1991": {
      "op": "JUMPDEST"
    },
    "1992": {
      "op": "DUP2"
    },
    "1993": {
      "op": "DUP2"
    },
    "1994": {
      "op": "LT"
    },
    "1995": {
      "op": "ISZERO"
    },
    "1996": {
      "op": "PUSH2",
      "value": "0x7E3"
    },
    "1999": {
      "op": "JUMPI"
    },
    "2000": {
      "op": "DUP6"
    },
    "2001": {
      "op": "DUP2"
    },
    "2002": {
      "op": "ADD"
    },
    "2003": {
      "op": "DUP4"
    },
    "2004": {
      "op": "ADD"
    },
    "2005": {
      "op": "MLOAD"
    },
    "2006": {
      "op": "DUP6"
    },
    "2007": {
      "op": "DUP3"
    },
    "2008": {
      "op": "ADD"
    },
    "2009": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2011": {
      "op": "ADD"
    },
    "2012": {
      "op": "MSTORE"
    },
    "2013": {
      "op": "DUP3"
    },
    "2014": {
      "op": "ADD"
    },
    "2015": {
      "op": "PUSH2",
      "value": "0x7C7"
    },
    "2018": {
      "op": "JUMP"
    },
    "2019": {
      "op": "JUMPDEST"
    },
    "2020": {
      "op": "DUP2"
    },
    "2021": {
      "op": "DUP2"
    },
    "2022": {
      "op": "GT"
    },
    "2023": {
      "op": "ISZERO"
    },
    "2024": {
      "op": "PUSH2",
      "value": "0x7F5"
    },
    "2027": {
      "op": "JUMPI"
    },
    "2028": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2030": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2032": {
      "op": "DUP4"
    },
    "2033": {
      "op": "DUP8"
    },
    "2034": {
      "op": "ADD"
    },
    "2035": {
      "op": "ADD"
    },
    "2036": {
      "op": "MSTORE"
    },
    "2037": {
      "op": "JUMPDEST"
    },
    "2038": {
      "op": "POP"
    },
    "2039": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2041": {
      "op": "ADD"
    },
    "2042": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2044": {
      "op": "NOT"
    },
    "2045": {
      "op": "AND"
    },
    "2046": {
      "op": "SWAP3"
    },
    "2047": {
      "op": "SWAP1"
    },
    "2048": {
      "op": "SWAP3"
    },
    "2049": {
      "op": "ADD"
    },
    "2050": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2052": {
      "op": "ADD"
    },
    "2053": {
      "op": "SWAP4"
    },
    "2054": {
      "op": "SWAP3"
    },
    "2055": {
      "op": "POP"
    },
    "2056": {
      "op": "POP"
    },
    "2057": {
      "op": "POP"
    },
    "2058": {
      "jump": "o",
      "op": "JUMP"
    },
    "2059": {
      "op": "JUMPDEST"
    },
    "2060": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2062": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2064": {
      "op": "DUP3"
    },
    "2065": {
      "op": "DUP5"
    },
    "2066": {
      "op": "SUB"
    },
    "2067": {
      "op": "SLT"
    },
    "2068": {
      "op": "ISZERO"
    },
    "2069": {
      "op": "PUSH2",
      "value": "0x81D"
    },
    "2072": {
      "op": "JUMPI"
    },
    "2073": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2075": {
      "op": "DUP1"
    },
    "2076": {
      "op": "REVERT"
    },
    "2077": {
      "op": "JUMPDEST"
    },
    "2078": {
      "op": "POP"
    },
    "2079": {
      "op": "CALLDATALOAD"
    },
    "2080": {
      "op": "SWAP2"
    },
    "2081": {
      "op": "SWAP1"
    },
    "2082": {
      "op": "POP"
    },
    "2083": {
      "jump": "o",
      "op": "JUMP"
    },
    "2084": {
      "op": "JUMPDEST"
    },
    "2085": {
      "op": "DUP1"
    },
    "2086": {
      "op": "CALLDATALOAD"
    },
    "2087": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2089": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2091": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2093": {
      "op": "SHL"
    },
    "2094": {
      "op": "SUB"
    },
    "2095": {
      "op": "DUP2"
    },
    "2096": {
      "op": "AND"
    },
    "2097": {
      "op": "DUP2"
    },
    "2098": {
      "op": "EQ"
    },
    "2099": {
      "op": "PUSH2",
      "value": "0x83B"
    },
    "2102": {
      "op": "JUMPI"
    },
    "2103": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2105": {
      "op": "DUP1"
    },
    "2106": {
      "op": "REVERT"
    },
    "2107": {
      "op": "JUMPDEST"
    },
    "2108": {
      "op": "SWAP2"
    },
    "2109": {
      "op": "SWAP1"
    },
    "2110": {
      "op": "POP"
    },
    "2111": {
      "jump": "o",
      "op": "JUMP"
    },
    "2112": {
      "op": "JUMPDEST"
    },
    "2113": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2115": {
      "op": "DUP1"
    },
    "2116": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2118": {
      "op": "DUP4"
    },
    "2119": {
      "op": "DUP6"
    },
    "2120": {
      "op": "SUB"
    },
    "2121": {
      "op": "SLT"
    },
    "2122": {
      "op": "ISZERO"
    },
    "2123": {
      "op": "PUSH2",
      "value": "0x853"
    },
    "2126": {
      "op": "JUMPI"
    },
    "2127": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2129": {
      "op": "DUP1"
    },
    "2130": {
      "op": "REVERT"
    },
    "2131": {
      "op": "JUMPDEST"
    },
    "2132": {
      "op": "PUSH2",
      "value": "0x85C"
    },
    "2135": {
      "op": "DUP4"
    },
    "2136": {
      "op": "PUSH2",
      "value": "0x824"
    },
    "2139": {
      "jump": "i",
      "op": "JUMP"
    },
    "2140": {
      "op": "JUMPDEST"
    },
    "2141": {
      "op": "SWAP5"
    },
    "2142": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2144": {
      "op": "SWAP4"
    },
    "2145": {
      "op": "SWAP1"
    },
    "2146": {
      "op": "SWAP4"
    },
    "2147": {
      "op": "ADD"
    },
    "2148": {
      "op": "CALLDATALOAD"
    },
    "2149": {
      "op": "SWAP4"
    },
    "2150": {
      "op": "POP"
    },
    "2151": {
      "op": "POP"
    },
    "2152": {
      "op": "POP"
    },
    "2153": {
      "jump": "o",
      "op": "JUMP"
    },
    "2154": {
      "op": "JUMPDEST"
    },
    "2155": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2157": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2159": {
      "op": "DUP3"
    },
    "2160": {
      "op": "DUP5"
    },
    "2161": {
      "op": "SUB"
    },
    "2162": {
      "op": "SLT"
    },
    "2163": {
      "op": "ISZERO"
    },
    "2164": {
      "op": "PUSH2",
      "value": "0x87C"
    },
    "2167": {
      "op": "JUMPI"
    },
    "2168": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2170": {
      "op": "DUP1"
    },
    "2171": {
      "op": "REVERT"
    },
    "2172": {
      "op": "JUMPDEST"
    },
    "2173": {
      "op": "PUSH2",
      "value": "0x7AF"
    },
    "2176": {
      "op": "DUP3"
    },
    "2177": {
      "op": "PUSH2",
      "value": "0x824"
    },
    "2180": {
      "jump": "i",
      "op": "JUMP"
    },
    "2181": {
      "op": "JUMPDEST"
    },
    "2182": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2184": {
      "op": "DUP2"
    },
    "2185": {
      "op": "DUP2"
    },
    "2186": {
      "op": "SHR"
    },
    "2187": {
      "op": "SWAP1"
    },
    "2188": {
      "op": "DUP3"
    },
    "2189": {
      "op": "AND"
    },
    "2190": {
      "op": "DUP1"
    },
    "2191": {
      "op": "PUSH2",
      "value": "0x899"
    },
    "2194": {
      "op": "JUMPI"
    },
    "2195": {
      "op": "PUSH1",
      "value": "0x7F"
    },
    "2197": {
      "op": "DUP3"
    },
    "2198": {
      "op": "AND"
    },
    "2199": {
      "op": "SWAP2"
    },
    "2200": {
      "op": "POP"
    },
    "2201": {
      "op": "JUMPDEST"
    },
    "2202": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2204": {
      "op": "DUP3"
    },
    "2205": {
      "op": "LT"
    },
    "2206": {
      "op": "DUP2"
    },
    "2207": {
      "op": "SUB"
    },
    "2208": {
      "op": "PUSH2",
      "value": "0x8B9"
    },
    "2211": {
      "op": "JUMPI"
    },
    "2212": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2217": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2219": {
      "op": "SHL"
    },
    "2220": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2222": {
      "op": "MSTORE"
    },
    "2223": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "2225": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2227": {
      "op": "MSTORE"
    },
    "2228": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2230": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2232": {
      "op": "REVERT"
    },
    "2233": {
      "op": "JUMPDEST"
    },
    "2234": {
      "op": "POP"
    },
    "2235": {
      "op": "SWAP2"
    },
    "2236": {
      "op": "SWAP1"
    },
    "2237": {
      "op": "POP"
    },
    "2238": {
      "jump": "o",
      "op": "JUMP"
    },
    "2239": {
      "op": "JUMPDEST"
    },
    "2240": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2242": {
      "op": "DUP3"
    },
    "2243": {
      "op": "DUP3"
    },
    "2244": {
      "op": "LT"
    },
    "2245": {
      "op": "ISZERO"
    },
    "2246": {
      "op": "PUSH2",
      "value": "0x8DF"
    },
    "2249": {
      "op": "JUMPI"
    },
    "2250": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2255": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2257": {
      "op": "SHL"
    },
    "2258": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2260": {
      "op": "MSTORE"
    },
    "2261": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "2263": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2265": {
      "op": "MSTORE"
    },
    "2266": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2268": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2270": {
      "op": "REVERT"
    },
    "2271": {
      "op": "JUMPDEST"
    },
    "2272": {
      "op": "POP"
    },
    "2273": {
      "op": "SUB"
    },
    "2274": {
      "op": "SWAP1"
    },
    "2275": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "90a44059d9b45a678f23055cd211a1ed660df338",
  "source": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.8;\n\nimport \"../interfaces/ISoulbound.sol\";\nimport \"./eips/ERC-4973.sol\";\n\n/**\n * @title Soulbound Token Contract.\n * @author Daccred.\n * @dev  Soulbound Token Base Template.\n *       This contract was inspired by\n *       https://github.com/ethereum/EIPs/blob/master/assets/eip-4973/ERC-4973.sol\n *       This contract is inherited by any contract to implement the Soulbound\n *       template.\n *       Soulbound tokens  cannot be transferred when minted to a particular address.\n *       This is the base instance of the contract,\n *       it includes minting functions and revoke functions.\n *       Inheriting functions can wrap around the specified functions.\n *       Also, this base contract instance does not include a capped supply.\n */\ncontract Soulbound is ERC4973 {\n    /**\n     * @dev  Stores the base URI on cases when the user wants to mint a token,\n     *       it automatically generates a string casted tokenURI using the\n     *       generateTokenURI function. This variable can only be modified by\n     *       the allowlist owner.\n     */\n    string private baseURI;\n\n    /// @dev Mapping of speific addresses to tokenIds and boolean for mint records.\n    mapping(address => mapping(uint256 => bool)) private mints;\n\n    /// @dev Allows the deployer to set a name and a symbol for the token.\n    constructor(string memory name, string memory symbol)\n        ERC4973(name, symbol)\n    {}\n\n    /**\n     * @dev  Mints a new token `_tokenId` to `_to`, giving to ownership of token `_tokenId`.\n     *       This function will be used hand in hand with ERC721's _mint() function.\n     *       Emits the {Attest} event.\n     *       `_to` cannot transfer the token.\n     *       `_to` must not be a 0 address.\n     *       `_tokenId` must be an existent token.\n     *       This does not evaluate total supply of tokens before minting.\n     *\n     * @notice Callable by anyone.\n     *\n     * @param _to        Address to which token `_tokenId` is minted.\n     * @param _tokenId   Token to mint.\n     * @param tokenURI   Auto generated or user passed URI for minted token.\n     *\n     * @return bool true or false.\n     */\n    function issue(\n        address _to,\n        uint256 _tokenId,\n        string memory tokenURI\n    ) internal returns (bool) {\n        /// @dev Mint Soulbound token to `_to` using ERC4973 _mint().\n        mintSoulboundToken(_to, _tokenId, tokenURI);\n        /// @dev Return true.\n        return true;\n    }\n\n    /**\n     * @dev  Withdraws ownership of token `_tokenId` from `_From`.\n     *       This will be done when the ERC721's _burn() function is called.\n     *       Emits the {Revoke} event.\n     *       `_from` must own the token.\n     *       `_from` must not be a 0 address.\n     *       `_tokenId` must be an existent token.\n     *       The function can only be called by the issuer of the token.\n     *       This modifier onlyIssuer will be implemented in the contract.\n     *       [Modifiers cannot be made in interfaces].\n     *       This does not evaluate total supply of tokens before minting.\n     *\n     * @notice Callable by this or inheriting contract.\n     *\n     * @param _from      Address which owns token `_tokenId`.\n     * @param _tokenId   Token to revoke.\n     *\n     * @return bool true or false.\n     */\n    function revoke(address _from, uint256 _tokenId) internal returns (bool) {\n        /// @dev Require token exists.\n        require(_exists(_tokenId), \"Non-existent token.\");\n        /// @dev Require _tokenId is owned by _from.\n        require(ownerOf(_tokenId) == _from, \"Token not owned by address\");\n        /// @dev Burn the token.\n        burnSoulboundToken(_tokenId);\n        /// @dev Return true.\n        return true;\n    }\n\n    /**\n     * @dev  Since a token cannnot be minted twice.\n     *       This function returns the address that minted token `_tokenId` to `_to`,\n     *       otherwise this contract.\n     *       `_to` must not be a 0 address.\n     *       `_tokenId` must be an existent token.\n     *       Owner of _tokenId must be _to.\n     *\n     * @notice Callable by anyone.\n     *\n     * @param _to        Address to which token `_tokenId` is minted.\n     * @param _tokenId   Token minted.\n     *\n     * @return address of issuer.\n     */\n    function issuerOf(address _to, uint256 _tokenId)\n        public\n        view\n        returns (address)\n    {\n        /// @dev Require _to is not a zero address.\n        require(_to != address(0), \"Query for zero address.\");\n        /// @dev Require token exists.\n        require(_exists(_tokenId), \"Non-existent token.\");\n        /// @dev Require _tokenId is owned by _to.\n        require(ownerOf(_tokenId) == _to, \"Token not owned by address\");\n        /// @dev Returns this address.\n        return address(this);\n    }\n\n    /**\n     * @dev  Returns true if token `_tokenId` was minted from this contract to `_to`.\n     *       `_to` must not be a 0 address.\n     *       `_tokenId` must be an existent token.\n     *\n     * @notice Callable by anyone.\n     *\n     * @param _to        Address to which token `_tokenId` is minted.\n     * @param _tokenId   Token minted.\n     *\n     * @return bool true or false.\n     */\n    function isMinted(address _to, uint256 _tokenId)\n        public\n        view\n        returns (bool)\n    {\n        return mints[_to][_tokenId];\n    }\n\n    /**\n     * @dev Mints `tokenId` of the soulbound token to `to`.\n     *\n     * @param to         Receiver of the tokens.\n     * @param tokenId    Amount to be minted, GT 0.\n     * @param tokenURI   URI of token minted.\n     */\n    function mintSoulboundToken(\n        address to,\n        uint256 tokenId,\n        string memory tokenURI\n    ) private {\n        /// @dev Require the address receiving is not a zero address.\n        require(to != address(0), \"Mint to zero address.\");\n        /// @dev    ERC-4973 doesn't include checks for empty tokenURIs\n        ///         but they should be necessary.\n        require(bytes(tokenURI).length != 0, \"Empty tokenURI.\");\n        /// @dev    Mint to the `to` address.\n        ///         ERC4973 runs check for existent token.\n        _mint(to, tokenId, tokenURI);\n        /// @dev Set record of owner to true;\n        mints[to][tokenId] = true;\n    }\n\n    /**\n     * @dev  Burns a soulbound token, on the condition that\n     *       the token exists.\n     *\n     * @param tokenId Token to be burnt.\n     */\n    function burnSoulboundToken(uint256 tokenId) private {\n        /// @dev Checks that the token actually exists.\n        require(_exists(tokenId), \"Burn of inexistent token\");\n        /// @dev Get owner of token tokenId.\n        address _tokenOwner = ownerOf(tokenId);\n        /// @dev Burn the token.\n        _burn(tokenId);\n        /// @dev Set record of owner to false.\n        mints[_tokenOwner][tokenId] = false;\n    }\n\n    /**\n     * @dev Sets the baseURI to `_baseURI`.\n     *\n     * @notice Callable by this or inheriting contract.\n     *\n     * @param _baseURI String URI.\n     */\n    function _setBaseURI(string memory _baseURI) internal {\n        /// @dev Ensure that the word length is 0.\n        require(bytes(_baseURI).length != 0, \"Invalid length\");\n        /// @dev Set baseURI.\n        baseURI = _baseURI;\n    }\n\n    /**\n     * @dev Returns already set baseURI if it exists.\n     *\n     * @notice Callable by anyone.\n     *\n     * @return _baseURI baseURI set.\n     */\n    function _getBaseURI() public view returns (string memory _baseURI) {\n        /// @dev Require baseURI length is not 0.\n        require(bytes(baseURI).length != 0, \"Empty baseURI\");\n        /// @dev Return baseURI.\n        _baseURI = baseURI;\n    }\n}\n",
  "sourceMap": "802:6873:37:-:0;;;1373:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1443:4;1449:6;4395:5:41;:13;1443:4:37;4395:5:41;:13;:::i;:::-;-1:-1:-1;4418:7:41;:17;4428:7;4418;:17;:::i;:::-;;4329:113;;1373:90:37;;802:6873;;14:127:43;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:885;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:43;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:43;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;930:2;927:1;924:9;921:80;;;989:1;984:2;979;971:6;967:15;963:24;956:35;921:80;1019:6;146:885;-1:-1:-1;;;;;;146:885:43:o;1036:562::-;1135:6;1143;1196:2;1184:9;1175:7;1171:23;1167:32;1164:52;;;1212:1;1209;1202:12;1164:52;1239:16;;-1:-1:-1;;;;;1304:14:43;;;1301:34;;;1331:1;1328;1321:12;1301:34;1354:61;1407:7;1398:6;1387:9;1383:22;1354:61;:::i;:::-;1344:71;;1461:2;1450:9;1446:18;1440:25;1424:41;;1490:2;1480:8;1477:16;1474:36;;;1506:1;1503;1496:12;1474:36;;1529:63;1584:7;1573:8;1562:9;1558:24;1529:63;:::i;:::-;1519:73;;;1036:562;;;;;:::o;1603:380::-;1682:1;1678:12;;;;1725;;;1746:61;;1800:4;1792:6;1788:17;1778:27;;1746:61;1853:2;1845:6;1842:14;1822:18;1819:38;1816:161;;1899:10;1894:3;1890:20;1887:1;1880:31;1934:4;1931:1;1924:15;1962:4;1959:1;1952:15;1816:161;;1603:380;;;:::o;2114:545::-;2216:2;2211:3;2208:11;2205:448;;;2252:1;2277:5;2273:2;2266:17;2322:4;2318:2;2308:19;2392:2;2380:10;2376:19;2373:1;2369:27;2363:4;2359:38;2428:4;2416:10;2413:20;2410:47;;;-1:-1:-1;2451:4:43;2410:47;2506:2;2501:3;2497:12;2494:1;2490:20;2484:4;2480:31;2470:41;;2561:82;2579:2;2572:5;2569:13;2561:82;;;2624:17;;;2605:1;2594:13;2561:82;;;2565:3;;;2205:448;2114:545;;;:::o;2835:1352::-;2955:10;;-1:-1:-1;;;;;2977:30:43;;2974:56;;;3010:18;;:::i;:::-;3039:97;3129:6;3089:38;3121:4;3115:11;3089:38;:::i;:::-;3083:4;3039:97;:::i;:::-;3191:4;;3255:2;3244:14;;3272:1;3267:663;;;;3974:1;3991:6;3988:89;;;-1:-1:-1;4043:19:43;;;4037:26;3988:89;-1:-1:-1;;2792:1:43;2788:11;;;2784:24;2780:29;2770:40;2816:1;2812:11;;;2767:57;4090:81;;3237:944;;3267:663;2061:1;2054:14;;;2098:4;2085:18;;-1:-1:-1;;3303:20:43;;;3421:236;3435:7;3432:1;3429:14;3421:236;;;3524:19;;;3518:26;3503:42;;3616:27;;;;3584:1;3572:14;;;;3451:19;;3421:236;;;3425:3;3685:6;3676:7;3673:19;3670:201;;;3746:19;;;3740:26;-1:-1:-1;;3829:1:43;3825:14;;;3841:3;3821:24;3817:37;3813:42;3798:58;3783:74;;3670:201;-1:-1:-1;;;;;3917:1:43;3901:14;;;3897:22;3884:36;;-1:-1:-1;2835:1352:43:o;:::-;802:6873:37;;;;;;",
  "sourcePath": "contracts/contracts/packages/soulbound/contracts/Soulbound.sol",
  "type": "contract"
}