{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ExtendWhitelistLength",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "SetWhitelistLength",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_length",
          "type": "uint256"
        }
      ],
      "name": "extendWhitelistLength",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWhitelistLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWhitelistMaxLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_length",
          "type": "uint256"
        }
      ],
      "name": "setWhitelistLength",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "26": "contracts/contracts/packages/nft/contracts/interfaces/IWhitelist.sol"
  },
  "ast": {
    "absolutePath": "contracts/contracts/packages/nft/contracts/interfaces/IWhitelist.sol",
    "exportedSymbols": {
      "IWhitelist": [
        3526
      ]
    },
    "id": 3527,
    "license": "GPL-3.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3486,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".7"
        ],
        "nodeType": "PragmaDirective",
        "src": "429:23:26"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IWhitelist",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 3487,
          "nodeType": "StructuredDocumentation",
          "src": "454:1177:26",
          "text": " @title Whitelist Limitation Interface.\n @author Daccred.\n @dev For contracts that will implement this interface, storage fixed arrays cannot be created from a function\n (only memory can, and will be wiped out when the function is done).\n But this interface seeks to control a dynamic array's max length using a storage uint256 variable.\n This ensures that the length of the array cannot be GT the value of the max length.\n Contracts to implement this interface must specify a control uint on the contract storage.\n [USABILITY]\n In future in the WhitelistFactory, the entire Whitelist actions will be controlled depending on the users payment plan (free or paid).\n When the WhitelistFactory is deployed, a whitelist max length is automatically created via\n setting a default max length value for the address\n the whitelist can now be created to memory by uint256[max_length] whitelist = new uint256[](max_length)\n and functions that adds, extends and sets new length for whitelist will be handled from the Factory, the actions\n will be dependent on the users payment plan.\n [WARNING]\n This max length value can only be incremented."
        },
        "fullyImplemented": false,
        "id": 3526,
        "linearizedBaseContracts": [
          3526
        ],
        "name": "IWhitelist",
        "nameLocation": "1643:10:26",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": {
              "id": 3488,
              "nodeType": "StructuredDocumentation",
              "src": "1702:52:26",
              "text": "@dev Emitted when a new whitelist length is set."
            },
            "eventSelector": "25ef32ddcaca1915e3869347972206d9be46c608d0b721f940820bde31999392",
            "id": 3492,
            "name": "SetWhitelistLength",
            "nameLocation": "1765:18:26",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 3491,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3490,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3492,
                  "src": "1784:7:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3489,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1784:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1783:9:26"
            },
            "src": "1759:34:26"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 3493,
              "nodeType": "StructuredDocumentation",
              "src": "1799:62:26",
              "text": "@dev Emitted when the max length of the array is extended."
            },
            "eventSelector": "b1d7d296ff13da00f3961d99ca5a3d71399cc958183accf1ad4892fba4372845",
            "id": 3497,
            "name": "ExtendWhitelistLength",
            "nameLocation": "1872:21:26",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 3496,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3495,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3497,
                  "src": "1894:7:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3494,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1894:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1893:9:26"
            },
            "src": "1866:37:26"
          },
          {
            "documentation": {
              "id": 3498,
              "nodeType": "StructuredDocumentation",
              "src": "1951:106:26",
              "text": " @dev Returns the current length of the array, (number of elements housed by the array)."
            },
            "functionSelector": "a13202e9",
            "id": 3503,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getWhitelistLength",
            "nameLocation": "2071:18:26",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3499,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2089:2:26"
            },
            "returnParameters": {
              "id": 3502,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3501,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3503,
                  "src": "2110:7:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3500,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2110:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2109:9:26"
            },
            "scope": 3526,
            "src": "2062:57:26",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3504,
              "nodeType": "StructuredDocumentation",
              "src": "2125:81:26",
              "text": " @dev Returns the current value of the max length of the array."
            },
            "functionSelector": "70eb758e",
            "id": 3509,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getWhitelistMaxLength",
            "nameLocation": "2220:21:26",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3505,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2241:2:26"
            },
            "returnParameters": {
              "id": 3508,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3507,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3509,
                  "src": "2262:7:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3506,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2262:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2261:9:26"
            },
            "scope": 3526,
            "src": "2211:60:26",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3510,
              "nodeType": "StructuredDocumentation",
              "src": "2277:469:26",
              "text": " @dev Set the new `_length` to  the max length of the array.\n This cannot be reduced, only increased.\n (An array with a current max length of 5, can only accept values GT 5 for a new max length value).\n [CONDITIONS]\n new `_length` must be > than the `max length`.\n Emits the {SetWhitelistLength} event.\n @param _length, The new value for the max length of the array.\n @return bool."
            },
            "functionSelector": "a1802411",
            "id": 3517,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setWhitelistLength",
            "nameLocation": "2760:18:26",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3513,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3512,
                  "mutability": "mutable",
                  "name": "_length",
                  "nameLocation": "2787:7:26",
                  "nodeType": "VariableDeclaration",
                  "scope": 3517,
                  "src": "2779:15:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3511,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2779:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2778:17:26"
            },
            "returnParameters": {
              "id": 3516,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3515,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3517,
                  "src": "2814:4:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3514,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2814:4:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2813:6:26"
            },
            "scope": 3526,
            "src": "2751:69:26",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3518,
              "nodeType": "StructuredDocumentation",
              "src": "2826:465:26",
              "text": " @dev Adds a value of `_length` to the current max length.\n (Calling this function on the max length with a value of 5, sets the new max length value to: 5 + `_length`).\n Returns the new max length value.\n [CONDITIONS]\n `_length` must be GT 0.\n Emits the {ExtendWhitelistLength} event.\n @param _length, The desired length by which the max value will be extended.\n @return bool."
            },
            "functionSelector": "3b22d9cd",
            "id": 3525,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "extendWhitelistLength",
            "nameLocation": "3305:21:26",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3521,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3520,
                  "mutability": "mutable",
                  "name": "_length",
                  "nameLocation": "3335:7:26",
                  "nodeType": "VariableDeclaration",
                  "scope": 3525,
                  "src": "3327:15:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3519,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3327:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3326:17:26"
            },
            "returnParameters": {
              "id": 3524,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3523,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3525,
                  "src": "3362:4:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3522,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3362:4:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3361:6:26"
            },
            "scope": 3526,
            "src": "3296:72:26",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 3527,
        "src": "1633:1787:26",
        "usedErrors": []
      }
    ],
    "src": "429:2992:26"
  },
  "bytecode": "",
  "bytecodeSha1": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.15+commit.e14f2714"
  },
  "contractName": "IWhitelist",
  "coverageMap": {
    "branches": {},
    "statements": {}
  },
  "dependencies": [],
  "deployedBytecode": "",
  "deployedSourceMap": "",
  "language": "Solidity",
  "natspec": {
    "author": "Daccred.",
    "details": "For contracts that will implement this interface, storage fixed arrays cannot be created from a function (only memory can, and will be wiped out when the function is done). But this interface seeks to control a dynamic array's max length using a storage uint256 variable. This ensures that the length of the array cannot be GT the value of the max length. Contracts to implement this interface must specify a control uint on the contract storage. [USABILITY] In future in the WhitelistFactory, the entire Whitelist actions will be controlled depending on the users payment plan (free or paid). When the WhitelistFactory is deployed, a whitelist max length is automatically created via setting a default max length value for the address the whitelist can now be created to memory by uint256[max_length] whitelist = new uint256[](max_length) and functions that adds, extends and sets new length for whitelist will be handled from the Factory, the actions will be dependent on the users payment plan. [WARNING] This max length value can only be incremented.",
    "events": {
      "ExtendWhitelistLength(uint256)": {
        "details": "Emitted when the max length of the array is extended."
      },
      "SetWhitelistLength(uint256)": {
        "details": "Emitted when a new whitelist length is set."
      }
    },
    "kind": "dev",
    "methods": {
      "extendWhitelistLength(uint256)": {
        "details": "Adds a value of `_length` to the current max length. (Calling this function on the max length with a value of 5, sets the new max length value to: 5 + `_length`). Returns the new max length value. [CONDITIONS] `_length` must be GT 0. Emits the {ExtendWhitelistLength} event.",
        "params": {
          "_length": ", The desired length by which the max value will be extended."
        },
        "returns": {
          "_0": "bool."
        }
      },
      "getWhitelistLength()": {
        "details": "Returns the current length of the array, (number of elements housed by the array)."
      },
      "getWhitelistMaxLength()": {
        "details": "Returns the current value of the max length of the array."
      },
      "setWhitelistLength(uint256)": {
        "details": "Set the new `_length` to  the max length of the array. This cannot be reduced, only increased. (An array with a current max length of 5, can only accept values GT 5 for a new max length value). [CONDITIONS] new `_length` must be > than the `max length`. Emits the {SetWhitelistLength} event.",
        "params": {
          "_length": ", The new value for the max length of the array."
        },
        "returns": {
          "_0": "bool."
        }
      }
    },
    "title": "Whitelist Limitation Interface.",
    "version": 1
  },
  "offset": [
    1633,
    3420
  ],
  "opcodes": "",
  "pcMap": {},
  "sha1": "e555969871f203c75eaff78b84ca2a5dbd606338",
  "source": "// SPDX-License-Identifier: GPL-3.0\n\n// \t _____     ______     ______     ______     ______     ______     _____\n//  /\\  __-.  /\\  __ \\   /\\  ___\\   /\\  ___\\   /\\  == \\   /\\  ___\\   /\\  __-.\n//  \\ \\ \\/\\ \\ \\ \\  __ \\  \\ \\ \\____  \\ \\ \\____  \\ \\  __<   \\ \\  __\\   \\ \\ \\/\\ \\\n//   \\ \\____-  \\ \\_\\ \\_\\  \\ \\_____\\  \\ \\_____\\  \\ \\_\\ \\_\\  \\ \\_____\\  \\ \\____-\n//    \\/____/   \\/_/\\/_/   \\/_____/   \\/_____/   \\/_/ /_/   \\/_____/   \\/____/\n\npragma solidity ^0.8.7;\n\n/**\n * @title Whitelist Limitation Interface.\n * @author Daccred.\n * @dev For contracts that will implement this interface, storage fixed arrays cannot be created from a function\n * (only memory can, and will be wiped out when the function is done).\n * But this interface seeks to control a dynamic array's max length using a storage uint256 variable.\n * This ensures that the length of the array cannot be GT the value of the max length.\n * Contracts to implement this interface must specify a control uint on the contract storage.\n *\n * [USABILITY]\n * In future in the WhitelistFactory, the entire Whitelist actions will be controlled depending on the users payment plan (free or paid).\n * When the WhitelistFactory is deployed, a whitelist max length is automatically created via\n * setting a default max length value for the address\n * the whitelist can now be created to memory by uint256[max_length] whitelist = new uint256[](max_length)\n * and functions that adds, extends and sets new length for whitelist will be handled from the Factory, the actions\n * will be dependent on the users payment plan.\n *\n * [WARNING]\n * This max length value can only be incremented.\n */\n\ninterface IWhitelist {\n    // ========== E V E N T S ==========\n\n    /// @dev Emitted when a new whitelist length is set.\n    event SetWhitelistLength(uint256);\n\n    /// @dev Emitted when the max length of the array is extended.\n    event ExtendWhitelistLength(uint256);\n\n    // ========== E V E N T S ==========\n\n    /**\n     * @dev Returns the current length of the array, (number of elements housed by the array).\n     */\n    function getWhitelistLength() external returns (uint256);\n\n    /**\n     * @dev Returns the current value of the max length of the array.\n     */\n    function getWhitelistMaxLength() external returns (uint256);\n\n    /**\n     * @dev Set the new `_length` to  the max length of the array.\n     * This cannot be reduced, only increased.\n     * (An array with a current max length of 5, can only accept values GT 5 for a new max length value).\n     *\n     * [CONDITIONS]\n     * new `_length` must be > than the `max length`.\n     *\n     * Emits the {SetWhitelistLength} event.\n     *\n     * @param _length, The new value for the max length of the array.\n     *\n     * @return bool.\n     */\n    function setWhitelistLength(uint256 _length) external returns (bool);\n\n    /**\n     * @dev Adds a value of `_length` to the current max length.\n     * (Calling this function on the max length with a value of 5, sets the new max length value to: 5 + `_length`).\n     * Returns the new max length value.\n     *\n     * [CONDITIONS]\n     * `_length` must be GT 0.\n     *\n     * Emits the {ExtendWhitelistLength} event.\n     *\n     * @param _length, The desired length by which the max value will be extended.\n     *\n     * @return bool.\n     */\n    function extendWhitelistLength(uint256 _length) external returns (bool);\n\n    // ========== I N T E R F A C E S ==========\n}\n",
  "sourceMap": "",
  "sourcePath": "contracts/contracts/packages/nft/contracts/interfaces/IWhitelist.sol",
  "type": "interface"
}