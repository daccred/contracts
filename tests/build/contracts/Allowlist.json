{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_allowlistOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "Unsigned",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "Signed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "Verified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "addressHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "name": "VerifySignature",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getAllowlistOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "verifySignature",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "verifySigner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "C:/Users/antho/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.6.0/contracts/access/Ownable.sol",
    "14": "contracts/contracts/packages/common/Allowlist.sol",
    "15": "contracts/contracts/packages/common/IAllowlist.sol",
    "5": "C:/Users/antho/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.6.0/contracts/utils/Context.sol"
  },
  "ast": {
    "absolutePath": "contracts/contracts/packages/common/Allowlist.sol",
    "exportedSymbols": {
      "Allowlist": [
        1120
      ],
      "Context": [
        6410
      ],
      "IAllowlist": [
        1161
      ],
      "Ownable": [
        6075
      ]
    },
    "id": 1121,
    "license": "GPL-3.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 944,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".8"
        ],
        "nodeType": "PragmaDirective",
        "src": "36:23:14"
      },
      {
        "absolutePath": "contracts/contracts/packages/common/IAllowlist.sol",
        "file": "./IAllowlist.sol",
        "id": 945,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1121,
        "sourceUnit": 1162,
        "src": "61:26:14",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "C:/Users/antho/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.6.0/contracts/access/Ownable.sol",
        "file": "@openzeppelin/contracts/access/Ownable.sol",
        "id": 946,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1121,
        "sourceUnit": 6076,
        "src": "88:52:14",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 948,
              "name": "IAllowlist",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1161,
              "src": "1267:10:14"
            },
            "id": 949,
            "nodeType": "InheritanceSpecifier",
            "src": "1267:10:14"
          },
          {
            "baseName": {
              "id": 950,
              "name": "Ownable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 6075,
              "src": "1279:7:14"
            },
            "id": 951,
            "nodeType": "InheritanceSpecifier",
            "src": "1279:7:14"
          }
        ],
        "canonicalName": "Allowlist",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 947,
          "nodeType": "StructuredDocumentation",
          "src": "142:1102:14",
          "text": " @title Allowlist Contract.\n @author Daccred.\n @dev  The allowlist contract serves as a general inheritable\n       contract that any contract with the need of working with\n       signatures and signature verifications can inherit and\n       work with with ease.\n       Allowlists allow you to ensure that a particular address\n       has been signed by a particular contract, and is therefore\n       eligible to receive or be minted a particular token or\n       partcular sets of tokens.\n       It will be necessary to state that this contract will be\n       directly owned by the Daccred.sol [link here], but on\n       deploy, the address of the wallet deploying the contract\n       will be stored as the `allowlistOwner`, this address\n       cannot be changed, and this address will be evaluated for\n       incoming signature confirmations.\n       The address must be the signer of the signature.\n       Changing this address means changing every signature\n       signed. This is not good.\n       For clarity:\n       Contract deployer: Daccred.sol."
        },
        "fullyImplemented": true,
        "id": 1120,
        "linearizedBaseContracts": [
          1120,
          6075,
          6410,
          1161
        ],
        "name": "Allowlist",
        "nameLocation": "1254:9:14",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "documentation": {
              "id": 952,
              "nodeType": "StructuredDocumentation",
              "src": "1293:223:14",
              "text": "@dev    The wallet that initiated the transaction to deploy\n         this allowlist contract\n         [And other subsequent ones inheriting this],\n         passed as msg.sender from the Daccred.sol."
            },
            "id": 954,
            "mutability": "mutable",
            "name": "allowlistOwner",
            "nameLocation": "1537:14:14",
            "nodeType": "VariableDeclaration",
            "scope": 1120,
            "src": "1521:30:14",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 953,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1521:7:14",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 974,
              "nodeType": "Block",
              "src": "1649:200:14",
              "statements": [
                {
                  "documentation": "@dev Require address is valid.",
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 966,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 961,
                          "name": "_allowlistOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 957,
                          "src": "1710:15:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 964,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1737:1:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 963,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1729:7:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 962,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "1729:7:14",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 965,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1729:10:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1710:29:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e76616c696420416464726573732e",
                        "id": 967,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1741:18:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ae7d29f8751519f0d95a4ed231f990a2eb8da9a4dcb3c93aea95b0d8ba934f03",
                          "typeString": "literal_string \"Invalid Address.\""
                        },
                        "value": "Invalid Address."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ae7d29f8751519f0d95a4ed231f990a2eb8da9a4dcb3c93aea95b0d8ba934f03",
                          "typeString": "literal_string \"Invalid Address.\""
                        }
                      ],
                      "id": 960,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1702:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 968,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1702:58:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 969,
                  "nodeType": "ExpressionStatement",
                  "src": "1702:58:14"
                },
                {
                  "documentation": "@dev Set the variable name.",
                  "expression": {
                    "id": 972,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 970,
                      "name": "allowlistOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 954,
                      "src": "1810:14:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 971,
                      "name": "_allowlistOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 957,
                      "src": "1827:15:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1810:32:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 973,
                  "nodeType": "ExpressionStatement",
                  "src": "1810:32:14"
                }
              ]
            },
            "documentation": {
              "id": 955,
              "nodeType": "StructuredDocumentation",
              "src": "1558:49:14",
              "text": "@dev constructor, setting the allowlistOwner."
            },
            "id": 975,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 958,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 957,
                  "mutability": "mutable",
                  "name": "_allowlistOwner",
                  "nameLocation": "1632:15:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 975,
                  "src": "1624:23:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 956,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1624:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1623:25:14"
            },
            "returnParameters": {
              "id": 959,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1649:0:14"
            },
            "scope": 1120,
            "src": "1612:237:14",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 976,
              "nodeType": "StructuredDocumentation",
              "src": "1855:87:14",
              "text": "@dev    Emitted when a signature is verified by the\n         allowlistOwner."
            },
            "eventSelector": "7e4fe2a2a805a357593fdbdde58c02f6a53d8b4960744cd31a98697fc11c2e36",
            "id": 982,
            "name": "VerifySignature",
            "nameLocation": "1953:15:14",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 981,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 978,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "addressHash",
                  "nameLocation": "1985:11:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 982,
                  "src": "1969:27:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 977,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1969:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 980,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "result",
                  "nameLocation": "2011:6:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 982,
                  "src": "1998:19:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 979,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1998:4:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1968:50:14"
            },
            "src": "1947:72:14"
          },
          {
            "body": {
              "id": 990,
              "nodeType": "Block",
              "src": "2230:38:14",
              "statements": [
                {
                  "expression": {
                    "id": 988,
                    "name": "allowlistOwner",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 954,
                    "src": "2247:14:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 987,
                  "id": 989,
                  "nodeType": "Return",
                  "src": "2240:21:14"
                }
              ]
            },
            "documentation": {
              "id": 983,
              "nodeType": "StructuredDocumentation",
              "src": "2025:141:14",
              "text": " @dev Return the allowlistOwner.\n @notice Callable by anyone.\n @return address of allowlistOwner."
            },
            "functionSelector": "6e0a8746",
            "id": 991,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getAllowlistOwner",
            "nameLocation": "2180:17:14",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 984,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2197:2:14"
            },
            "returnParameters": {
              "id": 987,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 986,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 991,
                  "src": "2221:7:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 985,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2221:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2220:9:14"
            },
            "scope": 1120,
            "src": "2171:97:14",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1148
            ],
            "body": {
              "id": 1006,
              "nodeType": "Block",
              "src": "2594:51:14",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1002,
                        "name": "hash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 994,
                        "src": "2628:4:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 1003,
                        "name": "sig",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 996,
                        "src": "2634:3:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 1001,
                      "name": "_verifySignature",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1072,
                      "src": "2611:16:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_bool_$",
                        "typeString": "function (bytes32,bytes memory) returns (bool)"
                      }
                    },
                    "id": 1004,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2611:27:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1000,
                  "id": 1005,
                  "nodeType": "Return",
                  "src": "2604:34:14"
                }
              ]
            },
            "documentation": {
              "id": 992,
              "nodeType": "StructuredDocumentation",
              "src": "2274:216:14",
              "text": " @dev  Returns true if the signer of signature `sig` is the `allowlistOwner`.\n       And false if otherwise.\n @notice Callable by anyone.\n @return bool true or false."
            },
            "functionSelector": "daca6f78",
            "id": 1007,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "verifySignature",
            "nameLocation": "2504:15:14",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 997,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 994,
                  "mutability": "mutable",
                  "name": "hash",
                  "nameLocation": "2528:4:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 1007,
                  "src": "2520:12:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 993,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2520:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 996,
                  "mutability": "mutable",
                  "name": "sig",
                  "nameLocation": "2547:3:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 1007,
                  "src": "2534:16:14",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 995,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "2534:5:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2519:32:14"
            },
            "returnParameters": {
              "id": 1000,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 999,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1007,
                  "src": "2584:4:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 998,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2584:4:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2583:6:14"
            },
            "scope": 1120,
            "src": "2495:150:14",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1071,
              "nodeType": "Block",
              "src": "3742:935:14",
              "statements": [
                {
                  "documentation": "@dev    Require that the caller is the owner [deployer]\n         of the contract, [the Daccred.sol].",
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 1024,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 1020,
                            "name": "_msgSender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 6400,
                            "src": "3897:10:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                              "typeString": "function () view returns (address)"
                            }
                          },
                          "id": 1021,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3897:12:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 1022,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 6003,
                            "src": "3913:5:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                              "typeString": "function () view returns (address)"
                            }
                          },
                          "id": 1023,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3913:7:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "3897:23:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4552433732313a3a2043616c6c20746f20636f6e7472616374206d616465206279206e6f6e2d6f776e6572",
                        "id": 1025,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3934:45:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b4900fd2ad468616a2143813643a9fbc92ffd6be49c5203fa2a284da28b52aec",
                          "typeString": "literal_string \"ERC721:: Call to contract made by non-owner\""
                        },
                        "value": "ERC721:: Call to contract made by non-owner"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b4900fd2ad468616a2143813643a9fbc92ffd6be49c5203fa2a284da28b52aec",
                          "typeString": "literal_string \"ERC721:: Call to contract made by non-owner\""
                        }
                      ],
                      "id": 1019,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3876:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1026,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3876:113:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1027,
                  "nodeType": "ExpressionStatement",
                  "src": "3876:113:14"
                },
                {
                  "documentation": "@dev Require the length of the signature is 65.",
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1032,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 1029,
                            "name": "sig",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1012,
                            "src": "4067:3:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "id": 1030,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "4067:10:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "3635",
                          "id": 1031,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4081:2:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_65_by_1",
                            "typeString": "int_const 65"
                          },
                          "value": "65"
                        },
                        "src": "4067:16:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4572723a3a20496e76616c6964207369676e6174757265206c656e677468",
                        "id": 1033,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4085:32:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_afde7a5993b74c3d5ded0cabf51ed426adeaaefb6fe4a308dd078080ef4ff925",
                          "typeString": "literal_string \"Err:: Invalid signature length\""
                        },
                        "value": "Err:: Invalid signature length"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_afde7a5993b74c3d5ded0cabf51ed426adeaaefb6fe4a308dd078080ef4ff925",
                          "typeString": "literal_string \"Err:: Invalid signature length\""
                        }
                      ],
                      "id": 1028,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4059:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1034,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4059:59:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1035,
                  "nodeType": "ExpressionStatement",
                  "src": "4059:59:14"
                },
                {
                  "assignments": [
                    1037,
                    1039,
                    1041
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1037,
                      "mutability": "mutable",
                      "name": "r",
                      "nameLocation": "4205:1:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 1071,
                      "src": "4197:9:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 1036,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "4197:7:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1039,
                      "mutability": "mutable",
                      "name": "s",
                      "nameLocation": "4216:1:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 1071,
                      "src": "4208:9:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 1038,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "4208:7:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1041,
                      "mutability": "mutable",
                      "name": "v",
                      "nameLocation": "4225:1:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 1071,
                      "src": "4219:7:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      },
                      "typeName": {
                        "id": 1040,
                        "name": "uint8",
                        "nodeType": "ElementaryTypeName",
                        "src": "4219:5:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "documentation": "@dev Use assembly to get the 3 sections of a signature.",
                  "id": 1045,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 1043,
                        "name": "sig",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1012,
                        "src": "4245:3:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 1042,
                      "name": "splitSignature",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1119,
                      "src": "4230:14:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$_t_bytes32_$_t_uint8_$",
                        "typeString": "function (bytes memory) pure returns (bytes32,bytes32,uint8)"
                      }
                    },
                    "id": 1044,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4230:19:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bytes32_$_t_bytes32_$_t_uint8_$",
                      "typeString": "tuple(bytes32,bytes32,uint8)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4196:53:14"
                },
                {
                  "assignments": [
                    1048
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1048,
                      "mutability": "mutable",
                      "name": "signer",
                      "nameLocation": "4322:6:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 1071,
                      "src": "4314:14:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1047,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4314:7:14",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "documentation": "@dev    Using ecrecover to get the signer.",
                  "id": 1055,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 1050,
                        "name": "hash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1010,
                        "src": "4341:4:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 1051,
                        "name": "v",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1041,
                        "src": "4347:1:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      {
                        "id": 1052,
                        "name": "r",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1037,
                        "src": "4350:1:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 1053,
                        "name": "s",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1039,
                        "src": "4353:1:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 1049,
                      "name": "ecrecover",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -6,
                      "src": "4331:9:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
                        "typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
                      }
                    },
                    "id": 1054,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4331:24:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4314:41:14"
                },
                {
                  "assignments": [
                    1058
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1058,
                      "mutability": "mutable",
                      "name": "signerIsAllowlistOwner",
                      "nameLocation": "4433:22:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 1071,
                      "src": "4428:27:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1057,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "4428:4:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "documentation": "@dev Verify that the signer is the allowlistOwner.",
                  "id": 1063,
                  "initialValue": {
                    "components": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 1061,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 1059,
                          "name": "signer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1048,
                          "src": "4459:6:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 1060,
                          "name": "allowlistOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 954,
                          "src": "4469:14:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "4459:24:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "id": 1062,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "4458:26:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4428:56:14"
                },
                {
                  "documentation": "@dev Emit the {VerifySignature} event.",
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 1065,
                        "name": "hash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1010,
                        "src": "4566:4:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 1066,
                        "name": "signerIsAllowlistOwner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1058,
                        "src": "4572:22:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 1064,
                      "name": "VerifySignature",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 982,
                      "src": "4550:15:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_bool_$returns$__$",
                        "typeString": "function (bytes32,bool)"
                      }
                    },
                    "id": 1067,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4550:45:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1068,
                  "nodeType": "EmitStatement",
                  "src": "4545:50:14"
                },
                {
                  "documentation": "@dev Return the result.",
                  "expression": {
                    "id": 1069,
                    "name": "signerIsAllowlistOwner",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1058,
                    "src": "4648:22:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1018,
                  "id": 1070,
                  "nodeType": "Return",
                  "src": "4641:29:14"
                }
              ]
            },
            "documentation": {
              "id": 1008,
              "nodeType": "StructuredDocumentation",
              "src": "2651:966:14",
              "text": " @dev  Evaluate and return that a particular address message\n       was signed by the allowlistOwner.\n       In the SoulboundCore.sol, this function will be used\n       in the {issueWithSignature} function, to verify that\n       the hash of the address was indeed signed by the\n       allowlistOwner.\n       This functin will be called from the Daccred.sol or\n       DaccredDeployer.sol where the address of the\n       allowlistOwner will be passed to the function, as\n       msg.sender. Meaning that only the owner of the\n       allowlist deployed from the Daccred.sol can call\n       the function.\n       Or using the getAllowlistOwner() for validations.\n @notice Callable by this or inheriting contract.\n @param hash   Hash of the address.\n @param sig    Signature of the transaction, made offchain.\n @return bool true or false."
            },
            "id": 1072,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 1015,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1014,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 6017,
                  "src": "3705:9:14"
                },
                "nodeType": "ModifierInvocation",
                "src": "3705:9:14"
              }
            ],
            "name": "_verifySignature",
            "nameLocation": "3631:16:14",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1013,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1010,
                  "mutability": "mutable",
                  "name": "hash",
                  "nameLocation": "3656:4:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 1072,
                  "src": "3648:12:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1009,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3648:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1012,
                  "mutability": "mutable",
                  "name": "sig",
                  "nameLocation": "3675:3:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 1072,
                  "src": "3662:16:14",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1011,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3662:5:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3647:32:14"
            },
            "returnParameters": {
              "id": 1018,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1017,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1072,
                  "src": "3732:4:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1016,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3732:4:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3731:6:14"
            },
            "scope": 1120,
            "src": "3622:1055:14",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "baseFunctions": [
              1160
            ],
            "body": {
              "id": 1104,
              "nodeType": "Block",
              "src": "4988:132:14",
              "statements": [
                {
                  "assignments": [
                    1085,
                    1087,
                    1089
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1085,
                      "mutability": "mutable",
                      "name": "r",
                      "nameLocation": "5007:1:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 1104,
                      "src": "4999:9:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 1084,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "4999:7:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1087,
                      "mutability": "mutable",
                      "name": "s",
                      "nameLocation": "5018:1:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 1104,
                      "src": "5010:9:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 1086,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "5010:7:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1089,
                      "mutability": "mutable",
                      "name": "v",
                      "nameLocation": "5027:1:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 1104,
                      "src": "5021:7:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      },
                      "typeName": {
                        "id": 1088,
                        "name": "uint8",
                        "nodeType": "ElementaryTypeName",
                        "src": "5021:5:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1093,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 1091,
                        "name": "_signature",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1079,
                        "src": "5047:10:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 1090,
                      "name": "splitSignature",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1119,
                      "src": "5032:14:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$_t_bytes32_$_t_uint8_$",
                        "typeString": "function (bytes memory) pure returns (bytes32,bytes32,uint8)"
                      }
                    },
                    "id": 1092,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5032:26:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bytes32_$_t_bytes32_$_t_uint8_$",
                      "typeString": "tuple(bytes32,bytes32,uint8)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4998:60:14"
                },
                {
                  "expression": {
                    "components": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 1101,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 1094,
                          "name": "_signer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1075,
                          "src": "5076:7:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "id": 1096,
                              "name": "_hash",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1077,
                              "src": "5097:5:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "id": 1097,
                              "name": "v",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1089,
                              "src": "5104:1:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            {
                              "id": 1098,
                              "name": "r",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1085,
                              "src": "5107:1:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "id": 1099,
                              "name": "s",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1087,
                              "src": "5110:1:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 1095,
                            "name": "ecrecover",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -6,
                            "src": "5087:9:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
                              "typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
                            }
                          },
                          "id": 1100,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5087:25:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "5076:36:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "id": 1102,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "5075:38:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1083,
                  "id": 1103,
                  "nodeType": "Return",
                  "src": "5068:45:14"
                }
              ]
            },
            "documentation": {
              "id": 1073,
              "nodeType": "StructuredDocumentation",
              "src": "4683:164:14",
              "text": " @dev Returns true if the signer of `_signature` is `_signer`.\n @notice Callable by anyone.\n @return bool true or false."
            },
            "functionSelector": "e92b0842",
            "id": 1105,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "verifySigner",
            "nameLocation": "4861:12:14",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1080,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1075,
                  "mutability": "mutable",
                  "name": "_signer",
                  "nameLocation": "4891:7:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 1105,
                  "src": "4883:15:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1074,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4883:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1077,
                  "mutability": "mutable",
                  "name": "_hash",
                  "nameLocation": "4916:5:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 1105,
                  "src": "4908:13:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1076,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4908:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1079,
                  "mutability": "mutable",
                  "name": "_signature",
                  "nameLocation": "4944:10:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 1105,
                  "src": "4931:23:14",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1078,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "4931:5:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4873:87:14"
            },
            "returnParameters": {
              "id": 1083,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1082,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1105,
                  "src": "4982:4:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1081,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4982:4:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4981:6:14"
            },
            "scope": 1120,
            "src": "4852:268:14",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1118,
              "nodeType": "Block",
              "src": "5531:744:14",
              "statements": [
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "5550:719:14",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "6047:24:14",
                        "value": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "sig",
                                  "nodeType": "YulIdentifier",
                                  "src": "6062:3:14"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6067:2:14",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "6058:3:14"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6058:12:14"
                            }
                          ],
                          "functionName": {
                            "name": "mload",
                            "nodeType": "YulIdentifier",
                            "src": "6052:5:14"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "6052:19:14"
                        },
                        "variableNames": [
                          {
                            "name": "r",
                            "nodeType": "YulIdentifier",
                            "src": "6047:1:14"
                          }
                        ]
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "6122:24:14",
                        "value": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "sig",
                                  "nodeType": "YulIdentifier",
                                  "src": "6137:3:14"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6142:2:14",
                                  "type": "",
                                  "value": "64"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "6133:3:14"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6133:12:14"
                            }
                          ],
                          "functionName": {
                            "name": "mload",
                            "nodeType": "YulIdentifier",
                            "src": "6127:5:14"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "6127:19:14"
                        },
                        "variableNames": [
                          {
                            "name": "s",
                            "nodeType": "YulIdentifier",
                            "src": "6122:1:14"
                          }
                        ]
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "6226:33:14",
                        "value": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "6236:1:14",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "sig",
                                      "nodeType": "YulIdentifier",
                                      "src": "6249:3:14"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6254:2:14",
                                      "type": "",
                                      "value": "96"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "6245:3:14"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6245:12:14"
                                }
                              ],
                              "functionName": {
                                "name": "mload",
                                "nodeType": "YulIdentifier",
                                "src": "6239:5:14"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6239:19:14"
                            }
                          ],
                          "functionName": {
                            "name": "byte",
                            "nodeType": "YulIdentifier",
                            "src": "6231:4:14"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "6231:28:14"
                        },
                        "variableNames": [
                          {
                            "name": "v",
                            "nodeType": "YulIdentifier",
                            "src": "6226:1:14"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 1111,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "6047:1:14",
                      "valueSize": 1
                    },
                    {
                      "declaration": 1113,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "6122:1:14",
                      "valueSize": 1
                    },
                    {
                      "declaration": 1108,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "6062:3:14",
                      "valueSize": 1
                    },
                    {
                      "declaration": 1108,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "6137:3:14",
                      "valueSize": 1
                    },
                    {
                      "declaration": 1108,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "6249:3:14",
                      "valueSize": 1
                    },
                    {
                      "declaration": 1115,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "6226:1:14",
                      "valueSize": 1
                    }
                  ],
                  "id": 1117,
                  "nodeType": "InlineAssembly",
                  "src": "5541:728:14"
                }
              ]
            },
            "documentation": {
              "id": 1106,
              "nodeType": "StructuredDocumentation",
              "src": "5126:231:14",
              "text": " @dev  This function makes use of assembly to split the signature\n       into 3 parts.\n @param sig The signature to split with Assembly.\n @return r\n @return s\n @return v"
            },
            "id": 1119,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "splitSignature",
            "nameLocation": "5371:14:14",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1109,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1108,
                  "mutability": "mutable",
                  "name": "sig",
                  "nameLocation": "5399:3:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 1119,
                  "src": "5386:16:14",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1107,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "5386:5:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5385:18:14"
            },
            "returnParameters": {
              "id": 1116,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1111,
                  "mutability": "mutable",
                  "name": "r",
                  "nameLocation": "5471:1:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 1119,
                  "src": "5463:9:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1110,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5463:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1113,
                  "mutability": "mutable",
                  "name": "s",
                  "nameLocation": "5494:1:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 1119,
                  "src": "5486:9:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1112,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5486:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1115,
                  "mutability": "mutable",
                  "name": "v",
                  "nameLocation": "5515:1:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 1119,
                  "src": "5509:7:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 1114,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "5509:5:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5449:77:14"
            },
            "scope": 1120,
            "src": "5362:913:14",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "private"
          }
        ],
        "scope": 1121,
        "src": "1245:5032:14",
        "usedErrors": [
          1138
        ]
      }
    ],
    "src": "36:6242:14"
  },
  "bytecode": "608060405234801561001057600080fd5b5060405161078638038061078683398101604081905261002f916100fa565b610038336100aa565b6001600160a01b0381166100855760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b21020b2323932b9b99760811b604482015260640160405180910390fd5b600180546001600160a01b0319166001600160a01b039290921691909117905561012a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561010c57600080fd5b81516001600160a01b038116811461012357600080fd5b9392505050565b61064d806101396000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80636e0a874614610067578063715018a6146100915780638da5cb5b1461009b578063daca6f78146100ac578063e92b0842146100cf578063f2fde38b146100e2575b600080fd5b6001546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100996100f5565b005b6000546001600160a01b0316610074565b6100bf6100ba36600461050d565b610134565b6040519015158152602001610088565b6100bf6100dd366004610570565b610147565b6100996100f03660046105c7565b6101db565b6000546001600160a01b031633146101285760405162461bcd60e51b815260040161011f906105e2565b60405180910390fd5b6101326000610276565b565b600061014083836102c6565b9392505050565b602081810151604080840151606080860151835160008082528188018087528a905291821a81860181905292810186905260808101849052935190959293919260019260a080820193601f1981019281900390910190855afa1580156101b1573d6000803e3d6000fd5b505050602060405103516001600160a01b0316876001600160a01b03161493505050509392505050565b6000546001600160a01b031633146102055760405162461bcd60e51b815260040161011f906105e2565b6001600160a01b03811661026a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161011f565b61027381610276565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080546001600160a01b031633146102f15760405162461bcd60e51b815260040161011f906105e2565b6000546001600160a01b0316331461035f5760405162461bcd60e51b815260206004820152602b60248201527f4552433732313a3a2043616c6c20746f20636f6e7472616374206d616465206260448201526a3c903737b716b7bbb732b960a91b606482015260840161011f565b81516041146103b05760405162461bcd60e51b815260206004820152601e60248201527f4572723a3a20496e76616c6964207369676e6174757265206c656e6774680000604482015260640161011f565b602082810151604080850151606080870151835160008082529681018086528a905290861a938101849052908101849052608081018290529293909260019060a0016020604051602081039080840390855afa158015610414573d6000803e3d6000fd5b5050604051601f198101516001549093506001600160a01b038085169116149150819089907f7e4fe2a2a805a357593fdbdde58c02f6a53d8b4960744cd31a98697fc11c2e3690600090a3979650505050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261049157600080fd5b813567ffffffffffffffff808211156104ac576104ac61046a565b604051601f8301601f19908116603f011681019082821181831017156104d4576104d461046a565b816040528381528660208588010111156104ed57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561052057600080fd5b82359150602083013567ffffffffffffffff81111561053e57600080fd5b61054a85828601610480565b9150509250929050565b80356001600160a01b038116811461056b57600080fd5b919050565b60008060006060848603121561058557600080fd5b61058e84610554565b925060208401359150604084013567ffffffffffffffff8111156105b157600080fd5b6105bd86828701610480565b9150509250925092565b6000602082840312156105d957600080fd5b61014082610554565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea26469706673582212204578af6e2def00ec4b3c5ded9c1fc1a6fca5af582440a5e0baacb0e233f2b9d864736f6c634300080f0033",
  "bytecodeSha1": "551319127cdb9fbe01dc66d31d0c29a0093727e8",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.15+commit.e14f2714"
  },
  "contractName": "Allowlist",
  "coverageMap": {
    "branches": {
      "0": {
        "Ownable.transferOwnership": {
          "16": [
            2006,
            2028,
            true
          ]
        }
      },
      "14": {
        "Allowlist._verifySignature": {
          "14": [
            3897,
            3920,
            true
          ],
          "15": [
            4067,
            4083,
            true
          ]
        }
      },
      "15": {},
      "5": {}
    },
    "statements": {
      "0": {
        "Ownable._transferOwnership": {
          "8": [
            2378,
            2395
          ],
          "9": [
            2405,
            2450
          ]
        },
        "Ownable.owner": {
          "1": [
            1101,
            1114
          ]
        },
        "Ownable.renounceOwnership": {
          "3": [
            1732,
            1762
          ]
        },
        "Ownable.transferOwnership": {
          "6": [
            1998,
            2071
          ],
          "7": [
            2081,
            2109
          ]
        }
      },
      "14": {
        "Allowlist._verifySignature": {
          "10": [
            3876,
            3989
          ],
          "11": [
            4059,
            4118
          ],
          "12": [
            4545,
            4595
          ],
          "13": [
            4641,
            4670
          ]
        },
        "Allowlist.getAllowlistOwner": {
          "0": [
            2240,
            2261
          ]
        },
        "Allowlist.verifySignature": {
          "4": [
            2604,
            2638
          ]
        },
        "Allowlist.verifySigner": {
          "5": [
            5068,
            5113
          ]
        }
      },
      "15": {},
      "5": {
        "Context._msgSender": {
          "2": [
            712,
            729
          ]
        }
      }
    }
  },
  "dependencies": [
    "OpenZeppelin/openzeppelin-contracts@4.6.0/Context",
    "IAllowlist",
    "OpenZeppelin/openzeppelin-contracts@4.6.0/Ownable"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100625760003560e01c80636e0a874614610067578063715018a6146100915780638da5cb5b1461009b578063daca6f78146100ac578063e92b0842146100cf578063f2fde38b146100e2575b600080fd5b6001546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100996100f5565b005b6000546001600160a01b0316610074565b6100bf6100ba36600461050d565b610134565b6040519015158152602001610088565b6100bf6100dd366004610570565b610147565b6100996100f03660046105c7565b6101db565b6000546001600160a01b031633146101285760405162461bcd60e51b815260040161011f906105e2565b60405180910390fd5b6101326000610276565b565b600061014083836102c6565b9392505050565b602081810151604080840151606080860151835160008082528188018087528a905291821a81860181905292810186905260808101849052935190959293919260019260a080820193601f1981019281900390910190855afa1580156101b1573d6000803e3d6000fd5b505050602060405103516001600160a01b0316876001600160a01b03161493505050509392505050565b6000546001600160a01b031633146102055760405162461bcd60e51b815260040161011f906105e2565b6001600160a01b03811661026a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161011f565b61027381610276565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080546001600160a01b031633146102f15760405162461bcd60e51b815260040161011f906105e2565b6000546001600160a01b0316331461035f5760405162461bcd60e51b815260206004820152602b60248201527f4552433732313a3a2043616c6c20746f20636f6e7472616374206d616465206260448201526a3c903737b716b7bbb732b960a91b606482015260840161011f565b81516041146103b05760405162461bcd60e51b815260206004820152601e60248201527f4572723a3a20496e76616c6964207369676e6174757265206c656e6774680000604482015260640161011f565b602082810151604080850151606080870151835160008082529681018086528a905290861a938101849052908101849052608081018290529293909260019060a0016020604051602081039080840390855afa158015610414573d6000803e3d6000fd5b5050604051601f198101516001549093506001600160a01b038085169116149150819089907f7e4fe2a2a805a357593fdbdde58c02f6a53d8b4960744cd31a98697fc11c2e3690600090a3979650505050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261049157600080fd5b813567ffffffffffffffff808211156104ac576104ac61046a565b604051601f8301601f19908116603f011681019082821181831017156104d4576104d461046a565b816040528381528660208588010111156104ed57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561052057600080fd5b82359150602083013567ffffffffffffffff81111561053e57600080fd5b61054a85828601610480565b9150509250929050565b80356001600160a01b038116811461056b57600080fd5b919050565b60008060006060848603121561058557600080fd5b61058e84610554565b925060208401359150604084013567ffffffffffffffff8111156105b157600080fd5b6105bd86828701610480565b9150509250925092565b6000602082840312156105d957600080fd5b61014082610554565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea26469706673582212204578af6e2def00ec4b3c5ded9c1fc1a6fca5af582440a5e0baacb0e233f2b9d864736f6c634300080f0033",
  "deployedSourceMap": "1245:5032:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2171:97;2247:14;;-1:-1:-1;;;;;2247:14:14;2171:97;;;-1:-1:-1;;;;;178:32:43;;;160:51;;148:2;133:18;2171:97:14;;;;;;;;1668:101:0;;;:::i;:::-;;1036:85;1082:7;1108:6;-1:-1:-1;;;;;1108:6:0;1036:85;;2495:150:14;;;;;;:::i;:::-;;:::i;:::-;;;1635:14:43;;1628:22;1610:41;;1598:2;1583:18;2495:150:14;1470:187:43;4852:268:14;;;;;;:::i;:::-;;:::i;1918:198:0:-;;;;;;:::i;:::-;;:::i;1668:101::-;1082:7;1108:6;-1:-1:-1;;;;;1108:6:0;719:10:5;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;;;;;;;;;1732:30:::1;1759:1;1732:18;:30::i;:::-;1668:101::o:0;2495:150:14:-;2584:4;2611:27;2628:4;2634:3;2611:16;:27::i;:::-;2604:34;2495:150;-1:-1:-1;;;2495:150:14:o;4852:268::-;6067:2;6058:12;;;6052:19;6142:2;6133:12;;;6127:19;6254:2;6245:12;;;6239:19;5087:25;;4982:4;5087:25;;;;;;;;;3086::43;;;6231:28:14;;;3127:18:43;;;3120:45;;;3181:18;;;3174:34;;;3224:18;;;3217:34;;;5087:25:14;;4982:4;;6127:19;;6231:28;;5087:25;;3058:19:43;;;;;-1:-1:-1;;5087:25:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5076:36:14;:7;-1:-1:-1;;;;;5076:36:14;;5068:45;;;;;4852:268;;;;;:::o;1918:198:0:-;1082:7;1108:6;-1:-1:-1;;;;;1108:6:0;719:10:5;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;2006:22:0;::::1;1998:73;;;::::0;-1:-1:-1;;;1998:73:0;;3464:2:43;1998:73:0::1;::::0;::::1;3446:21:43::0;3503:2;3483:18;;;3476:30;3542:34;3522:18;;;3515:62;-1:-1:-1;;;3593:18:43;;;3586:36;3639:19;;1998:73:0::1;3262:402:43::0;1998:73:0::1;2081:28;2100:8;2081:18;:28::i;:::-;1918:198:::0;:::o;2270:187::-;2343:16;2362:6;;-1:-1:-1;;;;;2378:17:0;;;-1:-1:-1;;;;;;2378:17:0;;;;;;2410:40;;2362:6;;;;;;;2410:40;;2343:16;2410:40;2333:124;2270:187;:::o;3622:1055:14:-;3732:4;1108:6:0;;-1:-1:-1;;;;;1108:6:0;719:10:5;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;1082:7;1108:6;-1:-1:-1;;;;;1108:6:0;719:10:5;3897:23:14::1;3876:113;;;::::0;-1:-1:-1;;;3876:113:14;;3871:2:43;3876:113:14::1;::::0;::::1;3853:21:43::0;3910:2;3890:18;;;3883:30;3949:34;3929:18;;;3922:62;-1:-1:-1;;;4000:18:43;;;3993:41;4051:19;;3876:113:14::1;3669:407:43::0;3876:113:14::1;4067:3;:10;4081:2;4067:16;4059:59;;;::::0;-1:-1:-1;;;4059:59:14;;4283:2:43;4059:59:14::1;::::0;::::1;4265:21:43::0;4322:2;4302:18;;;4295:30;4361:32;4341:18;;;4334:60;4411:18;;4059:59:14::1;4081:354:43::0;4059:59:14::1;6067:2:::0;6058:12;;;6052:19;6142:2;6133:12;;;6127:19;6254:2;6245:12;;;6239:19;4331:24;;4197:9:::1;4331:24:::0;;;;;::::1;::::0;;;3086:25:43;;;6231:28:14;;;3127:18:43;;;3120:45;;;3181:18;;;3174:34;;;3224:18;;;3217:34;;;6052:19:14;;6127;;4331:24:::1;::::0;3058:19:43;;4331:24:14::1;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;4331:24:14::1;::::0;-1:-1:-1;;4331:24:14;;;4469:14:::1;::::0;4331:24;;-1:-1:-1;;;;;;4459:24:14;;::::1;4469:14:::0;::::1;4459:24;::::0;-1:-1:-1;4459:24:14;;4566:4;;4550:45:::1;::::0;4428:27:::1;::::0;4550:45:::1;4648:22:::0;3622:1055;-1:-1:-1;;;;;;;3622:1055:14:o;222:127:43:-;283:10;278:3;274:20;271:1;264:31;314:4;311:1;304:15;338:4;335:1;328:15;354:718;396:5;449:3;442:4;434:6;430:17;426:27;416:55;;467:1;464;457:12;416:55;503:6;490:20;529:18;566:2;562;559:10;556:36;;;572:18;;:::i;:::-;647:2;641:9;615:2;701:13;;-1:-1:-1;;697:22:43;;;721:2;693:31;689:40;677:53;;;745:18;;;765:22;;;742:46;739:72;;;791:18;;:::i;:::-;831:10;827:2;820:22;866:2;858:6;851:18;912:3;905:4;900:2;892:6;888:15;884:26;881:35;878:55;;;929:1;926;919:12;878:55;993:2;986:4;978:6;974:17;967:4;959:6;955:17;942:54;1040:1;1033:4;1028:2;1020:6;1016:15;1012:26;1005:37;1060:6;1051:15;;;;;;354:718;;;;:::o;1077:388::-;1154:6;1162;1215:2;1203:9;1194:7;1190:23;1186:32;1183:52;;;1231:1;1228;1221:12;1183:52;1267:9;1254:23;1244:33;;1328:2;1317:9;1313:18;1300:32;1355:18;1347:6;1344:30;1341:50;;;1387:1;1384;1377:12;1341:50;1410:49;1451:7;1442:6;1431:9;1427:22;1410:49;:::i;:::-;1400:59;;;1077:388;;;;;:::o;1662:173::-;1730:20;;-1:-1:-1;;;;;1779:31:43;;1769:42;;1759:70;;1825:1;1822;1815:12;1759:70;1662:173;;;:::o;1840:462::-;1926:6;1934;1942;1995:2;1983:9;1974:7;1970:23;1966:32;1963:52;;;2011:1;2008;2001:12;1963:52;2034:29;2053:9;2034:29;:::i;:::-;2024:39;;2110:2;2099:9;2095:18;2082:32;2072:42;;2165:2;2154:9;2150:18;2137:32;2192:18;2184:6;2181:30;2178:50;;;2224:1;2221;2214:12;2178:50;2247:49;2288:7;2279:6;2268:9;2264:22;2247:49;:::i;:::-;2237:59;;;1840:462;;;;;:::o;2307:186::-;2366:6;2419:2;2407:9;2398:7;2394:23;2390:32;2387:52;;;2435:1;2432;2425:12;2387:52;2458:29;2477:9;2458:29;:::i;2498:356::-;2700:2;2682:21;;;2719:18;;;2712:30;2778:34;2773:2;2758:18;;2751:62;2845:2;2830:18;;2498:356::o",
  "language": "Solidity",
  "natspec": {
    "author": "Daccred.",
    "details": "The allowlist contract serves as a general inheritable       contract that any contract with the need of working with       signatures and signature verifications can inherit and       work with with ease.       Allowlists allow you to ensure that a particular address       has been signed by a particular contract, and is therefore       eligible to receive or be minted a particular token or       partcular sets of tokens.       It will be necessary to state that this contract will be       directly owned by the Daccred.sol [link here], but on       deploy, the address of the wallet deploying the contract       will be stored as the `allowlistOwner`, this address       cannot be changed, and this address will be evaluated for       incoming signature confirmations.       The address must be the signer of the signature.       Changing this address means changing every signature       signed. This is not good.       For clarity:       Contract deployer: Daccred.sol.",
    "errors": {
      "Unsigned(address)": [
        {
          "details": "Thrown when the address passed to the verify function is not signed."
        }
      ]
    },
    "events": {
      "VerifySignature(bytes32,bool)": {
        "details": "Emitted when a signature is verified by the         allowlistOwner."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "constructor, setting the allowlistOwner."
      },
      "getAllowlistOwner()": {
        "details": "Return the allowlistOwner.",
        "notice": "Callable by anyone.",
        "returns": {
          "_0": "address of allowlistOwner."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "verifySignature(bytes32,bytes)": {
        "details": "Returns true if the signer of signature `sig` is the `allowlistOwner`.       And false if otherwise.",
        "notice": "Callable by anyone.",
        "returns": {
          "_0": "bool true or false."
        }
      },
      "verifySigner(address,bytes32,bytes)": {
        "details": "Returns true if the signer of `_signature` is `_signer`.",
        "notice": "Callable by anyone.",
        "returns": {
          "_0": "bool true or false."
        }
      }
    },
    "stateVariables": {
      "allowlistOwner": {
        "details": "The wallet that initiated the transaction to deploy         this allowlist contract         [And other subsequent ones inheriting this],         passed as msg.sender from the Daccred.sol."
      }
    },
    "title": "Allowlist Contract.",
    "version": 1
  },
  "offset": [
    1245,
    6277
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x62 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6E0A8746 EQ PUSH2 0x67 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x91 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x9B JUMPI DUP1 PUSH4 0xDACA6F78 EQ PUSH2 0xAC JUMPI DUP1 PUSH4 0xE92B0842 EQ PUSH2 0xCF JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xE2 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 PUSH2 0xF5 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x74 JUMP JUMPDEST PUSH2 0xBF PUSH2 0xBA CALLDATASIZE PUSH1 0x4 PUSH2 0x50D JUMP JUMPDEST PUSH2 0x134 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x88 JUMP JUMPDEST PUSH2 0xBF PUSH2 0xDD CALLDATASIZE PUSH1 0x4 PUSH2 0x570 JUMP JUMPDEST PUSH2 0x147 JUMP JUMPDEST PUSH2 0x99 PUSH2 0xF0 CALLDATASIZE PUSH1 0x4 PUSH2 0x5C7 JUMP JUMPDEST PUSH2 0x1DB JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x128 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11F SWAP1 PUSH2 0x5E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x132 PUSH1 0x0 PUSH2 0x276 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x140 DUP4 DUP4 PUSH2 0x2C6 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 DUP2 ADD MLOAD PUSH1 0x40 DUP1 DUP5 ADD MLOAD PUSH1 0x60 DUP1 DUP7 ADD MLOAD DUP4 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE DUP2 DUP9 ADD DUP1 DUP8 MSTORE DUP11 SWAP1 MSTORE SWAP2 DUP3 BYTE DUP2 DUP7 ADD DUP2 SWAP1 MSTORE SWAP3 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP5 SWAP1 MSTORE SWAP4 MLOAD SWAP1 SWAP6 SWAP3 SWAP4 SWAP2 SWAP3 PUSH1 0x1 SWAP3 PUSH1 0xA0 DUP1 DUP3 ADD SWAP4 PUSH1 0x1F NOT DUP2 ADD SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ SWAP4 POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x205 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11F SWAP1 PUSH2 0x5E2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x26A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x11F JUMP JUMPDEST PUSH2 0x273 DUP2 PUSH2 0x276 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2F1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11F SWAP1 PUSH2 0x5E2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x35F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A3A2043616C6C20746F20636F6E7472616374206D6164652062 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x3C903737B716B7BBB732B9 PUSH1 0xA9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x11F JUMP JUMPDEST DUP2 MLOAD PUSH1 0x41 EQ PUSH2 0x3B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4572723A3A20496E76616C6964207369676E6174757265206C656E6774680000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x11F JUMP JUMPDEST PUSH1 0x20 DUP3 DUP2 ADD MLOAD PUSH1 0x40 DUP1 DUP6 ADD MLOAD PUSH1 0x60 DUP1 DUP8 ADD MLOAD DUP4 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE SWAP7 DUP2 ADD DUP1 DUP7 MSTORE DUP11 SWAP1 MSTORE SWAP1 DUP7 BYTE SWAP4 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE SWAP3 SWAP4 SWAP1 SWAP3 PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x414 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT DUP2 ADD MLOAD PUSH1 0x1 SLOAD SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP2 AND EQ SWAP2 POP DUP2 SWAP1 DUP10 SWAP1 PUSH32 0x7E4FE2A2A805A357593FDBDDE58C02F6A53D8B4960744CD31A98697FC11C2E36 SWAP1 PUSH1 0x0 SWAP1 LOG3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x491 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4AC JUMPI PUSH2 0x4AC PUSH2 0x46A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x4D4 JUMPI PUSH2 0x4D4 PUSH2 0x46A JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x4ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x520 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x53E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x54A DUP6 DUP3 DUP7 ADD PUSH2 0x480 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x56B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x585 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x58E DUP5 PUSH2 0x554 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x5B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5BD DUP7 DUP3 DUP8 ADD PUSH2 0x480 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x140 DUP3 PUSH2 0x554 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GASLIMIT PUSH25 0xAF6E2DEF00EC4B3C5DED9C1FC1A6FCA5AF582440A5E0BAACB0 0xE2 CALLER CALLCODE 0xB9 0xD8 PUSH5 0x736F6C6343 STOP ADDMOD 0xF STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        1245,
        6277
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "5": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "CALLVALUE",
      "path": "14"
    },
    "6": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "DUP1",
      "path": "14"
    },
    "7": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "8": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "12": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "DUP1",
      "path": "14"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "REVERT",
      "path": "14"
    },
    "16": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "17": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "POP",
      "path": "14"
    },
    "18": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "CALLDATASIZE",
      "path": "14"
    },
    "21": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "LT",
      "path": "14"
    },
    "22": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x62"
    },
    "25": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "26": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "CALLDATALOAD",
      "path": "14"
    },
    "29": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "SHR",
      "path": "14"
    },
    "32": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "DUP1",
      "path": "14"
    },
    "33": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0x6E0A8746"
    },
    "38": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "EQ",
      "path": "14"
    },
    "39": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x67"
    },
    "42": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "43": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "DUP1",
      "path": "14"
    },
    "44": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0x715018A6"
    },
    "49": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "EQ",
      "path": "14"
    },
    "50": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x91"
    },
    "53": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "54": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "DUP1",
      "path": "14"
    },
    "55": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0x8DA5CB5B"
    },
    "60": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "EQ",
      "path": "14"
    },
    "61": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x9B"
    },
    "64": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "65": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "DUP1",
      "path": "14"
    },
    "66": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0xDACA6F78"
    },
    "71": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "EQ",
      "path": "14"
    },
    "72": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xAC"
    },
    "75": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "76": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "DUP1",
      "path": "14"
    },
    "77": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0xE92B0842"
    },
    "82": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "EQ",
      "path": "14"
    },
    "83": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xCF"
    },
    "86": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "87": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "DUP1",
      "path": "14"
    },
    "88": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "PUSH4",
      "path": "14",
      "value": "0xF2FDE38B"
    },
    "93": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "EQ",
      "path": "14"
    },
    "94": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xE2"
    },
    "97": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "98": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "99": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "101": {
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "DUP1",
      "path": "14"
    },
    "102": {
      "first_revert": true,
      "fn": null,
      "offset": [
        1245,
        6277
      ],
      "op": "REVERT",
      "path": "14"
    },
    "103": {
      "fn": "Allowlist.getAllowlistOwner",
      "offset": [
        2171,
        2268
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "104": {
      "fn": "Allowlist.getAllowlistOwner",
      "offset": [
        2247,
        2261
      ],
      "op": "PUSH1",
      "path": "14",
      "statement": 0,
      "value": "0x1"
    },
    "106": {
      "fn": "Allowlist.getAllowlistOwner",
      "offset": [
        2247,
        2261
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "107": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "109": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "111": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "113": {
      "op": "SHL"
    },
    "114": {
      "op": "SUB"
    },
    "115": {
      "fn": "Allowlist.getAllowlistOwner",
      "offset": [
        2247,
        2261
      ],
      "op": "AND",
      "path": "14"
    },
    "116": {
      "fn": "Allowlist.getAllowlistOwner",
      "offset": [
        2171,
        2268
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "117": {
      "fn": "Allowlist.getAllowlistOwner",
      "offset": [
        2171,
        2268
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "119": {
      "fn": "Allowlist.getAllowlistOwner",
      "offset": [
        2171,
        2268
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "120": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "122": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "124": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "126": {
      "op": "SHL"
    },
    "127": {
      "op": "SUB"
    },
    "128": {
      "op": "SWAP1"
    },
    "129": {
      "op": "SWAP2"
    },
    "130": {
      "op": "AND"
    },
    "131": {
      "op": "DUP2"
    },
    "132": {
      "op": "MSTORE"
    },
    "133": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "135": {
      "op": "ADD"
    },
    "136": {
      "fn": "Allowlist.getAllowlistOwner",
      "offset": [
        2171,
        2268
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "137": {
      "fn": "Allowlist.getAllowlistOwner",
      "offset": [
        2171,
        2268
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "139": {
      "fn": "Allowlist.getAllowlistOwner",
      "offset": [
        2171,
        2268
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "140": {
      "fn": "Allowlist.getAllowlistOwner",
      "offset": [
        2171,
        2268
      ],
      "op": "DUP1",
      "path": "14"
    },
    "141": {
      "fn": "Allowlist.getAllowlistOwner",
      "offset": [
        2171,
        2268
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "142": {
      "fn": "Allowlist.getAllowlistOwner",
      "offset": [
        2171,
        2268
      ],
      "op": "SUB",
      "path": "14"
    },
    "143": {
      "fn": "Allowlist.getAllowlistOwner",
      "offset": [
        2171,
        2268
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "144": {
      "fn": "Allowlist.getAllowlistOwner",
      "offset": [
        2171,
        2268
      ],
      "op": "RETURN",
      "path": "14"
    },
    "145": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1668,
        1769
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "146": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1668,
        1769
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x99"
    },
    "149": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1668,
        1769
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF5"
    },
    "152": {
      "fn": "Ownable.renounceOwnership",
      "jump": "i",
      "offset": [
        1668,
        1769
      ],
      "op": "JUMP",
      "path": "0"
    },
    "153": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1668,
        1769
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "154": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1668,
        1769
      ],
      "op": "STOP",
      "path": "0"
    },
    "155": {
      "fn": "Ownable.owner",
      "offset": [
        1036,
        1121
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "156": {
      "fn": "Ownable.owner",
      "offset": [
        1082,
        1089
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "158": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "SLOAD",
      "path": "0",
      "statement": 1
    },
    "159": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "161": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "163": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "165": {
      "op": "SHL"
    },
    "166": {
      "op": "SUB"
    },
    "167": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "AND",
      "path": "0"
    },
    "168": {
      "fn": "Ownable.owner",
      "offset": [
        1036,
        1121
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x74"
    },
    "171": {
      "fn": "Ownable.owner",
      "offset": [
        1036,
        1121
      ],
      "op": "JUMP",
      "path": "0"
    },
    "172": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2495,
        2645
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "173": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2495,
        2645
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xBF"
    },
    "176": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2495,
        2645
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xBA"
    },
    "179": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2495,
        2645
      ],
      "op": "CALLDATASIZE",
      "path": "14"
    },
    "180": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2495,
        2645
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "182": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2495,
        2645
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x50D"
    },
    "185": {
      "fn": "Allowlist.verifySignature",
      "jump": "i",
      "offset": [
        2495,
        2645
      ],
      "op": "JUMP",
      "path": "14"
    },
    "186": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2495,
        2645
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "187": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2495,
        2645
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x134"
    },
    "190": {
      "fn": "Allowlist.verifySignature",
      "jump": "i",
      "offset": [
        2495,
        2645
      ],
      "op": "JUMP",
      "path": "14"
    },
    "191": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2495,
        2645
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "192": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2495,
        2645
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "194": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2495,
        2645
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "195": {
      "op": "SWAP1"
    },
    "196": {
      "op": "ISZERO"
    },
    "197": {
      "op": "ISZERO"
    },
    "198": {
      "op": "DUP2"
    },
    "199": {
      "op": "MSTORE"
    },
    "200": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "202": {
      "op": "ADD"
    },
    "203": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2495,
        2645
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x88"
    },
    "206": {
      "op": "JUMP"
    },
    "207": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4852,
        5120
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "208": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4852,
        5120
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xBF"
    },
    "211": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4852,
        5120
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xDD"
    },
    "214": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4852,
        5120
      ],
      "op": "CALLDATASIZE",
      "path": "14"
    },
    "215": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4852,
        5120
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "217": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4852,
        5120
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x570"
    },
    "220": {
      "fn": "Allowlist.verifySigner",
      "jump": "i",
      "offset": [
        4852,
        5120
      ],
      "op": "JUMP",
      "path": "14"
    },
    "221": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4852,
        5120
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "222": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4852,
        5120
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x147"
    },
    "225": {
      "fn": "Allowlist.verifySigner",
      "jump": "i",
      "offset": [
        4852,
        5120
      ],
      "op": "JUMP",
      "path": "14"
    },
    "226": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "227": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x99"
    },
    "230": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF0"
    },
    "233": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "234": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "236": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5C7"
    },
    "239": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        1918,
        2116
      ],
      "op": "JUMP",
      "path": "0"
    },
    "240": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "241": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1DB"
    },
    "244": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        1918,
        2116
      ],
      "op": "JUMP",
      "path": "0"
    },
    "245": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1668,
        1769
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "246": {
      "fn": "Ownable.owner",
      "offset": [
        1082,
        1089
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "248": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "249": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "251": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "253": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "255": {
      "op": "SHL"
    },
    "256": {
      "op": "SUB"
    },
    "257": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "AND",
      "path": "0"
    },
    "258": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "CALLER",
      "path": "5",
      "statement": 2
    },
    "259": {
      "offset": [
        1248,
        1271
      ],
      "op": "EQ",
      "path": "0"
    },
    "260": {
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x128"
    },
    "263": {
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "264": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "266": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "267": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "271": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "273": {
      "op": "SHL"
    },
    "274": {
      "offset": [
        1240,
        1308
      ],
      "op": "DUP2",
      "path": "0"
    },
    "275": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "276": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "278": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "ADD",
      "path": "0"
    },
    "279": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11F"
    },
    "282": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "283": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5E2"
    },
    "286": {
      "fn": "Context._msgSender",
      "jump": "i",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMP",
      "path": "0"
    },
    "287": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "288": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "290": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "291": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "DUP1",
      "path": "0"
    },
    "292": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "293": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "SUB",
      "path": "0"
    },
    "294": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "295": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "0"
    },
    "296": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "297": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1732,
        1762
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 3,
      "value": "0x132"
    },
    "300": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1759,
        1760
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "302": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1732,
        1750
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x276"
    },
    "305": {
      "fn": "Ownable.renounceOwnership",
      "jump": "i",
      "offset": [
        1732,
        1762
      ],
      "op": "JUMP",
      "path": "0"
    },
    "306": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1732,
        1762
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "307": {
      "fn": "Ownable.renounceOwnership",
      "jump": "o",
      "offset": [
        1668,
        1769
      ],
      "op": "JUMP",
      "path": "0"
    },
    "308": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2495,
        2645
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "309": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2584,
        2588
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "311": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2611,
        2638
      ],
      "op": "PUSH2",
      "path": "14",
      "statement": 4,
      "value": "0x140"
    },
    "314": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2628,
        2632
      ],
      "op": "DUP4",
      "path": "14"
    },
    "315": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2634,
        2637
      ],
      "op": "DUP4",
      "path": "14"
    },
    "316": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2611,
        2627
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x2C6"
    },
    "319": {
      "fn": "Allowlist.verifySignature",
      "jump": "i",
      "offset": [
        2611,
        2638
      ],
      "op": "JUMP",
      "path": "14"
    },
    "320": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2611,
        2638
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "321": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2604,
        2638
      ],
      "op": "SWAP4",
      "path": "14"
    },
    "322": {
      "fn": "Allowlist.verifySignature",
      "offset": [
        2495,
        2645
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "323": {
      "op": "POP"
    },
    "324": {
      "op": "POP"
    },
    "325": {
      "op": "POP"
    },
    "326": {
      "fn": "Allowlist.verifySignature",
      "jump": "o",
      "offset": [
        2495,
        2645
      ],
      "op": "JUMP",
      "path": "14"
    },
    "327": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4852,
        5120
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "328": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6067,
        6069
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x20"
    },
    "330": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6058,
        6070
      ],
      "op": "DUP2",
      "path": "14"
    },
    "331": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6058,
        6070
      ],
      "op": "DUP2",
      "path": "14"
    },
    "332": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6058,
        6070
      ],
      "op": "ADD",
      "path": "14"
    },
    "333": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6052,
        6071
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "334": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6142,
        6144
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "336": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6133,
        6145
      ],
      "op": "DUP1",
      "path": "14"
    },
    "337": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6133,
        6145
      ],
      "op": "DUP5",
      "path": "14"
    },
    "338": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6133,
        6145
      ],
      "op": "ADD",
      "path": "14"
    },
    "339": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6127,
        6146
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "340": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6254,
        6256
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x60"
    },
    "342": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6245,
        6257
      ],
      "op": "DUP1",
      "path": "14"
    },
    "343": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6245,
        6257
      ],
      "op": "DUP7",
      "path": "14"
    },
    "344": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6245,
        6257
      ],
      "op": "ADD",
      "path": "14"
    },
    "345": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6239,
        6258
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "346": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "DUP4",
      "path": "14",
      "statement": 5
    },
    "347": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "348": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4982,
        4986
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "350": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "DUP1",
      "path": "14"
    },
    "351": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "DUP3",
      "path": "14"
    },
    "352": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "353": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "DUP2",
      "path": "14"
    },
    "354": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "DUP9",
      "path": "14"
    },
    "355": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "ADD",
      "path": "14"
    },
    "356": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "DUP1",
      "path": "14"
    },
    "357": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "DUP8",
      "path": "14"
    },
    "358": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "359": {
      "op": "DUP11"
    },
    "360": {
      "op": "SWAP1"
    },
    "361": {
      "op": "MSTORE"
    },
    "362": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6231,
        6259
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "363": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6231,
        6259
      ],
      "op": "DUP3",
      "path": "14"
    },
    "364": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6231,
        6259
      ],
      "op": "BYTE",
      "path": "14"
    },
    "365": {
      "op": "DUP2"
    },
    "366": {
      "op": "DUP7"
    },
    "367": {
      "op": "ADD"
    },
    "368": {
      "op": "DUP2"
    },
    "369": {
      "op": "SWAP1"
    },
    "370": {
      "op": "MSTORE"
    },
    "371": {
      "op": "SWAP3"
    },
    "372": {
      "op": "DUP2"
    },
    "373": {
      "op": "ADD"
    },
    "374": {
      "op": "DUP7"
    },
    "375": {
      "op": "SWAP1"
    },
    "376": {
      "op": "MSTORE"
    },
    "377": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "379": {
      "op": "DUP2"
    },
    "380": {
      "op": "ADD"
    },
    "381": {
      "op": "DUP5"
    },
    "382": {
      "op": "SWAP1"
    },
    "383": {
      "op": "MSTORE"
    },
    "384": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "SWAP4",
      "path": "14"
    },
    "385": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "386": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4982,
        4986
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "387": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4982,
        4986
      ],
      "op": "SWAP6",
      "path": "14"
    },
    "388": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6127,
        6146
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "389": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6127,
        6146
      ],
      "op": "SWAP4",
      "path": "14"
    },
    "390": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6231,
        6259
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "391": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6231,
        6259
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "392": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x1"
    },
    "394": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "395": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "397": {
      "op": "DUP1"
    },
    "398": {
      "op": "DUP3"
    },
    "399": {
      "op": "ADD"
    },
    "400": {
      "op": "SWAP4"
    },
    "401": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "403": {
      "op": "NOT"
    },
    "404": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "DUP2",
      "path": "14"
    },
    "405": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "ADD",
      "path": "14"
    },
    "406": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "407": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "DUP2",
      "path": "14"
    },
    "408": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "409": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "SUB",
      "path": "14"
    },
    "410": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "411": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "412": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "ADD",
      "path": "14"
    },
    "413": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "414": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "DUP6",
      "path": "14"
    },
    "415": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "GAS",
      "path": "14"
    },
    "416": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "STATICCALL",
      "path": "14"
    },
    "417": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "418": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "DUP1",
      "path": "14"
    },
    "419": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "420": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x1B1"
    },
    "423": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "424": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "RETURNDATASIZE",
      "path": "14"
    },
    "425": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "427": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "DUP1",
      "path": "14"
    },
    "428": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "RETURNDATACOPY",
      "path": "14"
    },
    "429": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "RETURNDATASIZE",
      "path": "14"
    },
    "430": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "432": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "REVERT",
      "path": "14"
    },
    "433": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "434": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "POP",
      "path": "14"
    },
    "435": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "POP",
      "path": "14"
    },
    "436": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "POP",
      "path": "14"
    },
    "437": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x20"
    },
    "439": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "441": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "442": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "SUB",
      "path": "14"
    },
    "443": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5087,
        5112
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "444": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "446": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "448": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "450": {
      "op": "SHL"
    },
    "451": {
      "op": "SUB"
    },
    "452": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5076,
        5112
      ],
      "op": "AND",
      "path": "14"
    },
    "453": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5076,
        5083
      ],
      "op": "DUP8",
      "path": "14"
    },
    "454": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "456": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "458": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "460": {
      "op": "SHL"
    },
    "461": {
      "op": "SUB"
    },
    "462": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5076,
        5112
      ],
      "op": "AND",
      "path": "14"
    },
    "463": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5076,
        5112
      ],
      "op": "EQ",
      "path": "14"
    },
    "464": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5068,
        5113
      ],
      "op": "SWAP4",
      "path": "14"
    },
    "465": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5068,
        5113
      ],
      "op": "POP",
      "path": "14"
    },
    "466": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5068,
        5113
      ],
      "op": "POP",
      "path": "14"
    },
    "467": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5068,
        5113
      ],
      "op": "POP",
      "path": "14"
    },
    "468": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        5068,
        5113
      ],
      "op": "POP",
      "path": "14"
    },
    "469": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4852,
        5120
      ],
      "op": "SWAP4",
      "path": "14"
    },
    "470": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4852,
        5120
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "471": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4852,
        5120
      ],
      "op": "POP",
      "path": "14"
    },
    "472": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4852,
        5120
      ],
      "op": "POP",
      "path": "14"
    },
    "473": {
      "fn": "Allowlist.verifySigner",
      "offset": [
        4852,
        5120
      ],
      "op": "POP",
      "path": "14"
    },
    "474": {
      "fn": "Allowlist.verifySigner",
      "jump": "o",
      "offset": [
        4852,
        5120
      ],
      "op": "JUMP",
      "path": "14"
    },
    "475": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "476": {
      "fn": "Ownable.owner",
      "offset": [
        1082,
        1089
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "478": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "479": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "481": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "483": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "485": {
      "op": "SHL"
    },
    "486": {
      "op": "SUB"
    },
    "487": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "AND",
      "path": "0"
    },
    "488": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "CALLER",
      "path": "5"
    },
    "489": {
      "offset": [
        1248,
        1271
      ],
      "op": "EQ",
      "path": "0"
    },
    "490": {
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x205"
    },
    "493": {
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "494": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "496": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "497": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "501": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "503": {
      "op": "SHL"
    },
    "504": {
      "offset": [
        1240,
        1308
      ],
      "op": "DUP2",
      "path": "0"
    },
    "505": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "506": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "508": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "ADD",
      "path": "0"
    },
    "509": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11F"
    },
    "512": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "513": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5E2"
    },
    "516": {
      "fn": "Context._msgSender",
      "jump": "i",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMP",
      "path": "0"
    },
    "517": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "518": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "520": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "522": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "524": {
      "op": "SHL"
    },
    "525": {
      "op": "SUB"
    },
    "526": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2006,
        2028
      ],
      "op": "DUP2",
      "path": "0",
      "statement": 6
    },
    "527": {
      "branch": 16,
      "fn": "Ownable.transferOwnership",
      "offset": [
        2006,
        2028
      ],
      "op": "AND",
      "path": "0"
    },
    "528": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x26A"
    },
    "531": {
      "branch": 16,
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "532": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "534": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "535": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "539": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "541": {
      "op": "SHL"
    },
    "542": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "DUP2",
      "path": "0"
    },
    "543": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "544": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "546": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "548": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "DUP3",
      "path": "0"
    },
    "549": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "ADD",
      "path": "0"
    },
    "550": {
      "op": "MSTORE"
    },
    "551": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "553": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "555": {
      "op": "DUP3"
    },
    "556": {
      "op": "ADD"
    },
    "557": {
      "op": "MSTORE"
    },
    "558": {
      "op": "PUSH32",
      "value": "0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
    },
    "591": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "593": {
      "op": "DUP3"
    },
    "594": {
      "op": "ADD"
    },
    "595": {
      "op": "MSTORE"
    },
    "596": {
      "op": "PUSH6",
      "value": "0x646472657373"
    },
    "603": {
      "op": "PUSH1",
      "value": "0xD0"
    },
    "605": {
      "op": "SHL"
    },
    "606": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "608": {
      "op": "DUP3"
    },
    "609": {
      "op": "ADD"
    },
    "610": {
      "op": "MSTORE"
    },
    "611": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "613": {
      "op": "ADD"
    },
    "614": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11F"
    },
    "617": {
      "op": "JUMP"
    },
    "618": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "619": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2109
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 7,
      "value": "0x273"
    },
    "622": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2100,
        2108
      ],
      "op": "DUP2",
      "path": "0"
    },
    "623": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2099
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x276"
    },
    "626": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        2081,
        2109
      ],
      "op": "JUMP",
      "path": "0"
    },
    "627": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2109
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "628": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "POP",
      "path": "0"
    },
    "629": {
      "fn": "Ownable.transferOwnership",
      "jump": "o",
      "offset": [
        1918,
        2116
      ],
      "op": "JUMP",
      "path": "0"
    },
    "630": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2270,
        2457
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "631": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2343,
        2359
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "633": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "DUP1",
      "path": "0"
    },
    "634": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "635": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "637": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "639": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "641": {
      "op": "SHL"
    },
    "642": {
      "op": "SUB"
    },
    "643": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 8
    },
    "644": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "DUP2",
      "path": "0"
    },
    "645": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "AND",
      "path": "0"
    },
    "646": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "648": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "650": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "652": {
      "op": "SHL"
    },
    "653": {
      "op": "SUB"
    },
    "654": {
      "op": "NOT"
    },
    "655": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "DUP4",
      "path": "0"
    },
    "656": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "AND",
      "path": "0"
    },
    "657": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "DUP2",
      "path": "0"
    },
    "658": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "OR",
      "path": "0"
    },
    "659": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "DUP5",
      "path": "0"
    },
    "660": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "661": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2410,
        2450
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 9,
      "value": "0x40"
    },
    "663": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2410,
        2450
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "664": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "665": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "666": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "667": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "AND",
      "path": "0"
    },
    "668": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "669": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "DUP4",
      "path": "0"
    },
    "670": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "671": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2410,
        2450
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
    },
    "704": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2410,
        2450
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "705": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2343,
        2359
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "706": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2410,
        2450
      ],
      "op": "LOG3",
      "path": "0"
    },
    "707": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2333,
        2457
      ],
      "op": "POP",
      "path": "0"
    },
    "708": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2270,
        2457
      ],
      "op": "POP",
      "path": "0"
    },
    "709": {
      "fn": "Ownable._transferOwnership",
      "jump": "o",
      "offset": [
        2270,
        2457
      ],
      "op": "JUMP",
      "path": "0"
    },
    "710": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3622,
        4677
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "711": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3732,
        3736
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "713": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "DUP1",
      "path": "0"
    },
    "714": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "715": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "717": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "719": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "721": {
      "op": "SHL"
    },
    "722": {
      "op": "SUB"
    },
    "723": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "AND",
      "path": "0"
    },
    "724": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "CALLER",
      "path": "5"
    },
    "725": {
      "offset": [
        1248,
        1271
      ],
      "op": "EQ",
      "path": "0"
    },
    "726": {
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2F1"
    },
    "729": {
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "730": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "732": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "733": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "737": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "739": {
      "op": "SHL"
    },
    "740": {
      "offset": [
        1240,
        1308
      ],
      "op": "DUP2",
      "path": "0"
    },
    "741": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "742": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "744": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "ADD",
      "path": "0"
    },
    "745": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11F"
    },
    "748": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "749": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5E2"
    },
    "752": {
      "fn": "Context._msgSender",
      "jump": "i",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMP",
      "path": "0"
    },
    "753": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "754": {
      "fn": "Ownable.owner",
      "offset": [
        1082,
        1089
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "756": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "757": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "759": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "761": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "763": {
      "op": "SHL"
    },
    "764": {
      "op": "SUB"
    },
    "765": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "AND",
      "path": "0"
    },
    "766": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "CALLER",
      "path": "5"
    },
    "767": {
      "branch": 14,
      "fn": "Allowlist._verifySignature",
      "offset": [
        3897,
        3920
      ],
      "op": "EQ",
      "path": "14",
      "statement": 10
    },
    "768": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3876,
        3989
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x35F"
    },
    "771": {
      "branch": 14,
      "fn": "Allowlist._verifySignature",
      "offset": [
        3876,
        3989
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "772": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3876,
        3989
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "774": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3876,
        3989
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "775": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "779": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "781": {
      "op": "SHL"
    },
    "782": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3876,
        3989
      ],
      "op": "DUP2",
      "path": "14"
    },
    "783": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3876,
        3989
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "784": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "786": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3876,
        3989
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "788": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3876,
        3989
      ],
      "op": "DUP3",
      "path": "14"
    },
    "789": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3876,
        3989
      ],
      "op": "ADD",
      "path": "14"
    },
    "790": {
      "op": "MSTORE"
    },
    "791": {
      "op": "PUSH1",
      "value": "0x2B"
    },
    "793": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "795": {
      "op": "DUP3"
    },
    "796": {
      "op": "ADD"
    },
    "797": {
      "op": "MSTORE"
    },
    "798": {
      "op": "PUSH32",
      "value": "0x4552433732313A3A2043616C6C20746F20636F6E7472616374206D6164652062"
    },
    "831": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "833": {
      "op": "DUP3"
    },
    "834": {
      "op": "ADD"
    },
    "835": {
      "op": "MSTORE"
    },
    "836": {
      "op": "PUSH11",
      "value": "0x3C903737B716B7BBB732B9"
    },
    "848": {
      "op": "PUSH1",
      "value": "0xA9"
    },
    "850": {
      "op": "SHL"
    },
    "851": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "853": {
      "op": "DUP3"
    },
    "854": {
      "op": "ADD"
    },
    "855": {
      "op": "MSTORE"
    },
    "856": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "858": {
      "op": "ADD"
    },
    "859": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3876,
        3989
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x11F"
    },
    "862": {
      "op": "JUMP"
    },
    "863": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3876,
        3989
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "864": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4067,
        4070
      ],
      "op": "DUP2",
      "path": "14",
      "statement": 11
    },
    "865": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4067,
        4077
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "866": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4081,
        4083
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x41"
    },
    "868": {
      "branch": 15,
      "fn": "Allowlist._verifySignature",
      "offset": [
        4067,
        4083
      ],
      "op": "EQ",
      "path": "14"
    },
    "869": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4059,
        4118
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x3B0"
    },
    "872": {
      "branch": 15,
      "fn": "Allowlist._verifySignature",
      "offset": [
        4059,
        4118
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "873": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4059,
        4118
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "875": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4059,
        4118
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "876": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "880": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "882": {
      "op": "SHL"
    },
    "883": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4059,
        4118
      ],
      "op": "DUP2",
      "path": "14"
    },
    "884": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4059,
        4118
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "885": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "887": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4059,
        4118
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "889": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4059,
        4118
      ],
      "op": "DUP3",
      "path": "14"
    },
    "890": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4059,
        4118
      ],
      "op": "ADD",
      "path": "14"
    },
    "891": {
      "op": "MSTORE"
    },
    "892": {
      "op": "PUSH1",
      "value": "0x1E"
    },
    "894": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "896": {
      "op": "DUP3"
    },
    "897": {
      "op": "ADD"
    },
    "898": {
      "op": "MSTORE"
    },
    "899": {
      "op": "PUSH32",
      "value": "0x4572723A3A20496E76616C6964207369676E6174757265206C656E6774680000"
    },
    "932": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "934": {
      "op": "DUP3"
    },
    "935": {
      "op": "ADD"
    },
    "936": {
      "op": "MSTORE"
    },
    "937": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "939": {
      "op": "ADD"
    },
    "940": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4059,
        4118
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x11F"
    },
    "943": {
      "op": "JUMP"
    },
    "944": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4059,
        4118
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "945": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6067,
        6069
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x20"
    },
    "947": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6058,
        6070
      ],
      "op": "DUP3",
      "path": "14"
    },
    "948": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6058,
        6070
      ],
      "op": "DUP2",
      "path": "14"
    },
    "949": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6058,
        6070
      ],
      "op": "ADD",
      "path": "14"
    },
    "950": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6052,
        6071
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "951": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6142,
        6144
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "953": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6133,
        6145
      ],
      "op": "DUP1",
      "path": "14"
    },
    "954": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6133,
        6145
      ],
      "op": "DUP6",
      "path": "14"
    },
    "955": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6133,
        6145
      ],
      "op": "ADD",
      "path": "14"
    },
    "956": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6127,
        6146
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "957": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6254,
        6256
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x60"
    },
    "959": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6245,
        6257
      ],
      "op": "DUP1",
      "path": "14"
    },
    "960": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6245,
        6257
      ],
      "op": "DUP8",
      "path": "14"
    },
    "961": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6245,
        6257
      ],
      "op": "ADD",
      "path": "14"
    },
    "962": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6239,
        6258
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "963": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "DUP4",
      "path": "14"
    },
    "964": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "965": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4197,
        4206
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "967": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "DUP1",
      "path": "14"
    },
    "968": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "DUP3",
      "path": "14"
    },
    "969": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "970": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "SWAP7",
      "path": "14"
    },
    "971": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "DUP2",
      "path": "14"
    },
    "972": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "ADD",
      "path": "14"
    },
    "973": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "DUP1",
      "path": "14"
    },
    "974": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "DUP7",
      "path": "14"
    },
    "975": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "976": {
      "op": "DUP11"
    },
    "977": {
      "op": "SWAP1"
    },
    "978": {
      "op": "MSTORE"
    },
    "979": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6231,
        6259
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "980": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6231,
        6259
      ],
      "op": "DUP7",
      "path": "14"
    },
    "981": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6231,
        6259
      ],
      "op": "BYTE",
      "path": "14"
    },
    "982": {
      "op": "SWAP4"
    },
    "983": {
      "op": "DUP2"
    },
    "984": {
      "op": "ADD"
    },
    "985": {
      "op": "DUP5"
    },
    "986": {
      "op": "SWAP1"
    },
    "987": {
      "op": "MSTORE"
    },
    "988": {
      "op": "SWAP1"
    },
    "989": {
      "op": "DUP2"
    },
    "990": {
      "op": "ADD"
    },
    "991": {
      "op": "DUP5"
    },
    "992": {
      "op": "SWAP1"
    },
    "993": {
      "op": "MSTORE"
    },
    "994": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "996": {
      "op": "DUP2"
    },
    "997": {
      "op": "ADD"
    },
    "998": {
      "op": "DUP3"
    },
    "999": {
      "op": "SWAP1"
    },
    "1000": {
      "op": "MSTORE"
    },
    "1001": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6052,
        6071
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "1002": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6052,
        6071
      ],
      "op": "SWAP4",
      "path": "14"
    },
    "1003": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6127,
        6146
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "1004": {
      "fn": "Allowlist.splitSignature",
      "offset": [
        6127,
        6146
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "1005": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x1"
    },
    "1007": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "1008": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1010": {
      "op": "ADD"
    },
    "1011": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x20"
    },
    "1013": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "1015": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "1016": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x20"
    },
    "1018": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "DUP2",
      "path": "14"
    },
    "1019": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "SUB",
      "path": "14"
    },
    "1020": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "1021": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "DUP1",
      "path": "14"
    },
    "1022": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "DUP5",
      "path": "14"
    },
    "1023": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "SUB",
      "path": "14"
    },
    "1024": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "1025": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "DUP6",
      "path": "14"
    },
    "1026": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "GAS",
      "path": "14"
    },
    "1027": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "STATICCALL",
      "path": "14"
    },
    "1028": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "1029": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "DUP1",
      "path": "14"
    },
    "1030": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "1031": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x414"
    },
    "1034": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "1035": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "RETURNDATASIZE",
      "path": "14"
    },
    "1036": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "1038": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "DUP1",
      "path": "14"
    },
    "1039": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "RETURNDATACOPY",
      "path": "14"
    },
    "1040": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "RETURNDATASIZE",
      "path": "14"
    },
    "1041": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "1043": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "REVERT",
      "path": "14"
    },
    "1044": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "1045": {
      "op": "POP"
    },
    "1046": {
      "op": "POP"
    },
    "1047": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "1049": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "1050": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1052": {
      "op": "NOT"
    },
    "1053": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "DUP2",
      "path": "14"
    },
    "1054": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "ADD",
      "path": "14"
    },
    "1055": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "1056": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4469,
        4483
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x1"
    },
    "1058": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4469,
        4483
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "1059": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "1060": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4331,
        4355
      ],
      "op": "SWAP4",
      "path": "14"
    },
    "1061": {
      "op": "POP"
    },
    "1062": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1064": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1066": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1068": {
      "op": "SHL"
    },
    "1069": {
      "op": "SUB"
    },
    "1070": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4459,
        4483
      ],
      "op": "DUP1",
      "path": "14"
    },
    "1071": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4459,
        4483
      ],
      "op": "DUP6",
      "path": "14"
    },
    "1072": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4459,
        4483
      ],
      "op": "AND",
      "path": "14"
    },
    "1073": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4469,
        4483
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "1074": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4469,
        4483
      ],
      "op": "AND",
      "path": "14"
    },
    "1075": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4459,
        4483
      ],
      "op": "EQ",
      "path": "14"
    },
    "1076": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4459,
        4483
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "1077": {
      "op": "POP"
    },
    "1078": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4459,
        4483
      ],
      "op": "DUP2",
      "path": "14"
    },
    "1079": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4459,
        4483
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "1080": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4566,
        4570
      ],
      "op": "DUP10",
      "path": "14",
      "statement": 12
    },
    "1081": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4566,
        4570
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "1082": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4550,
        4595
      ],
      "op": "PUSH32",
      "path": "14",
      "value": "0x7E4FE2A2A805A357593FDBDDE58C02F6A53D8B4960744CD31A98697FC11C2E36"
    },
    "1115": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4550,
        4595
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "1116": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4428,
        4455
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "1118": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4428,
        4455
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "1119": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4550,
        4595
      ],
      "op": "LOG3",
      "path": "14"
    },
    "1120": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        4648,
        4670
      ],
      "op": "SWAP8",
      "path": "14",
      "statement": 13
    },
    "1121": {
      "fn": "Allowlist._verifySignature",
      "offset": [
        3622,
        4677
      ],
      "op": "SWAP7",
      "path": "14"
    },
    "1122": {
      "op": "POP"
    },
    "1123": {
      "op": "POP"
    },
    "1124": {
      "op": "POP"
    },
    "1125": {
      "op": "POP"
    },
    "1126": {
      "op": "POP"
    },
    "1127": {
      "op": "POP"
    },
    "1128": {
      "op": "POP"
    },
    "1129": {
      "fn": "Allowlist._verifySignature",
      "jump": "o",
      "offset": [
        3622,
        4677
      ],
      "op": "JUMP",
      "path": "14"
    },
    "1130": {
      "op": "JUMPDEST"
    },
    "1131": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "1136": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1138": {
      "op": "SHL"
    },
    "1139": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1141": {
      "op": "MSTORE"
    },
    "1142": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "1144": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "1146": {
      "op": "MSTORE"
    },
    "1147": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1149": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1151": {
      "op": "REVERT"
    },
    "1152": {
      "op": "JUMPDEST"
    },
    "1153": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1155": {
      "op": "DUP3"
    },
    "1156": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1158": {
      "op": "DUP4"
    },
    "1159": {
      "op": "ADD"
    },
    "1160": {
      "op": "SLT"
    },
    "1161": {
      "op": "PUSH2",
      "value": "0x491"
    },
    "1164": {
      "op": "JUMPI"
    },
    "1165": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1167": {
      "op": "DUP1"
    },
    "1168": {
      "op": "REVERT"
    },
    "1169": {
      "op": "JUMPDEST"
    },
    "1170": {
      "op": "DUP2"
    },
    "1171": {
      "op": "CALLDATALOAD"
    },
    "1172": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "1181": {
      "op": "DUP1"
    },
    "1182": {
      "op": "DUP3"
    },
    "1183": {
      "op": "GT"
    },
    "1184": {
      "op": "ISZERO"
    },
    "1185": {
      "op": "PUSH2",
      "value": "0x4AC"
    },
    "1188": {
      "op": "JUMPI"
    },
    "1189": {
      "op": "PUSH2",
      "value": "0x4AC"
    },
    "1192": {
      "op": "PUSH2",
      "value": "0x46A"
    },
    "1195": {
      "jump": "i",
      "op": "JUMP"
    },
    "1196": {
      "op": "JUMPDEST"
    },
    "1197": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1199": {
      "op": "MLOAD"
    },
    "1200": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1202": {
      "op": "DUP4"
    },
    "1203": {
      "op": "ADD"
    },
    "1204": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1206": {
      "op": "NOT"
    },
    "1207": {
      "op": "SWAP1"
    },
    "1208": {
      "op": "DUP2"
    },
    "1209": {
      "op": "AND"
    },
    "1210": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "1212": {
      "op": "ADD"
    },
    "1213": {
      "op": "AND"
    },
    "1214": {
      "op": "DUP2"
    },
    "1215": {
      "op": "ADD"
    },
    "1216": {
      "op": "SWAP1"
    },
    "1217": {
      "op": "DUP3"
    },
    "1218": {
      "op": "DUP3"
    },
    "1219": {
      "op": "GT"
    },
    "1220": {
      "op": "DUP2"
    },
    "1221": {
      "op": "DUP4"
    },
    "1222": {
      "op": "LT"
    },
    "1223": {
      "op": "OR"
    },
    "1224": {
      "op": "ISZERO"
    },
    "1225": {
      "op": "PUSH2",
      "value": "0x4D4"
    },
    "1228": {
      "op": "JUMPI"
    },
    "1229": {
      "op": "PUSH2",
      "value": "0x4D4"
    },
    "1232": {
      "op": "PUSH2",
      "value": "0x46A"
    },
    "1235": {
      "jump": "i",
      "op": "JUMP"
    },
    "1236": {
      "op": "JUMPDEST"
    },
    "1237": {
      "op": "DUP2"
    },
    "1238": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1240": {
      "op": "MSTORE"
    },
    "1241": {
      "op": "DUP4"
    },
    "1242": {
      "op": "DUP2"
    },
    "1243": {
      "op": "MSTORE"
    },
    "1244": {
      "op": "DUP7"
    },
    "1245": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1247": {
      "op": "DUP6"
    },
    "1248": {
      "op": "DUP9"
    },
    "1249": {
      "op": "ADD"
    },
    "1250": {
      "op": "ADD"
    },
    "1251": {
      "op": "GT"
    },
    "1252": {
      "op": "ISZERO"
    },
    "1253": {
      "op": "PUSH2",
      "value": "0x4ED"
    },
    "1256": {
      "op": "JUMPI"
    },
    "1257": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1259": {
      "op": "DUP1"
    },
    "1260": {
      "op": "REVERT"
    },
    "1261": {
      "op": "JUMPDEST"
    },
    "1262": {
      "op": "DUP4"
    },
    "1263": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1265": {
      "op": "DUP8"
    },
    "1266": {
      "op": "ADD"
    },
    "1267": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1269": {
      "op": "DUP4"
    },
    "1270": {
      "op": "ADD"
    },
    "1271": {
      "op": "CALLDATACOPY"
    },
    "1272": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1274": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1276": {
      "op": "DUP6"
    },
    "1277": {
      "op": "DUP4"
    },
    "1278": {
      "op": "ADD"
    },
    "1279": {
      "op": "ADD"
    },
    "1280": {
      "op": "MSTORE"
    },
    "1281": {
      "op": "DUP1"
    },
    "1282": {
      "op": "SWAP5"
    },
    "1283": {
      "op": "POP"
    },
    "1284": {
      "op": "POP"
    },
    "1285": {
      "op": "POP"
    },
    "1286": {
      "op": "POP"
    },
    "1287": {
      "op": "POP"
    },
    "1288": {
      "op": "SWAP3"
    },
    "1289": {
      "op": "SWAP2"
    },
    "1290": {
      "op": "POP"
    },
    "1291": {
      "op": "POP"
    },
    "1292": {
      "jump": "o",
      "op": "JUMP"
    },
    "1293": {
      "op": "JUMPDEST"
    },
    "1294": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1296": {
      "op": "DUP1"
    },
    "1297": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1299": {
      "op": "DUP4"
    },
    "1300": {
      "op": "DUP6"
    },
    "1301": {
      "op": "SUB"
    },
    "1302": {
      "op": "SLT"
    },
    "1303": {
      "op": "ISZERO"
    },
    "1304": {
      "op": "PUSH2",
      "value": "0x520"
    },
    "1307": {
      "op": "JUMPI"
    },
    "1308": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1310": {
      "op": "DUP1"
    },
    "1311": {
      "op": "REVERT"
    },
    "1312": {
      "op": "JUMPDEST"
    },
    "1313": {
      "op": "DUP3"
    },
    "1314": {
      "op": "CALLDATALOAD"
    },
    "1315": {
      "op": "SWAP2"
    },
    "1316": {
      "op": "POP"
    },
    "1317": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1319": {
      "op": "DUP4"
    },
    "1320": {
      "op": "ADD"
    },
    "1321": {
      "op": "CALLDATALOAD"
    },
    "1322": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "1331": {
      "op": "DUP2"
    },
    "1332": {
      "op": "GT"
    },
    "1333": {
      "op": "ISZERO"
    },
    "1334": {
      "op": "PUSH2",
      "value": "0x53E"
    },
    "1337": {
      "op": "JUMPI"
    },
    "1338": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1340": {
      "op": "DUP1"
    },
    "1341": {
      "op": "REVERT"
    },
    "1342": {
      "op": "JUMPDEST"
    },
    "1343": {
      "op": "PUSH2",
      "value": "0x54A"
    },
    "1346": {
      "op": "DUP6"
    },
    "1347": {
      "op": "DUP3"
    },
    "1348": {
      "op": "DUP7"
    },
    "1349": {
      "op": "ADD"
    },
    "1350": {
      "op": "PUSH2",
      "value": "0x480"
    },
    "1353": {
      "jump": "i",
      "op": "JUMP"
    },
    "1354": {
      "op": "JUMPDEST"
    },
    "1355": {
      "op": "SWAP2"
    },
    "1356": {
      "op": "POP"
    },
    "1357": {
      "op": "POP"
    },
    "1358": {
      "op": "SWAP3"
    },
    "1359": {
      "op": "POP"
    },
    "1360": {
      "op": "SWAP3"
    },
    "1361": {
      "op": "SWAP1"
    },
    "1362": {
      "op": "POP"
    },
    "1363": {
      "jump": "o",
      "op": "JUMP"
    },
    "1364": {
      "op": "JUMPDEST"
    },
    "1365": {
      "op": "DUP1"
    },
    "1366": {
      "op": "CALLDATALOAD"
    },
    "1367": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1369": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1371": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1373": {
      "op": "SHL"
    },
    "1374": {
      "op": "SUB"
    },
    "1375": {
      "op": "DUP2"
    },
    "1376": {
      "op": "AND"
    },
    "1377": {
      "op": "DUP2"
    },
    "1378": {
      "op": "EQ"
    },
    "1379": {
      "op": "PUSH2",
      "value": "0x56B"
    },
    "1382": {
      "op": "JUMPI"
    },
    "1383": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1385": {
      "op": "DUP1"
    },
    "1386": {
      "op": "REVERT"
    },
    "1387": {
      "op": "JUMPDEST"
    },
    "1388": {
      "op": "SWAP2"
    },
    "1389": {
      "op": "SWAP1"
    },
    "1390": {
      "op": "POP"
    },
    "1391": {
      "jump": "o",
      "op": "JUMP"
    },
    "1392": {
      "op": "JUMPDEST"
    },
    "1393": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1395": {
      "op": "DUP1"
    },
    "1396": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1398": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1400": {
      "op": "DUP5"
    },
    "1401": {
      "op": "DUP7"
    },
    "1402": {
      "op": "SUB"
    },
    "1403": {
      "op": "SLT"
    },
    "1404": {
      "op": "ISZERO"
    },
    "1405": {
      "op": "PUSH2",
      "value": "0x585"
    },
    "1408": {
      "op": "JUMPI"
    },
    "1409": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1411": {
      "op": "DUP1"
    },
    "1412": {
      "op": "REVERT"
    },
    "1413": {
      "op": "JUMPDEST"
    },
    "1414": {
      "op": "PUSH2",
      "value": "0x58E"
    },
    "1417": {
      "op": "DUP5"
    },
    "1418": {
      "op": "PUSH2",
      "value": "0x554"
    },
    "1421": {
      "jump": "i",
      "op": "JUMP"
    },
    "1422": {
      "op": "JUMPDEST"
    },
    "1423": {
      "op": "SWAP3"
    },
    "1424": {
      "op": "POP"
    },
    "1425": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1427": {
      "op": "DUP5"
    },
    "1428": {
      "op": "ADD"
    },
    "1429": {
      "op": "CALLDATALOAD"
    },
    "1430": {
      "op": "SWAP2"
    },
    "1431": {
      "op": "POP"
    },
    "1432": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1434": {
      "op": "DUP5"
    },
    "1435": {
      "op": "ADD"
    },
    "1436": {
      "op": "CALLDATALOAD"
    },
    "1437": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "1446": {
      "op": "DUP2"
    },
    "1447": {
      "op": "GT"
    },
    "1448": {
      "op": "ISZERO"
    },
    "1449": {
      "op": "PUSH2",
      "value": "0x5B1"
    },
    "1452": {
      "op": "JUMPI"
    },
    "1453": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1455": {
      "op": "DUP1"
    },
    "1456": {
      "op": "REVERT"
    },
    "1457": {
      "op": "JUMPDEST"
    },
    "1458": {
      "op": "PUSH2",
      "value": "0x5BD"
    },
    "1461": {
      "op": "DUP7"
    },
    "1462": {
      "op": "DUP3"
    },
    "1463": {
      "op": "DUP8"
    },
    "1464": {
      "op": "ADD"
    },
    "1465": {
      "op": "PUSH2",
      "value": "0x480"
    },
    "1468": {
      "jump": "i",
      "op": "JUMP"
    },
    "1469": {
      "op": "JUMPDEST"
    },
    "1470": {
      "op": "SWAP2"
    },
    "1471": {
      "op": "POP"
    },
    "1472": {
      "op": "POP"
    },
    "1473": {
      "op": "SWAP3"
    },
    "1474": {
      "op": "POP"
    },
    "1475": {
      "op": "SWAP3"
    },
    "1476": {
      "op": "POP"
    },
    "1477": {
      "op": "SWAP3"
    },
    "1478": {
      "jump": "o",
      "op": "JUMP"
    },
    "1479": {
      "op": "JUMPDEST"
    },
    "1480": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1482": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1484": {
      "op": "DUP3"
    },
    "1485": {
      "op": "DUP5"
    },
    "1486": {
      "op": "SUB"
    },
    "1487": {
      "op": "SLT"
    },
    "1488": {
      "op": "ISZERO"
    },
    "1489": {
      "op": "PUSH2",
      "value": "0x5D9"
    },
    "1492": {
      "op": "JUMPI"
    },
    "1493": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1495": {
      "op": "DUP1"
    },
    "1496": {
      "op": "REVERT"
    },
    "1497": {
      "op": "JUMPDEST"
    },
    "1498": {
      "op": "PUSH2",
      "value": "0x140"
    },
    "1501": {
      "op": "DUP3"
    },
    "1502": {
      "op": "PUSH2",
      "value": "0x554"
    },
    "1505": {
      "jump": "i",
      "op": "JUMP"
    },
    "1506": {
      "op": "JUMPDEST"
    },
    "1507": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1509": {
      "op": "DUP1"
    },
    "1510": {
      "op": "DUP3"
    },
    "1511": {
      "op": "MSTORE"
    },
    "1512": {
      "op": "DUP2"
    },
    "1513": {
      "op": "DUP2"
    },
    "1514": {
      "op": "ADD"
    },
    "1515": {
      "op": "MSTORE"
    },
    "1516": {
      "op": "PUSH32",
      "value": "0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
    },
    "1549": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1551": {
      "op": "DUP3"
    },
    "1552": {
      "op": "ADD"
    },
    "1553": {
      "op": "MSTORE"
    },
    "1554": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1556": {
      "op": "ADD"
    },
    "1557": {
      "op": "SWAP1"
    },
    "1558": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "1481d91c316bcdc3264bbe798071cdae06ca8cd6",
  "source": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.8;\n\nimport \"./IAllowlist.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title Allowlist Contract.\n * @author Daccred.\n * @dev  The allowlist contract serves as a general inheritable\n *       contract that any contract with the need of working with\n *       signatures and signature verifications can inherit and\n *       work with with ease.\n *       Allowlists allow you to ensure that a particular address\n *       has been signed by a particular contract, and is therefore\n *       eligible to receive or be minted a particular token or\n *       partcular sets of tokens.\n *       It will be necessary to state that this contract will be\n *       directly owned by the Daccred.sol [link here], but on\n *       deploy, the address of the wallet deploying the contract\n *       will be stored as the `allowlistOwner`, this address\n *       cannot be changed, and this address will be evaluated for\n *       incoming signature confirmations.\n *       The address must be the signer of the signature.\n *       Changing this address means changing every signature\n *       signed. This is not good.\n *\n *       For clarity:\n *       Contract deployer: Daccred.sol.\n */\ncontract Allowlist is IAllowlist, Ownable {\n    /// @dev    The wallet that initiated the transaction to deploy\n    ///         this allowlist contract\n    ///         [And other subsequent ones inheriting this],\n    ///         passed as msg.sender from the Daccred.sol.\n    address private allowlistOwner;\n\n    /// @dev constructor, setting the allowlistOwner.\n    constructor(address _allowlistOwner) {\n        /// @dev Require address is valid.\n        require(_allowlistOwner != address(0), \"Invalid Address.\");\n        /// @dev Set the variable name.\n        allowlistOwner = _allowlistOwner;\n    }\n\n    /// @dev    Emitted when a signature is verified by the\n    ///         allowlistOwner.\n    event VerifySignature(bytes32 indexed addressHash, bool indexed result);\n\n    /**\n     * @dev Return the allowlistOwner.\n     *\n     * @notice Callable by anyone.\n     *\n     * @return address of allowlistOwner.\n     */\n    function getAllowlistOwner() public view returns (address) {\n        return allowlistOwner;\n    }\n\n    /**\n     * @dev  Returns true if the signer of signature `sig` is the `allowlistOwner`.\n     *       And false if otherwise.\n     *\n     * @notice Callable by anyone.\n     *\n     * @return bool true or false.\n     */\n    function verifySignature(bytes32 hash, bytes memory sig)\n        public\n        returns (bool)\n    {\n        return _verifySignature(hash, sig);\n    }\n\n    /**\n     * @dev  Evaluate and return that a particular address message\n     *       was signed by the allowlistOwner.\n     *       In the SoulboundCore.sol, this function will be used\n     *       in the {issueWithSignature} function, to verify that\n     *       the hash of the address was indeed signed by the\n     *       allowlistOwner.\n     *       This functin will be called from the Daccred.sol or\n     *       DaccredDeployer.sol where the address of the\n     *       allowlistOwner will be passed to the function, as\n     *       msg.sender. Meaning that only the owner of the\n     *       allowlist deployed from the Daccred.sol can call\n     *       the function.\n     *       Or using the getAllowlistOwner() for validations.\n     *\n     * @notice Callable by this or inheriting contract.\n     *\n     * @param hash   Hash of the address.\n     * @param sig    Signature of the transaction, made offchain.\n     *\n     * @return bool true or false.\n     */\n    function _verifySignature(bytes32 hash, bytes memory sig)\n        internal\n        onlyOwner\n        returns (bool)\n    {\n        /// @dev    Require that the caller is the owner [deployer]\n        ///         of the contract, [the Daccred.sol].\n        require(\n            _msgSender() == owner(),\n            \"ERC721:: Call to contract made by non-owner\"\n        );\n        /// @dev Require the length of the signature is 65.\n        require(sig.length == 65, \"Err:: Invalid signature length\");\n        /// @dev Use assembly to get the 3 sections of a signature.\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(sig);\n        /// @dev    Using ecrecover to get the signer.\n        address signer = ecrecover(hash, v, r, s);\n        /// @dev Verify that the signer is the allowlistOwner.\n        bool signerIsAllowlistOwner = (signer == allowlistOwner);\n        /// @dev Emit the {VerifySignature} event.\n        emit VerifySignature(hash, signerIsAllowlistOwner);\n        /// @dev Return the result.\n        return signerIsAllowlistOwner;\n    }\n\n    /**\n     * @dev Returns true if the signer of `_signature` is `_signer`.\n     *\n     * @notice Callable by anyone.\n     *\n     * @return bool true or false.\n     */\n    function verifySigner(\n        address _signer,\n        bytes32 _hash,\n        bytes memory _signature\n    ) public pure returns (bool) {\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\n        return (_signer == ecrecover(_hash, v, r, s));\n    }\n\n    /**\n     * @dev  This function makes use of assembly to split the signature\n     *       into 3 parts.\n     *\n     * @param sig The signature to split with Assembly.\n     *\n     * @return r\n     * @return s\n     * @return v\n     */\n    function splitSignature(bytes memory sig)\n        private\n        pure\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        assembly {\n            /**\n             * @dev  Copied from https://solidity-by-example.org/signature.\n             *       First 32 bytes stores the length of the signature\n             *       add(sig, 32) = pointer of sig + 32\n             *       effectively, skips first 32 bytes of signature\n             *       mload(p) loads next 32 bytes starting at the memory\n             *       address p into memory.\n             */\n\n            /// @dev First 32 bytes, after the length prefix.\n            r := mload(add(sig, 32))\n            /// @dev Second 32 bytes.\n            s := mload(add(sig, 64))\n            /// @dev Final byte (first byte of the next 32 bytes).\n            v := byte(0, mload(add(sig, 96)))\n        }\n    }\n}\n",
  "sourceMap": "1245:5032:14:-:0;;;1612:237;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;921:32:0;719:10:5;921:18:0;:32::i;:::-;-1:-1:-1;;;;;1710:29:14;;1702:58;;;;-1:-1:-1;;;1702:58:14;;511:2:43;1702:58:14;;;493:21:43;550:2;530:18;;;523:30;-1:-1:-1;;;569:18:43;;;562:46;625:18;;1702:58:14;;;;;;;;1810:14;:32;;-1:-1:-1;;;;;;1810:32:14;-1:-1:-1;;;;;1810:32:14;;;;;;;;;;1245:5032;;2270:187:0;2343:16;2362:6;;-1:-1:-1;;;;;2378:17:0;;;-1:-1:-1;;;;;;2378:17:0;;;;;;2410:40;;2362:6;;;;;;;2410:40;;2343:16;2410:40;2333:124;2270:187;:::o;14:290:43:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:43;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:43:o;309:340::-;1245:5032:14;;;;;;",
  "sourcePath": "contracts/contracts/packages/common/Allowlist.sol",
  "type": "contract"
}