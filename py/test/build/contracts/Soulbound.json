{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Attest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Revoke",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_getBaseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "_baseURI",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "isMinted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "issuerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "2": "contracts/eips/ERC-4973.sol",
    "6": "contracts/extensions/Soulbound.sol"
  },
  "ast": {
    "absolutePath": "contracts/extensions/Soulbound.sol",
    "exportedSymbols": {
      "ERC165": [
        1940
      ],
      "ERC4973": [
        2267
      ],
      "IERC165": [
        1919
      ],
      "IERC4973": [
        1996
      ],
      "IERC721Metadata": [
        1958
      ],
      "ISoulbond": [
        1907
      ],
      "Soulbound": [
        1677
      ]
    },
    "id": 1678,
    "license": "GPL-3.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1412,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".8"
        ],
        "nodeType": "PragmaDirective",
        "src": "36:23:6"
      },
      {
        "absolutePath": "contracts/contracts/interfaces/ISoulbound.sol",
        "file": "../contracts/interfaces/ISoulbound.sol",
        "id": 1413,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1678,
        "sourceUnit": 1908,
        "src": "61:48:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/eips/ERC-4973.sol",
        "file": "../eips/ERC-4973.sol",
        "id": 1414,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1678,
        "sourceUnit": 2268,
        "src": "110:30:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 1416,
              "name": "ERC4973",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2267,
              "src": "822:7:6"
            },
            "id": 1417,
            "nodeType": "InheritanceSpecifier",
            "src": "822:7:6"
          }
        ],
        "canonicalName": "Soulbound",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 1415,
          "nodeType": "StructuredDocumentation",
          "src": "142:657:6",
          "text": " @title Soulbound Token Contract.\n @author Daccred.\n @dev  Soulbound Token Base Template.\n       This contract was inspired by\n       https://github.com/ethereum/EIPs/blob/master/assets/eip-4973/ERC-4973.sol\n       This contract is inherited by any contract to implement the Soulbound\n       template.\n       Soulbound tokens  cannot be transferred when minted to a particular address.\n       This is the base instance of the contract,\n       it includes minting functions and revoke functions.\n       Inheriting functions can wrap around the specified functions.\n       Also, this base contract instance does not include a capped supply."
        },
        "fullyImplemented": true,
        "id": 1677,
        "linearizedBaseContracts": [
          1677,
          2267,
          1996,
          1958,
          1940,
          1919
        ],
        "name": "Soulbound",
        "nameLocation": "809:9:6",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "documentation": {
              "id": 1418,
              "nodeType": "StructuredDocumentation",
              "src": "836:273:6",
              "text": " @dev  Stores the base URI on cases when the user wants to mint a token,\n       it automatically generates a string casted tokenURI using the\n       generateTokenURI function. This variable can only be modified by\n       the allowlist owner."
            },
            "id": 1420,
            "mutability": "mutable",
            "name": "baseURI",
            "nameLocation": "1129:7:6",
            "nodeType": "VariableDeclaration",
            "scope": 1677,
            "src": "1114:22:6",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 1419,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1114:6:6",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "documentation": {
              "id": 1421,
              "nodeType": "StructuredDocumentation",
              "src": "1143:79:6",
              "text": "@dev Mapping of speific addresses to tokenIds and boolean for mint records."
            },
            "id": 1427,
            "mutability": "mutable",
            "name": "mints",
            "nameLocation": "1280:5:6",
            "nodeType": "VariableDeclaration",
            "scope": 1677,
            "src": "1227:58:6",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
              "typeString": "mapping(address => mapping(uint256 => bool))"
            },
            "typeName": {
              "id": 1426,
              "keyType": {
                "id": 1422,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1235:7:6",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1227:44:6",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
                "typeString": "mapping(address => mapping(uint256 => bool))"
              },
              "valueType": {
                "id": 1425,
                "keyType": {
                  "id": 1423,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1254:7:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "nodeType": "Mapping",
                "src": "1246:24:6",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                  "typeString": "mapping(uint256 => bool)"
                },
                "valueType": {
                  "id": 1424,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "1265:4:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                }
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 1439,
              "nodeType": "Block",
              "src": "1443:2:6",
              "statements": []
            },
            "documentation": {
              "id": 1428,
              "nodeType": "StructuredDocumentation",
              "src": "1292:70:6",
              "text": "@dev Allows the deployer to set a name and a symbol for the token."
            },
            "id": 1440,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 1435,
                    "name": "name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1430,
                    "src": "1429:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "id": 1436,
                    "name": "symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1432,
                    "src": "1435:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 1437,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 1434,
                  "name": "ERC4973",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 2267,
                  "src": "1421:7:6"
                },
                "nodeType": "ModifierInvocation",
                "src": "1421:21:6"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1433,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1430,
                  "mutability": "mutable",
                  "name": "name",
                  "nameLocation": "1393:4:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1440,
                  "src": "1379:18:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1429,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1379:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1432,
                  "mutability": "mutable",
                  "name": "symbol",
                  "nameLocation": "1413:6:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1440,
                  "src": "1399:20:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1431,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1399:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1378:42:6"
            },
            "returnParameters": {
              "id": 1438,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1443:0:6"
            },
            "scope": 1677,
            "src": "1367:78:6",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1460,
              "nodeType": "Block",
              "src": "2291:229:6",
              "statements": [
                {
                  "documentation": "@dev Mint Soulbound token to `_to` using ERC4973 _mint().",
                  "expression": {
                    "arguments": [
                      {
                        "id": 1453,
                        "name": "_to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1443,
                        "src": "2403:3:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1454,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1445,
                        "src": "2421:8:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1455,
                        "name": "tokenURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1447,
                        "src": "2444:8:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 1452,
                      "name": "mintSoulboundToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1599,
                      "src": "2371:18:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (address,uint256,string memory)"
                      }
                    },
                    "id": 1456,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2371:91:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1457,
                  "nodeType": "ExpressionStatement",
                  "src": "2371:91:6"
                },
                {
                  "documentation": "@dev Return true.",
                  "expression": {
                    "hexValue": "74727565",
                    "id": 1458,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2509:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 1451,
                  "id": 1459,
                  "nodeType": "Return",
                  "src": "2502:11:6"
                }
              ]
            },
            "documentation": {
              "id": 1441,
              "nodeType": "StructuredDocumentation",
              "src": "1451:706:6",
              "text": " @dev  Mints a new token `_tokenId` to `_to`, giving to ownership of token `_tokenId`.\n       This function will be used hand in hand with ERC721's _mint() function.\n       Emits the {Attest} event.\n       `_to` cannot transfer the token.\n       `_to` must not be a 0 address.\n       `_tokenId` must be an existent token.\n       This does not evaluate total supply of tokens before minting.\n @notice Callable by anyone.\n @param _to        Address to which token `_tokenId` is minted.\n @param _tokenId   Token to mint.\n @param tokenURI   Auto generated or user passed URI for minted token.\n @return bool true or false."
            },
            "id": 1461,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "issue",
            "nameLocation": "2171:5:6",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1448,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1443,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "2194:3:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1461,
                  "src": "2186:11:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1442,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2186:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1445,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "2216:8:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1461,
                  "src": "2208:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1444,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2208:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1447,
                  "mutability": "mutable",
                  "name": "tokenURI",
                  "nameLocation": "2249:8:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1461,
                  "src": "2235:22:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1446,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2235:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2176:87:6"
            },
            "returnParameters": {
              "id": 1451,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1450,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1461,
                  "src": "2281:4:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1449,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2281:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2280:6:6"
            },
            "scope": 1677,
            "src": "2162:358:6",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1493,
              "nodeType": "Block",
              "src": "3411:355:6",
              "statements": [
                {
                  "documentation": "@dev Require token exists.",
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 1473,
                            "name": "_tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1466,
                            "src": "3476:8:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 1472,
                          "name": "_exists",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2188,
                          "src": "3468:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (uint256) view returns (bool)"
                          }
                        },
                        "id": 1474,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3468:17:6",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f6e2d6578697374656e7420746f6b656e2e",
                        "id": 1475,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3487:21:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_8c0d8f43323770a1dd202a4a690419e3948b07e562a1c5b5bee2020c96039cb2",
                          "typeString": "literal_string \"Non-existent token.\""
                        },
                        "value": "Non-existent token."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_8c0d8f43323770a1dd202a4a690419e3948b07e562a1c5b5bee2020c96039cb2",
                          "typeString": "literal_string \"Non-existent token.\""
                        }
                      ],
                      "id": 1471,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3460:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1476,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3460:49:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1477,
                  "nodeType": "ExpressionStatement",
                  "src": "3460:49:6"
                },
                {
                  "documentation": "@dev Require _tokenId is owned by _from.",
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 1483,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "id": 1480,
                              "name": "_tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1466,
                              "src": "3588:8:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1479,
                            "name": "ownerOf",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2171,
                            "src": "3580:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                              "typeString": "function (uint256) view returns (address)"
                            }
                          },
                          "id": 1481,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3580:17:6",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 1482,
                          "name": "_from",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1464,
                          "src": "3601:5:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "3580:26:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "546f6b656e206e6f74206f776e65642062792061646472657373",
                        "id": 1484,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3608:28:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3530adbde4ceb2e09524c86c72dc5c102ccf0ab5b3d278483f4421b30348154a",
                          "typeString": "literal_string \"Token not owned by address\""
                        },
                        "value": "Token not owned by address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3530adbde4ceb2e09524c86c72dc5c102ccf0ab5b3d278483f4421b30348154a",
                          "typeString": "literal_string \"Token not owned by address\""
                        }
                      ],
                      "id": 1478,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3572:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1485,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3572:65:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1486,
                  "nodeType": "ExpressionStatement",
                  "src": "3572:65:6"
                },
                {
                  "documentation": "@dev Burn the token.",
                  "expression": {
                    "arguments": [
                      {
                        "id": 1488,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1466,
                        "src": "3699:8:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1487,
                      "name": "burnSoulboundToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1632,
                      "src": "3680:18:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 1489,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3680:28:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1490,
                  "nodeType": "ExpressionStatement",
                  "src": "3680:28:6"
                },
                {
                  "documentation": "@dev Return true.",
                  "expression": {
                    "hexValue": "74727565",
                    "id": 1491,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3755:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 1470,
                  "id": 1492,
                  "nodeType": "Return",
                  "src": "3748:11:6"
                }
              ]
            },
            "documentation": {
              "id": 1462,
              "nodeType": "StructuredDocumentation",
              "src": "2526:808:6",
              "text": " @dev  Withdraws ownership of token `_tokenId` from `_From`.\n       This will be done when the ERC721's _burn() function is called.\n       Emits the {Revoke} event.\n       `_from` must own the token.\n       `_from` must not be a 0 address.\n       `_tokenId` must be an existent token.\n       The function can only be called by the issuer of the token.\n       This modifier onlyIssuer will be implemented in the contract.\n       [Modifiers cannot be made in interfaces].\n       This does not evaluate total supply of tokens before minting.\n @notice Callable by this or inheriting contract.\n @param _from      Address which owns token `_tokenId`.\n @param _tokenId   Token to revoke.\n @return bool true or false."
            },
            "id": 1494,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "revoke",
            "nameLocation": "3348:6:6",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1467,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1464,
                  "mutability": "mutable",
                  "name": "_from",
                  "nameLocation": "3363:5:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1494,
                  "src": "3355:13:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1463,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3355:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1466,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "3378:8:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1494,
                  "src": "3370:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1465,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3370:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3354:33:6"
            },
            "returnParameters": {
              "id": 1470,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1469,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1494,
                  "src": "3405:4:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1468,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3405:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3404:6:6"
            },
            "scope": 1677,
            "src": "3339:427:6",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1535,
              "nodeType": "Block",
              "src": "4366:413:6",
              "statements": [
                {
                  "documentation": "@dev Require _to is not a zero address.",
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 1510,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 1505,
                          "name": "_to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1497,
                          "src": "4436:3:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 1508,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4451:1:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 1507,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "4443:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 1506,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "4443:7:6",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 1509,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4443:10:6",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "4436:17:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "517565727920666f72207a65726f20616464726573732e",
                        "id": 1511,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4455:25:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_005e8d856629456edb7ab6f50cb9a953faf7bd57251d26a58543713b45fac495",
                          "typeString": "literal_string \"Query for zero address.\""
                        },
                        "value": "Query for zero address."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_005e8d856629456edb7ab6f50cb9a953faf7bd57251d26a58543713b45fac495",
                          "typeString": "literal_string \"Query for zero address.\""
                        }
                      ],
                      "id": 1504,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4428:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1512,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4428:53:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1513,
                  "nodeType": "ExpressionStatement",
                  "src": "4428:53:6"
                },
                {
                  "documentation": "@dev Require token exists.",
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 1516,
                            "name": "_tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1499,
                            "src": "4546:8:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 1515,
                          "name": "_exists",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2188,
                          "src": "4538:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (uint256) view returns (bool)"
                          }
                        },
                        "id": 1517,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4538:17:6",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f6e2d6578697374656e7420746f6b656e2e",
                        "id": 1518,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4557:21:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_8c0d8f43323770a1dd202a4a690419e3948b07e562a1c5b5bee2020c96039cb2",
                          "typeString": "literal_string \"Non-existent token.\""
                        },
                        "value": "Non-existent token."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_8c0d8f43323770a1dd202a4a690419e3948b07e562a1c5b5bee2020c96039cb2",
                          "typeString": "literal_string \"Non-existent token.\""
                        }
                      ],
                      "id": 1514,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4530:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1519,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4530:49:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1520,
                  "nodeType": "ExpressionStatement",
                  "src": "4530:49:6"
                },
                {
                  "documentation": "@dev Require _tokenId is owned by _to.",
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 1526,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "id": 1523,
                              "name": "_tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1499,
                              "src": "4656:8:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1522,
                            "name": "ownerOf",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2171,
                            "src": "4648:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                              "typeString": "function (uint256) view returns (address)"
                            }
                          },
                          "id": 1524,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4648:17:6",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 1525,
                          "name": "_to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1497,
                          "src": "4669:3:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "4648:24:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "546f6b656e206e6f74206f776e65642062792061646472657373",
                        "id": 1527,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4674:28:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3530adbde4ceb2e09524c86c72dc5c102ccf0ab5b3d278483f4421b30348154a",
                          "typeString": "literal_string \"Token not owned by address\""
                        },
                        "value": "Token not owned by address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3530adbde4ceb2e09524c86c72dc5c102ccf0ab5b3d278483f4421b30348154a",
                          "typeString": "literal_string \"Token not owned by address\""
                        }
                      ],
                      "id": 1521,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4640:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1528,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4640:63:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1529,
                  "nodeType": "ExpressionStatement",
                  "src": "4640:63:6"
                },
                {
                  "documentation": "@dev Returns this address.",
                  "expression": {
                    "arguments": [
                      {
                        "id": 1532,
                        "name": "this",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -28,
                        "src": "4767:4:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Soulbound_$1677",
                          "typeString": "contract Soulbound"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_Soulbound_$1677",
                          "typeString": "contract Soulbound"
                        }
                      ],
                      "id": 1531,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "4759:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_address_$",
                        "typeString": "type(address)"
                      },
                      "typeName": {
                        "id": 1530,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4759:7:6",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 1533,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4759:13:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 1503,
                  "id": 1534,
                  "nodeType": "Return",
                  "src": "4752:20:6"
                }
              ]
            },
            "documentation": {
              "id": 1495,
              "nodeType": "StructuredDocumentation",
              "src": "3772:511:6",
              "text": " @dev  Since a token cannnot be minted twice.\n       This function returns the address that minted token `_tokenId` to `_to`,\n       otherwise this contract.\n       `_to` must not be a 0 address.\n       `_tokenId` must be an existent token.\n       Owner of _tokenId must be _to.\n @notice Callable by anyone.\n @param _to        Address to which token `_tokenId` is minted.\n @param _tokenId   Token minted.\n @return address of issuer."
            },
            "functionSelector": "fb8f198d",
            "id": 1536,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "issuerOf",
            "nameLocation": "4297:8:6",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1500,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1497,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "4314:3:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1536,
                  "src": "4306:11:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1496,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4306:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1499,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "4327:8:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1536,
                  "src": "4319:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1498,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4319:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4305:31:6"
            },
            "returnParameters": {
              "id": 1503,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1502,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1536,
                  "src": "4357:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1501,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4357:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4356:9:6"
            },
            "scope": 1677,
            "src": "4288:491:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1552,
              "nodeType": "Block",
              "src": "5269:44:6",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 1546,
                        "name": "mints",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1427,
                        "src": "5286:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
                          "typeString": "mapping(address => mapping(uint256 => bool))"
                        }
                      },
                      "id": 1548,
                      "indexExpression": {
                        "id": 1547,
                        "name": "_to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1539,
                        "src": "5292:3:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "5286:10:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                        "typeString": "mapping(uint256 => bool)"
                      }
                    },
                    "id": 1550,
                    "indexExpression": {
                      "id": 1549,
                      "name": "_tokenId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1541,
                      "src": "5297:8:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "5286:20:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1545,
                  "id": 1551,
                  "nodeType": "Return",
                  "src": "5279:27:6"
                }
              ]
            },
            "documentation": {
              "id": 1537,
              "nodeType": "StructuredDocumentation",
              "src": "4785:381:6",
              "text": " @dev  Returns true if token `_tokenId` was minted from this contract to `_to`.\n       `_to` must not be a 0 address.\n       `_tokenId` must be an existent token.\n @notice Callable by anyone.\n @param _to        Address to which token `_tokenId` is minted.\n @param _tokenId   Token minted.\n @return bool true or false."
            },
            "functionSelector": "5899e7b2",
            "id": 1553,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isMinted",
            "nameLocation": "5180:8:6",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1542,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1539,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "5206:3:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1553,
                  "src": "5198:11:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1538,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5198:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1541,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "5228:8:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1553,
                  "src": "5220:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1540,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5220:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5188:54:6"
            },
            "returnParameters": {
              "id": 1545,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1544,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1553,
                  "src": "5263:4:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1543,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5263:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5262:6:6"
            },
            "scope": 1677,
            "src": "5171:142:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1598,
              "nodeType": "Block",
              "src": "5669:548:6",
              "statements": [
                {
                  "documentation": "@dev Require the address receiving is not a zero address.",
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 1569,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 1564,
                          "name": "to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1556,
                          "src": "5757:2:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 1567,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5771:1:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 1566,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "5763:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 1565,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "5763:7:6",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 1568,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5763:10:6",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "5757:16:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4d696e7420746f207a65726f20616464726573732e",
                        "id": 1570,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5775:23:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b3cd0cc0adee66fdd10c0f21fe5cb0de39672daa3845cfc9b86f6248c4187fe0",
                          "typeString": "literal_string \"Mint to zero address.\""
                        },
                        "value": "Mint to zero address."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b3cd0cc0adee66fdd10c0f21fe5cb0de39672daa3845cfc9b86f6248c4187fe0",
                          "typeString": "literal_string \"Mint to zero address.\""
                        }
                      ],
                      "id": 1563,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5749:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1571,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5749:50:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1572,
                  "nodeType": "ExpressionStatement",
                  "src": "5749:50:6"
                },
                {
                  "documentation": "@dev    ERC-4973 doesn't include checks for empty tokenURIs\n         but they should be necessary.",
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1580,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "arguments": [
                              {
                                "id": 1576,
                                "name": "tokenURI",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1560,
                                "src": "5945:8:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              ],
                              "id": 1575,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "5939:5:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                "typeString": "type(bytes storage pointer)"
                              },
                              "typeName": {
                                "id": 1574,
                                "name": "bytes",
                                "nodeType": "ElementaryTypeName",
                                "src": "5939:5:6",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1577,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5939:15:6",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "id": 1578,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "5939:22:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 1579,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "5965:1:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "5939:27:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "456d70747920746f6b656e5552492e",
                        "id": 1581,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5968:17:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_1d891222b44d3abffe01f576969f9f733cbf76c2739aa002fc7a68d63427339f",
                          "typeString": "literal_string \"Empty tokenURI.\""
                        },
                        "value": "Empty tokenURI."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_1d891222b44d3abffe01f576969f9f733cbf76c2739aa002fc7a68d63427339f",
                          "typeString": "literal_string \"Empty tokenURI.\""
                        }
                      ],
                      "id": 1573,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5931:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1582,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5931:55:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1583,
                  "nodeType": "ExpressionStatement",
                  "src": "5931:55:6"
                },
                {
                  "documentation": "@dev    Mint to the `to` address.\n         ERC4973 runs check for existent token.",
                  "expression": {
                    "arguments": [
                      {
                        "id": 1585,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1556,
                        "src": "6107:2:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1586,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1558,
                        "src": "6111:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1587,
                        "name": "tokenURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1560,
                        "src": "6120:8:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 1584,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2233,
                      "src": "6101:5:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
                        "typeString": "function (address,uint256,string memory) returns (uint256)"
                      }
                    },
                    "id": 1588,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6101:28:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1589,
                  "nodeType": "ExpressionStatement",
                  "src": "6101:28:6"
                },
                {
                  "documentation": "@dev Set record of owner to true;",
                  "expression": {
                    "id": 1596,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 1590,
                          "name": "mints",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1427,
                          "src": "6185:5:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
                            "typeString": "mapping(address => mapping(uint256 => bool))"
                          }
                        },
                        "id": 1593,
                        "indexExpression": {
                          "id": 1591,
                          "name": "to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1556,
                          "src": "6191:2:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "6185:9:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                          "typeString": "mapping(uint256 => bool)"
                        }
                      },
                      "id": 1594,
                      "indexExpression": {
                        "id": 1592,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1558,
                        "src": "6195:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "6185:18:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 1595,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "6206:4:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "6185:25:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1597,
                  "nodeType": "ExpressionStatement",
                  "src": "6185:25:6"
                }
              ]
            },
            "documentation": {
              "id": 1554,
              "nodeType": "StructuredDocumentation",
              "src": "5319:219:6",
              "text": " @dev Mints `tokenId` of the soulbound token to `to`.\n @param to         Receiver of the tokens.\n @param tokenId    Amount to be minted, GT 0.\n @param tokenURI   URI of token minted."
            },
            "id": 1599,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mintSoulboundToken",
            "nameLocation": "5552:18:6",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1561,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1556,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "5588:2:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1599,
                  "src": "5580:10:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1555,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5580:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1558,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "5609:7:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1599,
                  "src": "5601:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1557,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5601:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1560,
                  "mutability": "mutable",
                  "name": "tokenURI",
                  "nameLocation": "5641:8:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1599,
                  "src": "5627:22:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1559,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "5627:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5570:85:6"
            },
            "returnParameters": {
              "id": 1562,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5669:0:6"
            },
            "scope": 1677,
            "src": "5543:674:6",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "private"
          },
          {
            "body": {
              "id": 1631,
              "nodeType": "Block",
              "src": "6426:368:6",
              "statements": [
                {
                  "documentation": "@dev Checks that the token actually exists.",
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 1607,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1602,
                            "src": "6508:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 1606,
                          "name": "_exists",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2188,
                          "src": "6500:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (uint256) view returns (bool)"
                          }
                        },
                        "id": 1608,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6500:16:6",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4275726e206f6620696e6578697374656e7420746f6b656e",
                        "id": 1609,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6518:26:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e62e94c4703f3d2220adca7d86fbde12466a7fcf9da73713f2c22063a947d725",
                          "typeString": "literal_string \"Burn of inexistent token\""
                        },
                        "value": "Burn of inexistent token"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e62e94c4703f3d2220adca7d86fbde12466a7fcf9da73713f2c22063a947d725",
                          "typeString": "literal_string \"Burn of inexistent token\""
                        }
                      ],
                      "id": 1605,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6492:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1610,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6492:53:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1611,
                  "nodeType": "ExpressionStatement",
                  "src": "6492:53:6"
                },
                {
                  "assignments": [
                    1614
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1614,
                      "mutability": "mutable",
                      "name": "_tokenOwner",
                      "nameLocation": "6608:11:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1631,
                      "src": "6600:19:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1613,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6600:7:6",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "documentation": "@dev Get owner of token tokenId.",
                  "id": 1618,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 1616,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1602,
                        "src": "6630:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1615,
                      "name": "ownerOf",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2171,
                      "src": "6622:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                        "typeString": "function (uint256) view returns (address)"
                      }
                    },
                    "id": 1617,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6622:16:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6600:38:6"
                },
                {
                  "documentation": "@dev Burn the token.",
                  "expression": {
                    "arguments": [
                      {
                        "id": 1620,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1602,
                        "src": "6687:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1619,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2266,
                      "src": "6681:5:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 1621,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6681:14:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1622,
                  "nodeType": "ExpressionStatement",
                  "src": "6681:14:6"
                },
                {
                  "documentation": "@dev Set record of owner to false.",
                  "expression": {
                    "id": 1629,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 1623,
                          "name": "mints",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1427,
                          "src": "6752:5:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
                            "typeString": "mapping(address => mapping(uint256 => bool))"
                          }
                        },
                        "id": 1626,
                        "indexExpression": {
                          "id": 1624,
                          "name": "_tokenOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1614,
                          "src": "6758:11:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "6752:18:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                          "typeString": "mapping(uint256 => bool)"
                        }
                      },
                      "id": 1627,
                      "indexExpression": {
                        "id": 1625,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1602,
                        "src": "6771:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "6752:27:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "66616c7365",
                      "id": 1628,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "6782:5:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "6752:35:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1630,
                  "nodeType": "ExpressionStatement",
                  "src": "6752:35:6"
                }
              ]
            },
            "documentation": {
              "id": 1600,
              "nodeType": "StructuredDocumentation",
              "src": "6223:145:6",
              "text": " @dev  Burns a soulbound token, on the condition that\n       the token exists.\n @param tokenId Token to be burnt."
            },
            "id": 1632,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burnSoulboundToken",
            "nameLocation": "6382:18:6",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1603,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1602,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "6409:7:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1632,
                  "src": "6401:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1601,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6401:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6400:17:6"
            },
            "returnParameters": {
              "id": 1604,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6426:0:6"
            },
            "scope": 1677,
            "src": "6373:421:6",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "private"
          },
          {
            "body": {
              "id": 1653,
              "nodeType": "Block",
              "src": "7013:180:6",
              "statements": [
                {
                  "documentation": "@dev Ensure that the word length is 0.",
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1645,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "arguments": [
                              {
                                "id": 1641,
                                "name": "_baseURI",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1635,
                                "src": "7088:8:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              ],
                              "id": 1640,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "7082:5:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                "typeString": "type(bytes storage pointer)"
                              },
                              "typeName": {
                                "id": 1639,
                                "name": "bytes",
                                "nodeType": "ElementaryTypeName",
                                "src": "7082:5:6",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1642,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7082:15:6",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "id": 1643,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "7082:22:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 1644,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "7108:1:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "7082:27:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e76616c6964206c656e677468",
                        "id": 1646,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7111:16:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_089295123856887e817ba9ef604c626ebffe924cc87e7d9c9d8c4f3d4f2186f7",
                          "typeString": "literal_string \"Invalid length\""
                        },
                        "value": "Invalid length"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_089295123856887e817ba9ef604c626ebffe924cc87e7d9c9d8c4f3d4f2186f7",
                          "typeString": "literal_string \"Invalid length\""
                        }
                      ],
                      "id": 1638,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7074:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1647,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7074:54:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1648,
                  "nodeType": "ExpressionStatement",
                  "src": "7074:54:6"
                },
                {
                  "documentation": "@dev Set baseURI.",
                  "expression": {
                    "id": 1651,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1649,
                      "name": "baseURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1420,
                      "src": "7168:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1650,
                      "name": "_baseURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1635,
                      "src": "7178:8:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "7168:18:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 1652,
                  "nodeType": "ExpressionStatement",
                  "src": "7168:18:6"
                }
              ]
            },
            "documentation": {
              "id": 1633,
              "nodeType": "StructuredDocumentation",
              "src": "6800:154:6",
              "text": " @dev Sets the baseURI to `_baseURI`.\n @notice Callable by this or inheriting contract.\n @param _baseURI String URI."
            },
            "id": 1654,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_setBaseURI",
            "nameLocation": "6968:11:6",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1636,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1635,
                  "mutability": "mutable",
                  "name": "_baseURI",
                  "nameLocation": "6994:8:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1654,
                  "src": "6980:22:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1634,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "6980:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6979:24:6"
            },
            "returnParameters": {
              "id": 1637,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7013:0:6"
            },
            "scope": 1677,
            "src": "6959:234:6",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1675,
              "nodeType": "Block",
              "src": "7416:180:6",
              "statements": [
                {
                  "documentation": "@dev Require baseURI length is not 0.",
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1667,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "arguments": [
                              {
                                "id": 1663,
                                "name": "baseURI",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1420,
                                "src": "7490:7:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_storage",
                                  "typeString": "string storage ref"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_string_storage",
                                  "typeString": "string storage ref"
                                }
                              ],
                              "id": 1662,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "7484:5:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                "typeString": "type(bytes storage pointer)"
                              },
                              "typeName": {
                                "id": 1661,
                                "name": "bytes",
                                "nodeType": "ElementaryTypeName",
                                "src": "7484:5:6",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1664,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7484:14:6",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_storage_ptr",
                              "typeString": "bytes storage pointer"
                            }
                          },
                          "id": 1665,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "7484:21:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 1666,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "7509:1:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "7484:26:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "456d7074792062617365555249",
                        "id": 1668,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7512:15:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3247d8bc89d36854791dbafe948ddc082d8cf6636c64b41fbbdf5761acfb1e22",
                          "typeString": "literal_string \"Empty baseURI\""
                        },
                        "value": "Empty baseURI"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3247d8bc89d36854791dbafe948ddc082d8cf6636c64b41fbbdf5761acfb1e22",
                          "typeString": "literal_string \"Empty baseURI\""
                        }
                      ],
                      "id": 1660,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7476:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1669,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7476:52:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1670,
                  "nodeType": "ExpressionStatement",
                  "src": "7476:52:6"
                },
                {
                  "documentation": "@dev Return baseURI.",
                  "expression": {
                    "id": 1673,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1671,
                      "name": "_baseURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1658,
                      "src": "7571:8:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1672,
                      "name": "baseURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1420,
                      "src": "7582:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "src": "7571:18:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "id": 1674,
                  "nodeType": "ExpressionStatement",
                  "src": "7571:18:6"
                }
              ]
            },
            "documentation": {
              "id": 1655,
              "nodeType": "StructuredDocumentation",
              "src": "7199:145:6",
              "text": " @dev Returns already set baseURI if it exists.\n @notice Callable by anyone.\n @return _baseURI baseURI set."
            },
            "functionSelector": "c9dd94c7",
            "id": 1676,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_getBaseURI",
            "nameLocation": "7358:11:6",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1656,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7369:2:6"
            },
            "returnParameters": {
              "id": 1659,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1658,
                  "mutability": "mutable",
                  "name": "_baseURI",
                  "nameLocation": "7406:8:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1676,
                  "src": "7392:22:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1657,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "7392:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7391:24:6"
            },
            "scope": 1677,
            "src": "7349:247:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 1678,
        "src": "800:6798:6",
        "usedErrors": []
      }
    ],
    "src": "36:7563:6"
  },
  "bytecode": "60806040523480156200001157600080fd5b5060405162000bb238038062000bb28339810160408190526200003491620001e1565b8151829082906200004d9060009060208501906200006e565b508051620000639060019060208401906200006e565b505050505062000288565b8280546200007c906200024b565b90600052602060002090601f016020900481019282620000a05760008555620000eb565b82601f10620000bb57805160ff1916838001178555620000eb565b82800160010185558215620000eb579182015b82811115620000eb578251825591602001919060010190620000ce565b50620000f9929150620000fd565b5090565b5b80821115620000f95760008155600101620000fe565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013c57600080fd5b81516001600160401b038082111562000159576200015962000114565b604051601f8301601f19908116603f0116810190828211818310171562000184576200018462000114565b81604052838152602092508683858801011115620001a157600080fd5b600091505b83821015620001c55785820183015181830184015290820190620001a6565b83821115620001d75760008385830101525b9695505050505050565b60008060408385031215620001f557600080fd5b82516001600160401b03808211156200020d57600080fd5b6200021b868387016200012a565b935060208501519150808211156200023257600080fd5b5062000241858286016200012a565b9150509250929050565b600181811c908216806200026057607f821691505b602082108114156200028257634e487b7160e01b600052602260045260246000fd5b50919050565b61091a80620002986000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806370a082311161006657806370a082311461015957806395d89b411461017a578063c87b56dd14610182578063c9dd94c714610195578063fb8f198d1461019d57600080fd5b806301ffc9a7146100a357806306fdde03146100cb57806342966c68146100e05780635899e7b2146100f55780636352211e1461012e575b600080fd5b6100b66100b1366004610784565b6101b0565b60405190151581526020015b60405180910390f35b6100d3610202565b6040516100c291906107b5565b6100f36100ee36600461080a565b610294565b005b6100b661010336600461083f565b6001600160a01b03919091166000908152600660209081526040808320938352929052205460ff1690565b61014161013c36600461080a565b61030e565b6040516001600160a01b0390911681526020016100c2565b61016c610167366004610869565b610373565b6040519081526020016100c2565b6100d36103fc565b6100d361019036600461080a565b61040b565b6100d3610510565b6101416101ab36600461083f565b61056c565b60006001600160e01b03198216635b5e139f60e01b14806101e157506001600160e01b03198216635164cf4760e01b145b806101fc57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461021190610884565b80601f016020809104026020016040519081016040528092919081815260200182805461023d90610884565b801561028a5780601f1061025f5761010080835404028352916020019161028a565b820191906000526020600020905b81548152906001019060200180831161026d57829003601f168201915b5050505050905090565b61029d8161030e565b6001600160a01b0316336001600160a01b0316146103025760405162461bcd60e51b815260206004820152601a60248201527f6275726e3a2073656e646572206d757374206265206f776e657200000000000060448201526064015b60405180910390fd5b61030b8161068f565b50565b6000818152600260205260408120546001600160a01b0316806101fc5760405162461bcd60e51b815260206004820152601c60248201527f6f776e65724f663a20746f6b656e20646f65736e27742065786973740000000060448201526064016102f9565b60006001600160a01b0382166103e05760405162461bcd60e51b815260206004820152602c60248201527f62616c616e63654f663a2061646472657373207a65726f206973206e6f74206160448201526b103b30b634b21037bbb732b960a11b60648201526084016102f9565b506001600160a01b031660009081526004602052604090205490565b60606001805461021190610884565b6000818152600260205260409020546060906001600160a01b03166104725760405162461bcd60e51b815260206004820152601d60248201527f746f6b656e5552493a20746f6b656e20646f65736e277420657869737400000060448201526064016102f9565b6000828152600360205260409020805461048b90610884565b80601f01602080910402602001604051908101604052809291908181526020018280546104b790610884565b80156105045780601f106104d957610100808354040283529160200191610504565b820191906000526020600020905b8154815290600101906020018083116104e757829003601f168201915b50505050509050919050565b60606005805461051f90610884565b1515905061055f5760405162461bcd60e51b815260206004820152600d60248201526c456d707479206261736555524960981b60448201526064016102f9565b6005805461021190610884565b60006001600160a01b0383166105c45760405162461bcd60e51b815260206004820152601760248201527f517565727920666f72207a65726f20616464726573732e00000000000000000060448201526064016102f9565b6000828152600260205260409020546001600160a01b031661061e5760405162461bcd60e51b81526020600482015260136024820152722737b716b2bc34b9ba32b73a103a37b5b2b71760691b60448201526064016102f9565b826001600160a01b03166106318361030e565b6001600160a01b0316146106875760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e206e6f74206f776e6564206279206164647265737300000000000060448201526064016102f9565b503092915050565b600061069a8261030e565b6001600160a01b038116600090815260046020526040812080549293506001929091906106c89084906108bf565b9091555050600082815260026020908152604080832080546001600160a01b0319169055600390915281206106fc91610736565b60405182906001600160a01b038316907fec9ab91322523c899ede7830ec9bfc992b5981cdcc27b91162fb23de5791117b90600090a35050565b50805461074290610884565b6000825580601f10610752575050565b601f01602090049060005260206000209081019061030b91905b80821115610780576000815560010161076c565b5090565b60006020828403121561079657600080fd5b81356001600160e01b0319811681146107ae57600080fd5b9392505050565b600060208083528351808285015260005b818110156107e2578581018301518582016040015282016107c6565b818111156107f4576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561081c57600080fd5b5035919050565b80356001600160a01b038116811461083a57600080fd5b919050565b6000806040838503121561085257600080fd5b61085b83610823565b946020939093013593505050565b60006020828403121561087b57600080fd5b6107ae82610823565b600181811c9082168061089857607f821691505b602082108114156108b957634e487b7160e01b600052602260045260246000fd5b50919050565b6000828210156108df57634e487b7160e01b600052601160045260246000fd5b50039056fea264697066735822122008eb3b37f1136254d6712051496ba6d6d84cd7d144b36ae1a2d8293a4ae057a964736f6c634300080c0033",
  "bytecodeSha1": "7bfb658c83d02297e9cbbef45272cd96f06eaa62",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.12+commit.f00d7308"
  },
  "contractName": "Soulbound",
  "coverageMap": {
    "branches": {
      "2": {
        "ERC4973.balanceOf": {
          "28": [
            5200,
            5219,
            true
          ]
        },
        "ERC4973.burn": {
          "26": [
            5015,
            5045,
            true
          ]
        },
        "ERC4973.ownerOf": {
          "27": [
            5430,
            5449,
            true
          ]
        }
      },
      "6": {
        "Soulbound._getBaseURI": {
          "23": [
            7484,
            7510,
            true
          ]
        },
        "Soulbound.issuerOf": {
          "24": [
            4436,
            4453,
            true
          ],
          "25": [
            4648,
            4672,
            true
          ]
        }
      }
    },
    "statements": {
      "2": {
        "ERC165.supportsInterface": {
          "2": [
            1678,
            1725
          ]
        },
        "ERC4973._burn": {
          "19": [
            6037,
            6058
          ],
          "20": [
            6064,
            6087
          ],
          "21": [
            6093,
            6119
          ],
          "22": [
            6126,
            6153
          ]
        },
        "ERC4973._exists": {
          "10": [
            5586,
            5623
          ]
        },
        "ERC4973.balanceOf": {
          "7": [
            5192,
            5268
          ],
          "8": [
            5274,
            5297
          ]
        },
        "ERC4973.burn": {
          "4": [
            5007,
            5076
          ],
          "5": [
            5082,
            5096
          ]
        },
        "ERC4973.name": {
          "3": [
            4632,
            4644
          ]
        },
        "ERC4973.ownerOf": {
          "6": [
            5422,
            5482
          ]
        },
        "ERC4973.supportsInterface": {
          "1": [
            4390,
            4548
          ]
        },
        "ERC4973.symbol": {
          "9": [
            4730,
            4744
          ]
        },
        "ERC4973.tokenURI": {
          "11": [
            4847,
            4905
          ],
          "12": [
            4911,
            4937
          ]
        }
      },
      "6": {
        "Soulbound._getBaseURI": {
          "13": [
            7476,
            7528
          ],
          "14": [
            7571,
            7589
          ]
        },
        "Soulbound.isMinted": {
          "0": [
            5279,
            5306
          ]
        },
        "Soulbound.issuerOf": {
          "15": [
            4428,
            4481
          ],
          "16": [
            4530,
            4579
          ],
          "17": [
            4640,
            4703
          ],
          "18": [
            4752,
            4772
          ]
        }
      }
    }
  },
  "dependencies": [
    "ERC165",
    "ERC4973",
    "IERC165",
    "IERC4973",
    "IERC721Metadata"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b506004361061009e5760003560e01c806370a082311161006657806370a082311461015957806395d89b411461017a578063c87b56dd14610182578063c9dd94c714610195578063fb8f198d1461019d57600080fd5b806301ffc9a7146100a357806306fdde03146100cb57806342966c68146100e05780635899e7b2146100f55780636352211e1461012e575b600080fd5b6100b66100b1366004610784565b6101b0565b60405190151581526020015b60405180910390f35b6100d3610202565b6040516100c291906107b5565b6100f36100ee36600461080a565b610294565b005b6100b661010336600461083f565b6001600160a01b03919091166000908152600660209081526040808320938352929052205460ff1690565b61014161013c36600461080a565b61030e565b6040516001600160a01b0390911681526020016100c2565b61016c610167366004610869565b610373565b6040519081526020016100c2565b6100d36103fc565b6100d361019036600461080a565b61040b565b6100d3610510565b6101416101ab36600461083f565b61056c565b60006001600160e01b03198216635b5e139f60e01b14806101e157506001600160e01b03198216635164cf4760e01b145b806101fc57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461021190610884565b80601f016020809104026020016040519081016040528092919081815260200182805461023d90610884565b801561028a5780601f1061025f5761010080835404028352916020019161028a565b820191906000526020600020905b81548152906001019060200180831161026d57829003601f168201915b5050505050905090565b61029d8161030e565b6001600160a01b0316336001600160a01b0316146103025760405162461bcd60e51b815260206004820152601a60248201527f6275726e3a2073656e646572206d757374206265206f776e657200000000000060448201526064015b60405180910390fd5b61030b8161068f565b50565b6000818152600260205260408120546001600160a01b0316806101fc5760405162461bcd60e51b815260206004820152601c60248201527f6f776e65724f663a20746f6b656e20646f65736e27742065786973740000000060448201526064016102f9565b60006001600160a01b0382166103e05760405162461bcd60e51b815260206004820152602c60248201527f62616c616e63654f663a2061646472657373207a65726f206973206e6f74206160448201526b103b30b634b21037bbb732b960a11b60648201526084016102f9565b506001600160a01b031660009081526004602052604090205490565b60606001805461021190610884565b6000818152600260205260409020546060906001600160a01b03166104725760405162461bcd60e51b815260206004820152601d60248201527f746f6b656e5552493a20746f6b656e20646f65736e277420657869737400000060448201526064016102f9565b6000828152600360205260409020805461048b90610884565b80601f01602080910402602001604051908101604052809291908181526020018280546104b790610884565b80156105045780601f106104d957610100808354040283529160200191610504565b820191906000526020600020905b8154815290600101906020018083116104e757829003601f168201915b50505050509050919050565b60606005805461051f90610884565b1515905061055f5760405162461bcd60e51b815260206004820152600d60248201526c456d707479206261736555524960981b60448201526064016102f9565b6005805461021190610884565b60006001600160a01b0383166105c45760405162461bcd60e51b815260206004820152601760248201527f517565727920666f72207a65726f20616464726573732e00000000000000000060448201526064016102f9565b6000828152600260205260409020546001600160a01b031661061e5760405162461bcd60e51b81526020600482015260136024820152722737b716b2bc34b9ba32b73a103a37b5b2b71760691b60448201526064016102f9565b826001600160a01b03166106318361030e565b6001600160a01b0316146106875760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e206e6f74206f776e6564206279206164647265737300000000000060448201526064016102f9565b503092915050565b600061069a8261030e565b6001600160a01b038116600090815260046020526040812080549293506001929091906106c89084906108bf565b9091555050600082815260026020908152604080832080546001600160a01b0319169055600390915281206106fc91610736565b60405182906001600160a01b038316907fec9ab91322523c899ede7830ec9bfc992b5981cdcc27b91162fb23de5791117b90600090a35050565b50805461074290610884565b6000825580601f10610752575050565b601f01602090049060005260206000209081019061030b91905b80821115610780576000815560010161076c565b5090565b60006020828403121561079657600080fd5b81356001600160e01b0319811681146107ae57600080fd5b9392505050565b600060208083528351808285015260005b818110156107e2578581018301518582016040015282016107c6565b818111156107f4576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561081c57600080fd5b5035919050565b80356001600160a01b038116811461083a57600080fd5b919050565b6000806040838503121561085257600080fd5b61085b83610823565b946020939093013593505050565b60006020828403121561087b57600080fd5b6107ae82610823565b600181811c9082168061089857607f821691505b602082108114156108b957634e487b7160e01b600052602260045260246000fd5b50919050565b6000828210156108df57634e487b7160e01b600052601160045260246000fd5b50039056fea264697066735822122008eb3b37f1136254d6712051496ba6d6d84cd7d144b36ae1a2d8293a4ae057a964736f6c634300080c0033",
  "deployedSourceMap": "800:6798:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4293:260:2;;;;;;:::i;:::-;;:::i;:::-;;;470:14:10;;463:22;445:41;;433:2;418:18;4293:260:2;;;;;;;;4557:92;;;:::i;:::-;;;;;;;:::i;4946:155::-;;;;;;:::i;:::-;;:::i;:::-;;5171:142:6;;;;;;:::i;:::-;-1:-1:-1;;;;;5286:10:6;;;;5263:4;5286:10;;;:5;:10;;;;;;;;:20;;;;;;;;;;;5171:142;5306:199:2;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1885:32:10;;;1867:51;;1855:2;1840:18;5306:199:2;1721:203:10;5105:197:2;;;;;;:::i;:::-;;:::i;:::-;;;2266:25:10;;;2254:2;2239:18;5105:197:2;2120:177:10;4653:96:2;;;:::i;4753:189::-;;;;;;:::i;:::-;;:::i;7349:247:6:-;;;:::i;4288:491::-;;;;;;:::i;:::-;;:::i;4293:260:2:-;4378:4;-1:-1:-1;;;;;;4403:48:2;;-1:-1:-1;;;4403:48:2;;:99;;-1:-1:-1;;;;;;;4461:41:2;;-1:-1:-1;;;4461:41:2;4403:99;:145;;;-1:-1:-1;;;;;;;;;;1685:40:2;;;4512:36;4390:158;4293:260;-1:-1:-1;;4293:260:2:o;4557:92::-;4611:13;4639:5;4632:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4557:92;:::o;4946:155::-;5029:16;5037:7;5029;:16::i;:::-;-1:-1:-1;;;;;5015:30:2;:10;-1:-1:-1;;;;;5015:30:2;;5007:69;;;;-1:-1:-1;;;5007:69:2;;2889:2:10;5007:69:2;;;2871:21:10;2928:2;2908:18;;;2901:30;2967:28;2947:18;;;2940:56;3013:18;;5007:69:2;;;;;;;;;5082:14;5088:7;5082:5;:14::i;:::-;4946:155;:::o;5306:199::-;5369:7;5400:16;;;:7;:16;;;;;;-1:-1:-1;;;;;5400:16:2;5430:19;5422:60;;;;-1:-1:-1;;;5422:60:2;;3244:2:10;5422:60:2;;;3226:21:10;3283:2;3263:18;;;3256:30;3322;3302:18;;;3295:58;3370:18;;5422:60:2;3042:352:10;5105:197:2;5177:7;-1:-1:-1;;;;;5200:19:2;;5192:76;;;;-1:-1:-1;;;5192:76:2;;3601:2:10;5192:76:2;;;3583:21:10;3640:2;3620:18;;;3613:30;3679:34;3659:18;;;3652:62;-1:-1:-1;;;3730:18:10;;;3723:42;3782:19;;5192:76:2;3399:408:10;5192:76:2;-1:-1:-1;;;;;;5281:16:2;;;;;:9;:16;;;;;;;5105:197::o;4653:96::-;4709:13;4737:7;4730:14;;;;;:::i;4753:189::-;5574:4;5593:16;;;:7;:16;;;;;;4826:13;;-1:-1:-1;;;;;5593:16:2;4847:58;;;;-1:-1:-1;;;4847:58:2;;4014:2:10;4847:58:2;;;3996:21:10;4053:2;4033:18;;;4026:30;4092:31;4072:18;;;4065:59;4141:18;;4847:58:2;3812:353:10;4847:58:2;4918:19;;;;:10;:19;;;;;4911:26;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4753:189;;;:::o;7349:247:6:-;7392:22;7490:7;7484:21;;;;;:::i;:::-;:26;;;-1:-1:-1;7476:52:6;;;;-1:-1:-1;;;7476:52:6;;4372:2:10;7476:52:6;;;4354:21:10;4411:2;4391:18;;;4384:30;-1:-1:-1;;;4430:18:10;;;4423:43;4483:18;;7476:52:6;4170:337:10;7476:52:6;7582:7;7571:18;;;;;:::i;4288:491::-;4357:7;-1:-1:-1;;;;;4436:17:6;;4428:53;;;;-1:-1:-1;;;4428:53:6;;4714:2:10;4428:53:6;;;4696:21:10;4753:2;4733:18;;;4726:30;4792:25;4772:18;;;4765:53;4835:18;;4428:53:6;4512:347:10;4428:53:6;5574:4:2;5593:16;;;:7;:16;;;;;;-1:-1:-1;;;;;5593:16:2;4530:49:6;;;;-1:-1:-1;;;4530:49:6;;5066:2:10;4530:49:6;;;5048:21:10;5105:2;5085:18;;;5078:30;-1:-1:-1;;;5124:18:10;;;5117:49;5183:18;;4530:49:6;4864:343:10;4530:49:6;4669:3;-1:-1:-1;;;;;4648:24:6;:17;4656:8;4648:7;:17::i;:::-;-1:-1:-1;;;;;4648:24:6;;4640:63;;;;-1:-1:-1;;;4640:63:6;;5414:2:10;4640:63:6;;;5396:21:10;5453:2;5433:18;;;5426:30;5492:28;5472:18;;;5465:56;5538:18;;4640:63:6;5212:350:10;4640:63:6;-1:-1:-1;4767:4:6;4288:491;;;;:::o;5943:215:2:-;5998:13;6014:16;6022:7;6014;:16::i;:::-;-1:-1:-1;;;;;6037:16:2;;;;;;:9;:16;;;;;:21;;5998:32;;-1:-1:-1;6057:1:2;;6037:16;;;:21;;6057:1;;6037:21;:::i;:::-;;;;-1:-1:-1;;6071:16:2;;;;:7;:16;;;;;;;;6064:23;;-1:-1:-1;;;;;;6064:23:2;;;6100:10;:19;;;;;6093:26;;;:::i;:::-;6131:22;;6145:7;;-1:-1:-1;;;;;6131:22:2;;;;;;;;5992:166;5943:215;:::o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:286:10:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:10;;209:43;;199:71;;266:1;263;256:12;199:71;289:5;14:286;-1:-1:-1;;;14:286:10:o;497:597::-;609:4;638:2;667;656:9;649:21;699:6;693:13;742:6;737:2;726:9;722:18;715:34;767:1;777:140;791:6;788:1;785:13;777:140;;;886:14;;;882:23;;876:30;852:17;;;871:2;848:26;841:66;806:10;;777:140;;;935:6;932:1;929:13;926:91;;;1005:1;1000:2;991:6;980:9;976:22;972:31;965:42;926:91;-1:-1:-1;1078:2:10;1057:15;-1:-1:-1;;1053:29:10;1038:45;;;;1085:2;1034:54;;497:597;-1:-1:-1;;;497:597:10:o;1099:180::-;1158:6;1211:2;1199:9;1190:7;1186:23;1182:32;1179:52;;;1227:1;1224;1217:12;1179:52;-1:-1:-1;1250:23:10;;1099:180;-1:-1:-1;1099:180:10:o;1284:173::-;1352:20;;-1:-1:-1;;;;;1401:31:10;;1391:42;;1381:70;;1447:1;1444;1437:12;1381:70;1284:173;;;:::o;1462:254::-;1530:6;1538;1591:2;1579:9;1570:7;1566:23;1562:32;1559:52;;;1607:1;1604;1597:12;1559:52;1630:29;1649:9;1630:29;:::i;:::-;1620:39;1706:2;1691:18;;;;1678:32;;-1:-1:-1;;;1462:254:10:o;1929:186::-;1988:6;2041:2;2029:9;2020:7;2016:23;2012:32;2009:52;;;2057:1;2054;2047:12;2009:52;2080:29;2099:9;2080:29;:::i;2302:380::-;2381:1;2377:12;;;;2424;;;2445:61;;2499:4;2491:6;2487:17;2477:27;;2445:61;2552:2;2544:6;2541:14;2521:18;2518:38;2515:161;;;2598:10;2593:3;2589:20;2586:1;2579:31;2633:4;2630:1;2623:15;2661:4;2658:1;2651:15;2515:161;;2302:380;;;:::o;5567:222::-;5607:4;5635:1;5632;5629:8;5626:131;;;5679:10;5674:3;5670:20;5667:1;5660:31;5714:4;5711:1;5704:15;5742:4;5739:1;5732:15;5626:131;-1:-1:-1;5774:9:10;;5567:222::o",
  "language": "Solidity",
  "natspec": {
    "author": "Daccred.",
    "details": "Soulbound Token Base Template.       This contract was inspired by       https://github.com/ethereum/EIPs/blob/master/assets/eip-4973/ERC-4973.sol       This contract is inherited by any contract to implement the Soulbound       template.       Soulbound tokens  cannot be transferred when minted to a particular address.       This is the base instance of the contract,       it includes minting functions and revoke functions.       Inheriting functions can wrap around the specified functions.       Also, this base contract instance does not include a capped supply.",
    "kind": "dev",
    "methods": {
      "_getBaseURI()": {
        "details": "Returns already set baseURI if it exists.",
        "notice": "Callable by anyone.",
        "returns": {
          "_baseURI": "baseURI set."
        }
      },
      "balanceOf(address)": {
        "details": "ABTs assigned to the zero address are considered invalid, and this  function throws for queries about the zero address.",
        "notice": "Count all ABTs assigned to an owner",
        "params": {
          "owner": "An address for whom to query the balance"
        },
        "returns": {
          "_0": "The number of ABTs owned by `owner`, possibly zero"
        }
      },
      "burn(uint256)": {
        "details": "Must emit a `event Revoke` with the `address to` field pointing to  the zero address.",
        "notice": "Destroys `tokenId`. At any time, an ABT receiver must be able to  disassociate themselves from an ABT publicly through calling this  function.",
        "params": {
          "tokenId": "The identifier for an ABT"
        }
      },
      "constructor": {
        "details": "Allows the deployer to set a name and a symbol for the token."
      },
      "isMinted(address,uint256)": {
        "details": "Returns true if token `_tokenId` was minted from this contract to `_to`.       `_to` must not be a 0 address.       `_tokenId` must be an existent token.",
        "notice": "Callable by anyone.",
        "params": {
          "_to": "Address to which token `_tokenId` is minted.",
          "_tokenId": "Token minted."
        },
        "returns": {
          "_0": "bool true or false."
        }
      },
      "issuerOf(address,uint256)": {
        "details": "Since a token cannnot be minted twice.       This function returns the address that minted token `_tokenId` to `_to`,       otherwise this contract.       `_to` must not be a 0 address.       `_tokenId` must be an existent token.       Owner of _tokenId must be _to.",
        "notice": "Callable by anyone.",
        "params": {
          "_to": "Address to which token `_tokenId` is minted.",
          "_tokenId": "Token minted."
        },
        "returns": {
          "_0": "address of issuer."
        }
      },
      "ownerOf(uint256)": {
        "details": "ABTs assigned to zero address are considered invalid, and queries  about them do throw.",
        "notice": "Find the address bound to an ERC4973 account-bound token",
        "params": {
          "tokenId": "The identifier for an ABT"
        },
        "returns": {
          "_0": "The address of the owner bound to the ABT"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "stateVariables": {
      "baseURI": {
        "details": "Stores the base URI on cases when the user wants to mint a token,       it automatically generates a string casted tokenURI using the       generateTokenURI function. This variable can only be modified by       the allowlist owner."
      },
      "mints": {
        "details": "Mapping of speific addresses to tokenIds and boolean for mint records."
      }
    },
    "title": "Soulbound Token Contract.",
    "version": 1
  },
  "offset": [
    800,
    7598
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x159 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0xC9DD94C7 EQ PUSH2 0x195 JUMPI DUP1 PUSH4 0xFB8F198D EQ PUSH2 0x19D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xCB JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0xE0 JUMPI DUP1 PUSH4 0x5899E7B2 EQ PUSH2 0xF5 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x12E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0xB1 CALLDATASIZE PUSH1 0x4 PUSH2 0x784 JUMP JUMPDEST PUSH2 0x1B0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD3 PUSH2 0x202 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC2 SWAP2 SWAP1 PUSH2 0x7B5 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0xEE CALLDATASIZE PUSH1 0x4 PUSH2 0x80A JUMP JUMPDEST PUSH2 0x294 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xB6 PUSH2 0x103 CALLDATASIZE PUSH1 0x4 PUSH2 0x83F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x141 PUSH2 0x13C CALLDATASIZE PUSH1 0x4 PUSH2 0x80A JUMP JUMPDEST PUSH2 0x30E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC2 JUMP JUMPDEST PUSH2 0x16C PUSH2 0x167 CALLDATASIZE PUSH1 0x4 PUSH2 0x869 JUMP JUMPDEST PUSH2 0x373 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC2 JUMP JUMPDEST PUSH2 0xD3 PUSH2 0x3FC JUMP JUMPDEST PUSH2 0xD3 PUSH2 0x190 CALLDATASIZE PUSH1 0x4 PUSH2 0x80A JUMP JUMPDEST PUSH2 0x40B JUMP JUMPDEST PUSH2 0xD3 PUSH2 0x510 JUMP JUMPDEST PUSH2 0x141 PUSH2 0x1AB CALLDATASIZE PUSH1 0x4 PUSH2 0x83F JUMP JUMPDEST PUSH2 0x56C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x1E1 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5164CF47 PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x1FC JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x211 SWAP1 PUSH2 0x884 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x23D SWAP1 PUSH2 0x884 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x28A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x25F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x28A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x26D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x29D DUP2 PUSH2 0x30E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x302 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6275726E3A2073656E646572206D757374206265206F776E6572000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x30B DUP2 PUSH2 0x68F JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x1FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F776E65724F663A20746F6B656E20646F65736E277420657869737400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2F9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x3E0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x62616C616E63654F663A2061646472657373207A65726F206973206E6F742061 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x103B30B634B21037BBB732B9 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2F9 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x211 SWAP1 PUSH2 0x884 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x472 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x746F6B656E5552493A20746F6B656E20646F65736E2774206578697374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2F9 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x48B SWAP1 PUSH2 0x884 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x4B7 SWAP1 PUSH2 0x884 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x504 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4D9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x504 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4E7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x5 DUP1 SLOAD PUSH2 0x51F SWAP1 PUSH2 0x884 JUMP JUMPDEST ISZERO ISZERO SWAP1 POP PUSH2 0x55F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x456D7074792062617365555249 PUSH1 0x98 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2F9 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH2 0x211 SWAP1 PUSH2 0x884 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x5C4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x517565727920666F72207A65726F20616464726573732E000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2F9 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x61E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x2737B716B2BC34B9BA32B73A103A37B5B2B717 PUSH1 0x69 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2F9 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x631 DUP4 PUSH2 0x30E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x687 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F6B656E206E6F74206F776E65642062792061646472657373000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2F9 JUMP JUMPDEST POP ADDRESS SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x69A DUP3 PUSH2 0x30E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP3 SWAP4 POP PUSH1 0x1 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0x6C8 SWAP1 DUP5 SWAP1 PUSH2 0x8BF JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE PUSH1 0x3 SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH2 0x6FC SWAP2 PUSH2 0x736 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH32 0xEC9AB91322523C899EDE7830EC9BFC992B5981CDCC27B91162FB23DE5791117B SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST POP DUP1 SLOAD PUSH2 0x742 SWAP1 PUSH2 0x884 JUMP JUMPDEST PUSH1 0x0 DUP3 SSTORE DUP1 PUSH1 0x1F LT PUSH2 0x752 JUMPI POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x30B SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x780 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x76C JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x796 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x7AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x7E2 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x7C6 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x7F4 JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x81C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x83A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x852 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x85B DUP4 PUSH2 0x823 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x87B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7AE DUP3 PUSH2 0x823 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x898 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x8B9 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x8DF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SUB SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDMOD 0xEB EXTCODESIZE CALLDATACOPY CALL SGT PUSH3 0x54D671 KECCAK256 MLOAD 0x49 PUSH12 0xA6D6D84CD7D144B36AE1A2D8 0x29 GASPRICE 0x4A 0xE0 JUMPI 0xA9 PUSH5 0x736F6C6343 STOP ADDMOD 0xC STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        800,
        7598
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "5": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "CALLVALUE",
      "path": "6"
    },
    "6": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "DUP1",
      "path": "6"
    },
    "7": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "ISZERO",
      "path": "6"
    },
    "8": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "12": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "DUP1",
      "path": "6"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "REVERT",
      "path": "6"
    },
    "16": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "17": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "POP",
      "path": "6"
    },
    "18": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "CALLDATASIZE",
      "path": "6"
    },
    "21": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "LT",
      "path": "6"
    },
    "22": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x9E"
    },
    "25": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "26": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "CALLDATALOAD",
      "path": "6"
    },
    "29": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "SHR",
      "path": "6"
    },
    "32": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "DUP1",
      "path": "6"
    },
    "33": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "PUSH4",
      "path": "6",
      "value": "0x70A08231"
    },
    "38": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "GT",
      "path": "6"
    },
    "39": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x66"
    },
    "42": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "43": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "DUP1",
      "path": "6"
    },
    "44": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "PUSH4",
      "path": "6",
      "value": "0x70A08231"
    },
    "49": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "EQ",
      "path": "6"
    },
    "50": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x159"
    },
    "53": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "54": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "DUP1",
      "path": "6"
    },
    "55": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "PUSH4",
      "path": "6",
      "value": "0x95D89B41"
    },
    "60": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "EQ",
      "path": "6"
    },
    "61": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x17A"
    },
    "64": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "65": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "DUP1",
      "path": "6"
    },
    "66": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "PUSH4",
      "path": "6",
      "value": "0xC87B56DD"
    },
    "71": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "EQ",
      "path": "6"
    },
    "72": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x182"
    },
    "75": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "76": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "DUP1",
      "path": "6"
    },
    "77": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "PUSH4",
      "path": "6",
      "value": "0xC9DD94C7"
    },
    "82": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "EQ",
      "path": "6"
    },
    "83": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x195"
    },
    "86": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "87": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "DUP1",
      "path": "6"
    },
    "88": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "PUSH4",
      "path": "6",
      "value": "0xFB8F198D"
    },
    "93": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "EQ",
      "path": "6"
    },
    "94": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x19D"
    },
    "97": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "98": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x0"
    },
    "100": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "DUP1",
      "path": "6"
    },
    "101": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "REVERT",
      "path": "6"
    },
    "102": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "103": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "DUP1",
      "path": "6"
    },
    "104": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "PUSH4",
      "path": "6",
      "value": "0x1FFC9A7"
    },
    "109": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "EQ",
      "path": "6"
    },
    "110": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0xA3"
    },
    "113": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "114": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "DUP1",
      "path": "6"
    },
    "115": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "PUSH4",
      "path": "6",
      "value": "0x6FDDE03"
    },
    "120": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "EQ",
      "path": "6"
    },
    "121": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0xCB"
    },
    "124": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "125": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "DUP1",
      "path": "6"
    },
    "126": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "PUSH4",
      "path": "6",
      "value": "0x42966C68"
    },
    "131": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "EQ",
      "path": "6"
    },
    "132": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0xE0"
    },
    "135": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "136": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "DUP1",
      "path": "6"
    },
    "137": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "PUSH4",
      "path": "6",
      "value": "0x5899E7B2"
    },
    "142": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "EQ",
      "path": "6"
    },
    "143": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0xF5"
    },
    "146": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "147": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "DUP1",
      "path": "6"
    },
    "148": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "PUSH4",
      "path": "6",
      "value": "0x6352211E"
    },
    "153": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "EQ",
      "path": "6"
    },
    "154": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x12E"
    },
    "157": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "158": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "159": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x0"
    },
    "161": {
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "DUP1",
      "path": "6"
    },
    "162": {
      "first_revert": true,
      "fn": null,
      "offset": [
        800,
        7598
      ],
      "op": "REVERT",
      "path": "6"
    },
    "163": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4293,
        4553
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "164": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4293,
        4553
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xB6"
    },
    "167": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4293,
        4553
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xB1"
    },
    "170": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4293,
        4553
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "171": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4293,
        4553
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "173": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4293,
        4553
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x784"
    },
    "176": {
      "fn": "ERC4973.supportsInterface",
      "jump": "i",
      "offset": [
        4293,
        4553
      ],
      "op": "JUMP",
      "path": "2"
    },
    "177": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4293,
        4553
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "178": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4293,
        4553
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1B0"
    },
    "181": {
      "fn": "ERC4973.supportsInterface",
      "jump": "i",
      "offset": [
        4293,
        4553
      ],
      "op": "JUMP",
      "path": "2"
    },
    "182": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4293,
        4553
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "183": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4293,
        4553
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "185": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4293,
        4553
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "186": {
      "op": "SWAP1"
    },
    "187": {
      "op": "ISZERO"
    },
    "188": {
      "op": "ISZERO"
    },
    "189": {
      "op": "DUP2"
    },
    "190": {
      "op": "MSTORE"
    },
    "191": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "193": {
      "op": "ADD"
    },
    "194": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4293,
        4553
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "195": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4293,
        4553
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "197": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4293,
        4553
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "198": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4293,
        4553
      ],
      "op": "DUP1",
      "path": "2"
    },
    "199": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4293,
        4553
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "200": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4293,
        4553
      ],
      "op": "SUB",
      "path": "2"
    },
    "201": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4293,
        4553
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "202": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4293,
        4553
      ],
      "op": "RETURN",
      "path": "2"
    },
    "203": {
      "fn": "ERC4973.name",
      "offset": [
        4557,
        4649
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "204": {
      "fn": "ERC4973.name",
      "offset": [
        4557,
        4649
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xD3"
    },
    "207": {
      "fn": "ERC4973.name",
      "offset": [
        4557,
        4649
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x202"
    },
    "210": {
      "fn": "ERC4973.name",
      "jump": "i",
      "offset": [
        4557,
        4649
      ],
      "op": "JUMP",
      "path": "2"
    },
    "211": {
      "fn": "ERC4973.name",
      "offset": [
        4557,
        4649
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "212": {
      "fn": "ERC4973.name",
      "offset": [
        4557,
        4649
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "214": {
      "fn": "ERC4973.name",
      "offset": [
        4557,
        4649
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "215": {
      "fn": "ERC4973.name",
      "offset": [
        4557,
        4649
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xC2"
    },
    "218": {
      "fn": "ERC4973.name",
      "offset": [
        4557,
        4649
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "219": {
      "fn": "ERC4973.name",
      "offset": [
        4557,
        4649
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "220": {
      "fn": "ERC4973.name",
      "offset": [
        4557,
        4649
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x7B5"
    },
    "223": {
      "fn": "ERC4973.name",
      "jump": "i",
      "offset": [
        4557,
        4649
      ],
      "op": "JUMP",
      "path": "2"
    },
    "224": {
      "fn": "ERC4973.burn",
      "offset": [
        4946,
        5101
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "225": {
      "fn": "ERC4973.burn",
      "offset": [
        4946,
        5101
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF3"
    },
    "228": {
      "fn": "ERC4973.burn",
      "offset": [
        4946,
        5101
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEE"
    },
    "231": {
      "fn": "ERC4973.burn",
      "offset": [
        4946,
        5101
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "232": {
      "fn": "ERC4973.burn",
      "offset": [
        4946,
        5101
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "234": {
      "fn": "ERC4973.burn",
      "offset": [
        4946,
        5101
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x80A"
    },
    "237": {
      "fn": "ERC4973.burn",
      "jump": "i",
      "offset": [
        4946,
        5101
      ],
      "op": "JUMP",
      "path": "2"
    },
    "238": {
      "fn": "ERC4973.burn",
      "offset": [
        4946,
        5101
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "239": {
      "fn": "ERC4973.burn",
      "offset": [
        4946,
        5101
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x294"
    },
    "242": {
      "fn": "ERC4973.burn",
      "jump": "i",
      "offset": [
        4946,
        5101
      ],
      "op": "JUMP",
      "path": "2"
    },
    "243": {
      "fn": "ERC4973.burn",
      "offset": [
        4946,
        5101
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "244": {
      "fn": "ERC4973.burn",
      "offset": [
        4946,
        5101
      ],
      "op": "STOP",
      "path": "2"
    },
    "245": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5171,
        5313
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "246": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5171,
        5313
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0xB6"
    },
    "249": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5171,
        5313
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x103"
    },
    "252": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5171,
        5313
      ],
      "op": "CALLDATASIZE",
      "path": "6"
    },
    "253": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5171,
        5313
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x4"
    },
    "255": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5171,
        5313
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x83F"
    },
    "258": {
      "fn": "Soulbound.isMinted",
      "jump": "i",
      "offset": [
        5171,
        5313
      ],
      "op": "JUMP",
      "path": "6"
    },
    "259": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5171,
        5313
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "260": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "262": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "264": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "266": {
      "op": "SHL"
    },
    "267": {
      "op": "SUB"
    },
    "268": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5286,
        5296
      ],
      "op": "SWAP2",
      "path": "6",
      "statement": 0
    },
    "269": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5286,
        5296
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "270": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5286,
        5296
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "271": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5286,
        5296
      ],
      "op": "AND",
      "path": "6"
    },
    "272": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5263,
        5267
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x0"
    },
    "274": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5286,
        5296
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "275": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5286,
        5296
      ],
      "op": "DUP2",
      "path": "6"
    },
    "276": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5286,
        5296
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "277": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5286,
        5291
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x6"
    },
    "279": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5286,
        5296
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x20"
    },
    "281": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5286,
        5296
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "282": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5286,
        5296
      ],
      "op": "DUP2",
      "path": "6"
    },
    "283": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5286,
        5296
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "284": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5286,
        5296
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "286": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5286,
        5296
      ],
      "op": "DUP1",
      "path": "6"
    },
    "287": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5286,
        5296
      ],
      "op": "DUP4",
      "path": "6"
    },
    "288": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5286,
        5296
      ],
      "op": "KECCAK256",
      "path": "6"
    },
    "289": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5286,
        5306
      ],
      "op": "SWAP4",
      "path": "6"
    },
    "290": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5286,
        5306
      ],
      "op": "DUP4",
      "path": "6"
    },
    "291": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5286,
        5306
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "292": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5286,
        5306
      ],
      "op": "SWAP3",
      "path": "6"
    },
    "293": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5286,
        5306
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "294": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5286,
        5306
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "295": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5286,
        5306
      ],
      "op": "KECCAK256",
      "path": "6"
    },
    "296": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5286,
        5306
      ],
      "op": "SLOAD",
      "path": "6"
    },
    "297": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5286,
        5306
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0xFF"
    },
    "299": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5286,
        5306
      ],
      "op": "AND",
      "path": "6"
    },
    "300": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5286,
        5306
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "301": {
      "fn": "Soulbound.isMinted",
      "offset": [
        5171,
        5313
      ],
      "op": "JUMP",
      "path": "6"
    },
    "302": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5306,
        5505
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "303": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5306,
        5505
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x141"
    },
    "306": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5306,
        5505
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x13C"
    },
    "309": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5306,
        5505
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "310": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5306,
        5505
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "312": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5306,
        5505
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x80A"
    },
    "315": {
      "fn": "ERC4973.ownerOf",
      "jump": "i",
      "offset": [
        5306,
        5505
      ],
      "op": "JUMP",
      "path": "2"
    },
    "316": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5306,
        5505
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "317": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5306,
        5505
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x30E"
    },
    "320": {
      "fn": "ERC4973.ownerOf",
      "jump": "i",
      "offset": [
        5306,
        5505
      ],
      "op": "JUMP",
      "path": "2"
    },
    "321": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5306,
        5505
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "322": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5306,
        5505
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "324": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5306,
        5505
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "325": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "327": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "329": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "331": {
      "op": "SHL"
    },
    "332": {
      "op": "SUB"
    },
    "333": {
      "op": "SWAP1"
    },
    "334": {
      "op": "SWAP2"
    },
    "335": {
      "op": "AND"
    },
    "336": {
      "op": "DUP2"
    },
    "337": {
      "op": "MSTORE"
    },
    "338": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "340": {
      "op": "ADD"
    },
    "341": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5306,
        5505
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xC2"
    },
    "344": {
      "op": "JUMP"
    },
    "345": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5105,
        5302
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "346": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5105,
        5302
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x16C"
    },
    "349": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5105,
        5302
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x167"
    },
    "352": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5105,
        5302
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "353": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5105,
        5302
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "355": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5105,
        5302
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x869"
    },
    "358": {
      "fn": "ERC4973.balanceOf",
      "jump": "i",
      "offset": [
        5105,
        5302
      ],
      "op": "JUMP",
      "path": "2"
    },
    "359": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5105,
        5302
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "360": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5105,
        5302
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x373"
    },
    "363": {
      "fn": "ERC4973.balanceOf",
      "jump": "i",
      "offset": [
        5105,
        5302
      ],
      "op": "JUMP",
      "path": "2"
    },
    "364": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5105,
        5302
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "365": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5105,
        5302
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "367": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5105,
        5302
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "368": {
      "op": "SWAP1"
    },
    "369": {
      "op": "DUP2"
    },
    "370": {
      "op": "MSTORE"
    },
    "371": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "373": {
      "op": "ADD"
    },
    "374": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5105,
        5302
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xC2"
    },
    "377": {
      "op": "JUMP"
    },
    "378": {
      "fn": "ERC4973.symbol",
      "offset": [
        4653,
        4749
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "379": {
      "fn": "ERC4973.symbol",
      "offset": [
        4653,
        4749
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xD3"
    },
    "382": {
      "fn": "ERC4973.symbol",
      "offset": [
        4653,
        4749
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3FC"
    },
    "385": {
      "fn": "ERC4973.symbol",
      "jump": "i",
      "offset": [
        4653,
        4749
      ],
      "op": "JUMP",
      "path": "2"
    },
    "386": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4753,
        4942
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "387": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4753,
        4942
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xD3"
    },
    "390": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4753,
        4942
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x190"
    },
    "393": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4753,
        4942
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "394": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4753,
        4942
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "396": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4753,
        4942
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x80A"
    },
    "399": {
      "fn": "ERC4973.tokenURI",
      "jump": "i",
      "offset": [
        4753,
        4942
      ],
      "op": "JUMP",
      "path": "2"
    },
    "400": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4753,
        4942
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "401": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4753,
        4942
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x40B"
    },
    "404": {
      "fn": "ERC4973.tokenURI",
      "jump": "i",
      "offset": [
        4753,
        4942
      ],
      "op": "JUMP",
      "path": "2"
    },
    "405": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7349,
        7596
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "406": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7349,
        7596
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0xD3"
    },
    "409": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7349,
        7596
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x510"
    },
    "412": {
      "fn": "Soulbound._getBaseURI",
      "jump": "i",
      "offset": [
        7349,
        7596
      ],
      "op": "JUMP",
      "path": "6"
    },
    "413": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4288,
        4779
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "414": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4288,
        4779
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x141"
    },
    "417": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4288,
        4779
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x1AB"
    },
    "420": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4288,
        4779
      ],
      "op": "CALLDATASIZE",
      "path": "6"
    },
    "421": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4288,
        4779
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x4"
    },
    "423": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4288,
        4779
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x83F"
    },
    "426": {
      "fn": "Soulbound.issuerOf",
      "jump": "i",
      "offset": [
        4288,
        4779
      ],
      "op": "JUMP",
      "path": "6"
    },
    "427": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4288,
        4779
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "428": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4288,
        4779
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x56C"
    },
    "431": {
      "fn": "Soulbound.issuerOf",
      "jump": "i",
      "offset": [
        4288,
        4779
      ],
      "op": "JUMP",
      "path": "6"
    },
    "432": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4293,
        4553
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "433": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4378,
        4382
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "435": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "437": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "439": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "441": {
      "op": "SHL"
    },
    "442": {
      "op": "SUB"
    },
    "443": {
      "op": "NOT"
    },
    "444": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4403,
        4451
      ],
      "op": "DUP3",
      "path": "2",
      "statement": 1
    },
    "445": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4403,
        4451
      ],
      "op": "AND",
      "path": "2"
    },
    "446": {
      "op": "PUSH4",
      "value": "0x5B5E139F"
    },
    "451": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "453": {
      "op": "SHL"
    },
    "454": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4403,
        4451
      ],
      "op": "EQ",
      "path": "2"
    },
    "455": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4403,
        4451
      ],
      "op": "DUP1",
      "path": "2"
    },
    "456": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4403,
        4502
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1E1"
    },
    "459": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4403,
        4502
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "460": {
      "op": "POP"
    },
    "461": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "463": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "465": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "467": {
      "op": "SHL"
    },
    "468": {
      "op": "SUB"
    },
    "469": {
      "op": "NOT"
    },
    "470": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4461,
        4502
      ],
      "op": "DUP3",
      "path": "2"
    },
    "471": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4461,
        4502
      ],
      "op": "AND",
      "path": "2"
    },
    "472": {
      "op": "PUSH4",
      "value": "0x5164CF47"
    },
    "477": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "479": {
      "op": "SHL"
    },
    "480": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4461,
        4502
      ],
      "op": "EQ",
      "path": "2"
    },
    "481": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4403,
        4502
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "482": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4403,
        4548
      ],
      "op": "DUP1",
      "path": "2"
    },
    "483": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4403,
        4548
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1FC"
    },
    "486": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4403,
        4548
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "487": {
      "op": "POP"
    },
    "488": {
      "op": "PUSH4",
      "value": "0x1FFC9A7"
    },
    "493": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "495": {
      "op": "SHL"
    },
    "496": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "498": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "500": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "502": {
      "op": "SHL"
    },
    "503": {
      "op": "SUB"
    },
    "504": {
      "op": "NOT"
    },
    "505": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        1685,
        1725
      ],
      "op": "DUP4",
      "path": "2",
      "statement": 2
    },
    "506": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        1685,
        1725
      ],
      "op": "AND",
      "path": "2"
    },
    "507": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        1685,
        1725
      ],
      "op": "EQ",
      "path": "2"
    },
    "508": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4512,
        4548
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "509": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4390,
        4548
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "510": {
      "fn": "ERC4973.supportsInterface",
      "offset": [
        4293,
        4553
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "511": {
      "op": "POP"
    },
    "512": {
      "op": "POP"
    },
    "513": {
      "fn": "ERC4973.supportsInterface",
      "jump": "o",
      "offset": [
        4293,
        4553
      ],
      "op": "JUMP",
      "path": "2"
    },
    "514": {
      "fn": "ERC4973.name",
      "offset": [
        4557,
        4649
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "515": {
      "fn": "ERC4973.name",
      "offset": [
        4611,
        4624
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "517": {
      "fn": "ERC4973.name",
      "offset": [
        4639,
        4644
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 3,
      "value": "0x0"
    },
    "519": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "DUP1",
      "path": "2"
    },
    "520": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "521": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x211"
    },
    "524": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "525": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x884"
    },
    "528": {
      "fn": "ERC4973.name",
      "jump": "i",
      "offset": [
        4632,
        4644
      ],
      "op": "JUMP",
      "path": "2"
    },
    "529": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "530": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "DUP1",
      "path": "2"
    },
    "531": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "533": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "ADD",
      "path": "2"
    },
    "534": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "536": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "DUP1",
      "path": "2"
    },
    "537": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "538": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "DIV",
      "path": "2"
    },
    "539": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "MUL",
      "path": "2"
    },
    "540": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "542": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "ADD",
      "path": "2"
    },
    "543": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "545": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "546": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "547": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "DUP2",
      "path": "2"
    },
    "548": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "ADD",
      "path": "2"
    },
    "549": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "551": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "552": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "DUP1",
      "path": "2"
    },
    "553": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "554": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "555": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "556": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "DUP2",
      "path": "2"
    },
    "557": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "DUP2",
      "path": "2"
    },
    "558": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "559": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "561": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "ADD",
      "path": "2"
    },
    "562": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "DUP3",
      "path": "2"
    },
    "563": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "DUP1",
      "path": "2"
    },
    "564": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "565": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x23D"
    },
    "568": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "569": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x884"
    },
    "572": {
      "fn": "ERC4973.name",
      "jump": "i",
      "offset": [
        4632,
        4644
      ],
      "op": "JUMP",
      "path": "2"
    },
    "573": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "574": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "DUP1",
      "path": "2"
    },
    "575": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "576": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x28A"
    },
    "579": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "580": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "DUP1",
      "path": "2"
    },
    "581": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "583": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "LT",
      "path": "2"
    },
    "584": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x25F"
    },
    "587": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "588": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x100"
    },
    "591": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "DUP1",
      "path": "2"
    },
    "592": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "DUP4",
      "path": "2"
    },
    "593": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "594": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "DIV",
      "path": "2"
    },
    "595": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "MUL",
      "path": "2"
    },
    "596": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "DUP4",
      "path": "2"
    },
    "597": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "598": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "599": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "601": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "ADD",
      "path": "2"
    },
    "602": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "603": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x28A"
    },
    "606": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "JUMP",
      "path": "2"
    },
    "607": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "608": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "DUP3",
      "path": "2"
    },
    "609": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "ADD",
      "path": "2"
    },
    "610": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "611": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "612": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "614": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "615": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "617": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "619": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "620": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "621": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "622": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "DUP2",
      "path": "2"
    },
    "623": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "624": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "DUP2",
      "path": "2"
    },
    "625": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "626": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "627": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "629": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "ADD",
      "path": "2"
    },
    "630": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "631": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "633": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "ADD",
      "path": "2"
    },
    "634": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "DUP1",
      "path": "2"
    },
    "635": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "DUP4",
      "path": "2"
    },
    "636": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "GT",
      "path": "2"
    },
    "637": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x26D"
    },
    "640": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "641": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "DUP3",
      "path": "2"
    },
    "642": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "643": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "SUB",
      "path": "2"
    },
    "644": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "646": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "AND",
      "path": "2"
    },
    "647": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "DUP3",
      "path": "2"
    },
    "648": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "ADD",
      "path": "2"
    },
    "649": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "650": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "651": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "POP",
      "path": "2"
    },
    "652": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "POP",
      "path": "2"
    },
    "653": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "POP",
      "path": "2"
    },
    "654": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "POP",
      "path": "2"
    },
    "655": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "POP",
      "path": "2"
    },
    "656": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "657": {
      "fn": "ERC4973.name",
      "offset": [
        4632,
        4644
      ],
      "op": "POP",
      "path": "2"
    },
    "658": {
      "fn": "ERC4973.name",
      "offset": [
        4557,
        4649
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "659": {
      "fn": "ERC4973.name",
      "jump": "o",
      "offset": [
        4557,
        4649
      ],
      "op": "JUMP",
      "path": "2"
    },
    "660": {
      "fn": "ERC4973.burn",
      "offset": [
        4946,
        5101
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "661": {
      "fn": "ERC4973.burn",
      "offset": [
        5029,
        5045
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 4,
      "value": "0x29D"
    },
    "664": {
      "fn": "ERC4973.burn",
      "offset": [
        5037,
        5044
      ],
      "op": "DUP2",
      "path": "2"
    },
    "665": {
      "fn": "ERC4973.burn",
      "offset": [
        5029,
        5036
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x30E"
    },
    "668": {
      "fn": "ERC4973.burn",
      "jump": "i",
      "offset": [
        5029,
        5045
      ],
      "op": "JUMP",
      "path": "2"
    },
    "669": {
      "fn": "ERC4973.burn",
      "offset": [
        5029,
        5045
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "670": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "672": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "674": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "676": {
      "op": "SHL"
    },
    "677": {
      "op": "SUB"
    },
    "678": {
      "fn": "ERC4973.burn",
      "offset": [
        5015,
        5045
      ],
      "op": "AND",
      "path": "2"
    },
    "679": {
      "fn": "ERC4973.burn",
      "offset": [
        5015,
        5025
      ],
      "op": "CALLER",
      "path": "2"
    },
    "680": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "682": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "684": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "686": {
      "op": "SHL"
    },
    "687": {
      "op": "SUB"
    },
    "688": {
      "fn": "ERC4973.burn",
      "offset": [
        5015,
        5045
      ],
      "op": "AND",
      "path": "2"
    },
    "689": {
      "branch": 26,
      "fn": "ERC4973.burn",
      "offset": [
        5015,
        5045
      ],
      "op": "EQ",
      "path": "2"
    },
    "690": {
      "fn": "ERC4973.burn",
      "offset": [
        5007,
        5076
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x302"
    },
    "693": {
      "branch": 26,
      "fn": "ERC4973.burn",
      "offset": [
        5007,
        5076
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "694": {
      "fn": "ERC4973.burn",
      "offset": [
        5007,
        5076
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "696": {
      "fn": "ERC4973.burn",
      "offset": [
        5007,
        5076
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "697": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "701": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "703": {
      "op": "SHL"
    },
    "704": {
      "fn": "ERC4973.burn",
      "offset": [
        5007,
        5076
      ],
      "op": "DUP2",
      "path": "2"
    },
    "705": {
      "fn": "ERC4973.burn",
      "offset": [
        5007,
        5076
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "706": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "708": {
      "fn": "ERC4973.burn",
      "offset": [
        5007,
        5076
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "710": {
      "fn": "ERC4973.burn",
      "offset": [
        5007,
        5076
      ],
      "op": "DUP3",
      "path": "2"
    },
    "711": {
      "fn": "ERC4973.burn",
      "offset": [
        5007,
        5076
      ],
      "op": "ADD",
      "path": "2"
    },
    "712": {
      "op": "MSTORE"
    },
    "713": {
      "op": "PUSH1",
      "value": "0x1A"
    },
    "715": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "717": {
      "op": "DUP3"
    },
    "718": {
      "op": "ADD"
    },
    "719": {
      "op": "MSTORE"
    },
    "720": {
      "op": "PUSH32",
      "value": "0x6275726E3A2073656E646572206D757374206265206F776E6572000000000000"
    },
    "753": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "755": {
      "op": "DUP3"
    },
    "756": {
      "op": "ADD"
    },
    "757": {
      "op": "MSTORE"
    },
    "758": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "760": {
      "op": "ADD"
    },
    "761": {
      "fn": "ERC4973.burn",
      "offset": [
        5007,
        5076
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "762": {
      "fn": "ERC4973.burn",
      "offset": [
        5007,
        5076
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "764": {
      "fn": "ERC4973.burn",
      "offset": [
        5007,
        5076
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "765": {
      "fn": "ERC4973.burn",
      "offset": [
        5007,
        5076
      ],
      "op": "DUP1",
      "path": "2"
    },
    "766": {
      "fn": "ERC4973.burn",
      "offset": [
        5007,
        5076
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "767": {
      "fn": "ERC4973.burn",
      "offset": [
        5007,
        5076
      ],
      "op": "SUB",
      "path": "2"
    },
    "768": {
      "fn": "ERC4973.burn",
      "offset": [
        5007,
        5076
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "769": {
      "fn": "ERC4973.burn",
      "offset": [
        5007,
        5076
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "2"
    },
    "770": {
      "fn": "ERC4973.burn",
      "offset": [
        5007,
        5076
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "771": {
      "fn": "ERC4973.burn",
      "offset": [
        5082,
        5096
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 5,
      "value": "0x30B"
    },
    "774": {
      "fn": "ERC4973.burn",
      "offset": [
        5088,
        5095
      ],
      "op": "DUP2",
      "path": "2"
    },
    "775": {
      "fn": "ERC4973.burn",
      "offset": [
        5082,
        5087
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x68F"
    },
    "778": {
      "fn": "ERC4973.burn",
      "jump": "i",
      "offset": [
        5082,
        5096
      ],
      "op": "JUMP",
      "path": "2"
    },
    "779": {
      "fn": "ERC4973.burn",
      "offset": [
        5082,
        5096
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "780": {
      "fn": "ERC4973.burn",
      "offset": [
        4946,
        5101
      ],
      "op": "POP",
      "path": "2"
    },
    "781": {
      "fn": "ERC4973.burn",
      "jump": "o",
      "offset": [
        4946,
        5101
      ],
      "op": "JUMP",
      "path": "2"
    },
    "782": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5306,
        5505
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "783": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5369,
        5376
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "785": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5400,
        5416
      ],
      "op": "DUP2",
      "path": "2"
    },
    "786": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5400,
        5416
      ],
      "op": "DUP2",
      "path": "2"
    },
    "787": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5400,
        5416
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "788": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5400,
        5407
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "790": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5400,
        5416
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "792": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5400,
        5416
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "793": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5400,
        5416
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "795": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5400,
        5416
      ],
      "op": "DUP2",
      "path": "2"
    },
    "796": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5400,
        5416
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "797": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5400,
        5416
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "798": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "800": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "802": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "804": {
      "op": "SHL"
    },
    "805": {
      "op": "SUB"
    },
    "806": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5400,
        5416
      ],
      "op": "AND",
      "path": "2"
    },
    "807": {
      "branch": 27,
      "fn": "ERC4973.ownerOf",
      "offset": [
        5430,
        5449
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 6
    },
    "808": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5422,
        5482
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1FC"
    },
    "811": {
      "branch": 27,
      "fn": "ERC4973.ownerOf",
      "offset": [
        5422,
        5482
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "812": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5422,
        5482
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "814": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5422,
        5482
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "815": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "819": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "821": {
      "op": "SHL"
    },
    "822": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5422,
        5482
      ],
      "op": "DUP2",
      "path": "2"
    },
    "823": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5422,
        5482
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "824": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "826": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5422,
        5482
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "828": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5422,
        5482
      ],
      "op": "DUP3",
      "path": "2"
    },
    "829": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5422,
        5482
      ],
      "op": "ADD",
      "path": "2"
    },
    "830": {
      "op": "MSTORE"
    },
    "831": {
      "op": "PUSH1",
      "value": "0x1C"
    },
    "833": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "835": {
      "op": "DUP3"
    },
    "836": {
      "op": "ADD"
    },
    "837": {
      "op": "MSTORE"
    },
    "838": {
      "op": "PUSH32",
      "value": "0x6F776E65724F663A20746F6B656E20646F65736E277420657869737400000000"
    },
    "871": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "873": {
      "op": "DUP3"
    },
    "874": {
      "op": "ADD"
    },
    "875": {
      "op": "MSTORE"
    },
    "876": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "878": {
      "op": "ADD"
    },
    "879": {
      "fn": "ERC4973.ownerOf",
      "offset": [
        5422,
        5482
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2F9"
    },
    "882": {
      "op": "JUMP"
    },
    "883": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5105,
        5302
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "884": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5177,
        5184
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "886": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "888": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "890": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "892": {
      "op": "SHL"
    },
    "893": {
      "op": "SUB"
    },
    "894": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5200,
        5219
      ],
      "op": "DUP3",
      "path": "2",
      "statement": 7
    },
    "895": {
      "branch": 28,
      "fn": "ERC4973.balanceOf",
      "offset": [
        5200,
        5219
      ],
      "op": "AND",
      "path": "2"
    },
    "896": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5192,
        5268
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3E0"
    },
    "899": {
      "branch": 28,
      "fn": "ERC4973.balanceOf",
      "offset": [
        5192,
        5268
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "900": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5192,
        5268
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "902": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5192,
        5268
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "903": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "907": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "909": {
      "op": "SHL"
    },
    "910": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5192,
        5268
      ],
      "op": "DUP2",
      "path": "2"
    },
    "911": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5192,
        5268
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "912": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "914": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5192,
        5268
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "916": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5192,
        5268
      ],
      "op": "DUP3",
      "path": "2"
    },
    "917": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5192,
        5268
      ],
      "op": "ADD",
      "path": "2"
    },
    "918": {
      "op": "MSTORE"
    },
    "919": {
      "op": "PUSH1",
      "value": "0x2C"
    },
    "921": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "923": {
      "op": "DUP3"
    },
    "924": {
      "op": "ADD"
    },
    "925": {
      "op": "MSTORE"
    },
    "926": {
      "op": "PUSH32",
      "value": "0x62616C616E63654F663A2061646472657373207A65726F206973206E6F742061"
    },
    "959": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "961": {
      "op": "DUP3"
    },
    "962": {
      "op": "ADD"
    },
    "963": {
      "op": "MSTORE"
    },
    "964": {
      "op": "PUSH12",
      "value": "0x103B30B634B21037BBB732B9"
    },
    "977": {
      "op": "PUSH1",
      "value": "0xA1"
    },
    "979": {
      "op": "SHL"
    },
    "980": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "982": {
      "op": "DUP3"
    },
    "983": {
      "op": "ADD"
    },
    "984": {
      "op": "MSTORE"
    },
    "985": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "987": {
      "op": "ADD"
    },
    "988": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5192,
        5268
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2F9"
    },
    "991": {
      "op": "JUMP"
    },
    "992": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5192,
        5268
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "993": {
      "op": "POP"
    },
    "994": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "996": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "998": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1000": {
      "op": "SHL"
    },
    "1001": {
      "op": "SUB"
    },
    "1002": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5281,
        5297
      ],
      "op": "AND",
      "path": "2",
      "statement": 8
    },
    "1003": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5281,
        5297
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1005": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5281,
        5297
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1006": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5281,
        5297
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1007": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5281,
        5297
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1008": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5281,
        5290
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1010": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5281,
        5297
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1012": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5281,
        5297
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1013": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5281,
        5297
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1015": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5281,
        5297
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1016": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5281,
        5297
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1017": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5281,
        5297
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1018": {
      "fn": "ERC4973.balanceOf",
      "offset": [
        5281,
        5297
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1019": {
      "fn": "ERC4973.balanceOf",
      "jump": "o",
      "offset": [
        5105,
        5302
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1020": {
      "fn": "ERC4973.symbol",
      "offset": [
        4653,
        4749
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1021": {
      "fn": "ERC4973.symbol",
      "offset": [
        4709,
        4722
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "1023": {
      "fn": "ERC4973.symbol",
      "offset": [
        4737,
        4744
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 9,
      "value": "0x1"
    },
    "1025": {
      "fn": "ERC4973.symbol",
      "offset": [
        4730,
        4744
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1026": {
      "fn": "ERC4973.symbol",
      "offset": [
        4730,
        4744
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1027": {
      "fn": "ERC4973.symbol",
      "offset": [
        4730,
        4744
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x211"
    },
    "1030": {
      "fn": "ERC4973.symbol",
      "offset": [
        4730,
        4744
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1031": {
      "fn": "ERC4973.symbol",
      "offset": [
        4730,
        4744
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x884"
    },
    "1034": {
      "fn": "ERC4973.symbol",
      "jump": "i",
      "offset": [
        4730,
        4744
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1035": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4753,
        4942
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1036": {
      "fn": "ERC4973._exists",
      "offset": [
        5574,
        5578
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1038": {
      "fn": "ERC4973._exists",
      "offset": [
        5593,
        5609
      ],
      "op": "DUP2",
      "path": "2",
      "statement": 10
    },
    "1039": {
      "fn": "ERC4973._exists",
      "offset": [
        5593,
        5609
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1040": {
      "fn": "ERC4973._exists",
      "offset": [
        5593,
        5609
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1041": {
      "fn": "ERC4973._exists",
      "offset": [
        5593,
        5600
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "1043": {
      "fn": "ERC4973._exists",
      "offset": [
        5593,
        5609
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1045": {
      "fn": "ERC4973._exists",
      "offset": [
        5593,
        5609
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1046": {
      "fn": "ERC4973._exists",
      "offset": [
        5593,
        5609
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1048": {
      "fn": "ERC4973._exists",
      "offset": [
        5593,
        5609
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1049": {
      "fn": "ERC4973._exists",
      "offset": [
        5593,
        5609
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1050": {
      "fn": "ERC4973._exists",
      "offset": [
        5593,
        5609
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1051": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4826,
        4839
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "1053": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4826,
        4839
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1054": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1056": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1058": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1060": {
      "op": "SHL"
    },
    "1061": {
      "op": "SUB"
    },
    "1062": {
      "fn": "ERC4973._exists",
      "offset": [
        5593,
        5609
      ],
      "op": "AND",
      "path": "2"
    },
    "1063": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4847,
        4905
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 11,
      "value": "0x472"
    },
    "1066": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4847,
        4905
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1067": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4847,
        4905
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1069": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4847,
        4905
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1070": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1074": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1076": {
      "op": "SHL"
    },
    "1077": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4847,
        4905
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1078": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4847,
        4905
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1079": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1081": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4847,
        4905
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1083": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4847,
        4905
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1084": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4847,
        4905
      ],
      "op": "ADD",
      "path": "2"
    },
    "1085": {
      "op": "MSTORE"
    },
    "1086": {
      "op": "PUSH1",
      "value": "0x1D"
    },
    "1088": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1090": {
      "op": "DUP3"
    },
    "1091": {
      "op": "ADD"
    },
    "1092": {
      "op": "MSTORE"
    },
    "1093": {
      "op": "PUSH32",
      "value": "0x746F6B656E5552493A20746F6B656E20646F65736E2774206578697374000000"
    },
    "1126": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1128": {
      "op": "DUP3"
    },
    "1129": {
      "op": "ADD"
    },
    "1130": {
      "op": "MSTORE"
    },
    "1131": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1133": {
      "op": "ADD"
    },
    "1134": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4847,
        4905
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2F9"
    },
    "1137": {
      "op": "JUMP"
    },
    "1138": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4847,
        4905
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1139": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4918,
        4937
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 12,
      "value": "0x0"
    },
    "1141": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4918,
        4937
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1142": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4918,
        4937
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1143": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4918,
        4937
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1144": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4918,
        4928
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "1146": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4918,
        4937
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1148": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4918,
        4937
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1149": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4918,
        4937
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1151": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4918,
        4937
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1152": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4918,
        4937
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1153": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1154": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1155": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x48B"
    },
    "1158": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1159": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x884"
    },
    "1162": {
      "fn": "ERC4973.tokenURI",
      "jump": "i",
      "offset": [
        4911,
        4937
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1163": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1164": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1165": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "1167": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "ADD",
      "path": "2"
    },
    "1168": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1170": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1171": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1172": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "DIV",
      "path": "2"
    },
    "1173": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "MUL",
      "path": "2"
    },
    "1174": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1176": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "ADD",
      "path": "2"
    },
    "1177": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1179": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1180": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1181": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1182": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "ADD",
      "path": "2"
    },
    "1183": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1185": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1186": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1187": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1188": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1189": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1190": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1191": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1192": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1193": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1195": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "ADD",
      "path": "2"
    },
    "1196": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1197": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1198": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1199": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x4B7"
    },
    "1202": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1203": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x884"
    },
    "1206": {
      "fn": "ERC4973.tokenURI",
      "jump": "i",
      "offset": [
        4911,
        4937
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1207": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1208": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1209": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1210": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x504"
    },
    "1213": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1214": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1215": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "1217": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "LT",
      "path": "2"
    },
    "1218": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x4D9"
    },
    "1221": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1222": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x100"
    },
    "1225": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1226": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1227": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1228": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "DIV",
      "path": "2"
    },
    "1229": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "MUL",
      "path": "2"
    },
    "1230": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1231": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1232": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1233": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1235": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "ADD",
      "path": "2"
    },
    "1236": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1237": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x504"
    },
    "1240": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1241": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1242": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1243": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "ADD",
      "path": "2"
    },
    "1244": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1245": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1246": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1248": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1249": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1251": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1253": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1254": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1255": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1256": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1257": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1258": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1259": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1260": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1261": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1263": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "ADD",
      "path": "2"
    },
    "1264": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1265": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1267": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "ADD",
      "path": "2"
    },
    "1268": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1269": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1270": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "GT",
      "path": "2"
    },
    "1271": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x4E7"
    },
    "1274": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1275": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1276": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1277": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "SUB",
      "path": "2"
    },
    "1278": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "1280": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "AND",
      "path": "2"
    },
    "1281": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1282": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "ADD",
      "path": "2"
    },
    "1283": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1284": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1285": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "POP",
      "path": "2"
    },
    "1286": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "POP",
      "path": "2"
    },
    "1287": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "POP",
      "path": "2"
    },
    "1288": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "POP",
      "path": "2"
    },
    "1289": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "POP",
      "path": "2"
    },
    "1290": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1291": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4911,
        4937
      ],
      "op": "POP",
      "path": "2"
    },
    "1292": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4753,
        4942
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1293": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4753,
        4942
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1294": {
      "fn": "ERC4973.tokenURI",
      "offset": [
        4753,
        4942
      ],
      "op": "POP",
      "path": "2"
    },
    "1295": {
      "fn": "ERC4973.tokenURI",
      "jump": "o",
      "offset": [
        4753,
        4942
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1296": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7349,
        7596
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "1297": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7392,
        7414
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x60"
    },
    "1299": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7490,
        7497
      ],
      "op": "PUSH1",
      "path": "6",
      "statement": 13,
      "value": "0x5"
    },
    "1301": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7484,
        7505
      ],
      "op": "DUP1",
      "path": "6"
    },
    "1302": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7484,
        7505
      ],
      "op": "SLOAD",
      "path": "6"
    },
    "1303": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7484,
        7505
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x51F"
    },
    "1306": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7484,
        7505
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "1307": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7484,
        7505
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x884"
    },
    "1310": {
      "fn": "Soulbound._getBaseURI",
      "jump": "i",
      "offset": [
        7484,
        7505
      ],
      "op": "JUMP",
      "path": "6"
    },
    "1311": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7484,
        7505
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "1312": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7484,
        7510
      ],
      "op": "ISZERO",
      "path": "6"
    },
    "1313": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7484,
        7510
      ],
      "op": "ISZERO",
      "path": "6"
    },
    "1314": {
      "branch": 23,
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7484,
        7510
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "1315": {
      "op": "POP"
    },
    "1316": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7476,
        7528
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x55F"
    },
    "1319": {
      "branch": 23,
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7476,
        7528
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "1320": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7476,
        7528
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "1322": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7476,
        7528
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "1323": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1327": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1329": {
      "op": "SHL"
    },
    "1330": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7476,
        7528
      ],
      "op": "DUP2",
      "path": "6"
    },
    "1331": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7476,
        7528
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "1332": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1334": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7476,
        7528
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x4"
    },
    "1336": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7476,
        7528
      ],
      "op": "DUP3",
      "path": "6"
    },
    "1337": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7476,
        7528
      ],
      "op": "ADD",
      "path": "6"
    },
    "1338": {
      "op": "MSTORE"
    },
    "1339": {
      "op": "PUSH1",
      "value": "0xD"
    },
    "1341": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1343": {
      "op": "DUP3"
    },
    "1344": {
      "op": "ADD"
    },
    "1345": {
      "op": "MSTORE"
    },
    "1346": {
      "op": "PUSH13",
      "value": "0x456D7074792062617365555249"
    },
    "1360": {
      "op": "PUSH1",
      "value": "0x98"
    },
    "1362": {
      "op": "SHL"
    },
    "1363": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1365": {
      "op": "DUP3"
    },
    "1366": {
      "op": "ADD"
    },
    "1367": {
      "op": "MSTORE"
    },
    "1368": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1370": {
      "op": "ADD"
    },
    "1371": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7476,
        7528
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x2F9"
    },
    "1374": {
      "op": "JUMP"
    },
    "1375": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7476,
        7528
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "1376": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7582,
        7589
      ],
      "op": "PUSH1",
      "path": "6",
      "statement": 14,
      "value": "0x5"
    },
    "1378": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7571,
        7589
      ],
      "op": "DUP1",
      "path": "6"
    },
    "1379": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7571,
        7589
      ],
      "op": "SLOAD",
      "path": "6"
    },
    "1380": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7571,
        7589
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x211"
    },
    "1383": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7571,
        7589
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "1384": {
      "fn": "Soulbound._getBaseURI",
      "offset": [
        7571,
        7589
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x884"
    },
    "1387": {
      "fn": "Soulbound._getBaseURI",
      "jump": "i",
      "offset": [
        7571,
        7589
      ],
      "op": "JUMP",
      "path": "6"
    },
    "1388": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4288,
        4779
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "1389": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4357,
        4364
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x0"
    },
    "1391": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1393": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1395": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1397": {
      "op": "SHL"
    },
    "1398": {
      "op": "SUB"
    },
    "1399": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4436,
        4453
      ],
      "op": "DUP4",
      "path": "6",
      "statement": 15
    },
    "1400": {
      "branch": 24,
      "fn": "Soulbound.issuerOf",
      "offset": [
        4436,
        4453
      ],
      "op": "AND",
      "path": "6"
    },
    "1401": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4428,
        4481
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x5C4"
    },
    "1404": {
      "branch": 24,
      "fn": "Soulbound.issuerOf",
      "offset": [
        4428,
        4481
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "1405": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4428,
        4481
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "1407": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4428,
        4481
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "1408": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1412": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1414": {
      "op": "SHL"
    },
    "1415": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4428,
        4481
      ],
      "op": "DUP2",
      "path": "6"
    },
    "1416": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4428,
        4481
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "1417": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1419": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4428,
        4481
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x4"
    },
    "1421": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4428,
        4481
      ],
      "op": "DUP3",
      "path": "6"
    },
    "1422": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4428,
        4481
      ],
      "op": "ADD",
      "path": "6"
    },
    "1423": {
      "op": "MSTORE"
    },
    "1424": {
      "op": "PUSH1",
      "value": "0x17"
    },
    "1426": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1428": {
      "op": "DUP3"
    },
    "1429": {
      "op": "ADD"
    },
    "1430": {
      "op": "MSTORE"
    },
    "1431": {
      "op": "PUSH32",
      "value": "0x517565727920666F72207A65726F20616464726573732E000000000000000000"
    },
    "1464": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1466": {
      "op": "DUP3"
    },
    "1467": {
      "op": "ADD"
    },
    "1468": {
      "op": "MSTORE"
    },
    "1469": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1471": {
      "op": "ADD"
    },
    "1472": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4428,
        4481
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x2F9"
    },
    "1475": {
      "op": "JUMP"
    },
    "1476": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4428,
        4481
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "1477": {
      "fn": "ERC4973._exists",
      "offset": [
        5574,
        5578
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1479": {
      "fn": "ERC4973._exists",
      "offset": [
        5593,
        5609
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1480": {
      "fn": "ERC4973._exists",
      "offset": [
        5593,
        5609
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1481": {
      "fn": "ERC4973._exists",
      "offset": [
        5593,
        5609
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1482": {
      "fn": "ERC4973._exists",
      "offset": [
        5593,
        5600
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "1484": {
      "fn": "ERC4973._exists",
      "offset": [
        5593,
        5609
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1486": {
      "fn": "ERC4973._exists",
      "offset": [
        5593,
        5609
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1487": {
      "fn": "ERC4973._exists",
      "offset": [
        5593,
        5609
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1489": {
      "fn": "ERC4973._exists",
      "offset": [
        5593,
        5609
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1490": {
      "fn": "ERC4973._exists",
      "offset": [
        5593,
        5609
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1491": {
      "fn": "ERC4973._exists",
      "offset": [
        5593,
        5609
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1492": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1494": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1496": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1498": {
      "op": "SHL"
    },
    "1499": {
      "op": "SUB"
    },
    "1500": {
      "fn": "ERC4973._exists",
      "offset": [
        5593,
        5609
      ],
      "op": "AND",
      "path": "2"
    },
    "1501": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4530,
        4579
      ],
      "op": "PUSH2",
      "path": "6",
      "statement": 16,
      "value": "0x61E"
    },
    "1504": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4530,
        4579
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "1505": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4530,
        4579
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "1507": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4530,
        4579
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "1508": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1512": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1514": {
      "op": "SHL"
    },
    "1515": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4530,
        4579
      ],
      "op": "DUP2",
      "path": "6"
    },
    "1516": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4530,
        4579
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "1517": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1519": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4530,
        4579
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x4"
    },
    "1521": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4530,
        4579
      ],
      "op": "DUP3",
      "path": "6"
    },
    "1522": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4530,
        4579
      ],
      "op": "ADD",
      "path": "6"
    },
    "1523": {
      "op": "MSTORE"
    },
    "1524": {
      "op": "PUSH1",
      "value": "0x13"
    },
    "1526": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1528": {
      "op": "DUP3"
    },
    "1529": {
      "op": "ADD"
    },
    "1530": {
      "op": "MSTORE"
    },
    "1531": {
      "op": "PUSH19",
      "value": "0x2737B716B2BC34B9BA32B73A103A37B5B2B717"
    },
    "1551": {
      "op": "PUSH1",
      "value": "0x69"
    },
    "1553": {
      "op": "SHL"
    },
    "1554": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1556": {
      "op": "DUP3"
    },
    "1557": {
      "op": "ADD"
    },
    "1558": {
      "op": "MSTORE"
    },
    "1559": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1561": {
      "op": "ADD"
    },
    "1562": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4530,
        4579
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x2F9"
    },
    "1565": {
      "op": "JUMP"
    },
    "1566": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4530,
        4579
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "1567": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4669,
        4672
      ],
      "op": "DUP3",
      "path": "6",
      "statement": 17
    },
    "1568": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1570": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1572": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1574": {
      "op": "SHL"
    },
    "1575": {
      "op": "SUB"
    },
    "1576": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4648,
        4672
      ],
      "op": "AND",
      "path": "6"
    },
    "1577": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4648,
        4665
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x631"
    },
    "1580": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4656,
        4664
      ],
      "op": "DUP4",
      "path": "6"
    },
    "1581": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4648,
        4655
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x30E"
    },
    "1584": {
      "fn": "Soulbound.issuerOf",
      "jump": "i",
      "offset": [
        4648,
        4665
      ],
      "op": "JUMP",
      "path": "6"
    },
    "1585": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4648,
        4665
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "1586": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1588": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1590": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1592": {
      "op": "SHL"
    },
    "1593": {
      "op": "SUB"
    },
    "1594": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4648,
        4672
      ],
      "op": "AND",
      "path": "6"
    },
    "1595": {
      "branch": 25,
      "fn": "Soulbound.issuerOf",
      "offset": [
        4648,
        4672
      ],
      "op": "EQ",
      "path": "6"
    },
    "1596": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4640,
        4703
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x687"
    },
    "1599": {
      "branch": 25,
      "fn": "Soulbound.issuerOf",
      "offset": [
        4640,
        4703
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "1600": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4640,
        4703
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "1602": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4640,
        4703
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "1603": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1607": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1609": {
      "op": "SHL"
    },
    "1610": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4640,
        4703
      ],
      "op": "DUP2",
      "path": "6"
    },
    "1611": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4640,
        4703
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "1612": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1614": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4640,
        4703
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x4"
    },
    "1616": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4640,
        4703
      ],
      "op": "DUP3",
      "path": "6"
    },
    "1617": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4640,
        4703
      ],
      "op": "ADD",
      "path": "6"
    },
    "1618": {
      "op": "MSTORE"
    },
    "1619": {
      "op": "PUSH1",
      "value": "0x1A"
    },
    "1621": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1623": {
      "op": "DUP3"
    },
    "1624": {
      "op": "ADD"
    },
    "1625": {
      "op": "MSTORE"
    },
    "1626": {
      "op": "PUSH32",
      "value": "0x546F6B656E206E6F74206F776E65642062792061646472657373000000000000"
    },
    "1659": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1661": {
      "op": "DUP3"
    },
    "1662": {
      "op": "ADD"
    },
    "1663": {
      "op": "MSTORE"
    },
    "1664": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1666": {
      "op": "ADD"
    },
    "1667": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4640,
        4703
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x2F9"
    },
    "1670": {
      "op": "JUMP"
    },
    "1671": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4640,
        4703
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "1672": {
      "op": "POP"
    },
    "1673": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4767,
        4771
      ],
      "op": "ADDRESS",
      "path": "6",
      "statement": 18
    },
    "1674": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4288,
        4779
      ],
      "op": "SWAP3",
      "path": "6"
    },
    "1675": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4288,
        4779
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "1676": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4288,
        4779
      ],
      "op": "POP",
      "path": "6"
    },
    "1677": {
      "fn": "Soulbound.issuerOf",
      "offset": [
        4288,
        4779
      ],
      "op": "POP",
      "path": "6"
    },
    "1678": {
      "fn": "Soulbound.issuerOf",
      "jump": "o",
      "offset": [
        4288,
        4779
      ],
      "op": "JUMP",
      "path": "6"
    },
    "1679": {
      "fn": "ERC4973._burn",
      "offset": [
        5943,
        6158
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1680": {
      "fn": "ERC4973._burn",
      "offset": [
        5998,
        6011
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1682": {
      "fn": "ERC4973._burn",
      "offset": [
        6014,
        6030
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x69A"
    },
    "1685": {
      "fn": "ERC4973._burn",
      "offset": [
        6022,
        6029
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1686": {
      "fn": "ERC4973._burn",
      "offset": [
        6014,
        6021
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x30E"
    },
    "1689": {
      "fn": "ERC4973._burn",
      "jump": "i",
      "offset": [
        6014,
        6030
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1690": {
      "fn": "ERC4973._burn",
      "offset": [
        6014,
        6030
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1691": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1693": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1695": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1697": {
      "op": "SHL"
    },
    "1698": {
      "op": "SUB"
    },
    "1699": {
      "fn": "ERC4973._burn",
      "offset": [
        6037,
        6053
      ],
      "op": "DUP2",
      "path": "2",
      "statement": 19
    },
    "1700": {
      "fn": "ERC4973._burn",
      "offset": [
        6037,
        6053
      ],
      "op": "AND",
      "path": "2"
    },
    "1701": {
      "fn": "ERC4973._burn",
      "offset": [
        6037,
        6053
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1703": {
      "fn": "ERC4973._burn",
      "offset": [
        6037,
        6053
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1704": {
      "fn": "ERC4973._burn",
      "offset": [
        6037,
        6053
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1705": {
      "fn": "ERC4973._burn",
      "offset": [
        6037,
        6053
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1706": {
      "fn": "ERC4973._burn",
      "offset": [
        6037,
        6046
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1708": {
      "fn": "ERC4973._burn",
      "offset": [
        6037,
        6053
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1710": {
      "fn": "ERC4973._burn",
      "offset": [
        6037,
        6053
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1711": {
      "fn": "ERC4973._burn",
      "offset": [
        6037,
        6053
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1713": {
      "fn": "ERC4973._burn",
      "offset": [
        6037,
        6053
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1714": {
      "fn": "ERC4973._burn",
      "offset": [
        6037,
        6053
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1715": {
      "fn": "ERC4973._burn",
      "offset": [
        6037,
        6058
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1716": {
      "fn": "ERC4973._burn",
      "offset": [
        6037,
        6058
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1717": {
      "fn": "ERC4973._burn",
      "offset": [
        5998,
        6030
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1718": {
      "fn": "ERC4973._burn",
      "offset": [
        5998,
        6030
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "1719": {
      "op": "POP"
    },
    "1720": {
      "fn": "ERC4973._burn",
      "offset": [
        6057,
        6058
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1722": {
      "fn": "ERC4973._burn",
      "offset": [
        6057,
        6058
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1723": {
      "fn": "ERC4973._burn",
      "offset": [
        6037,
        6053
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1724": {
      "fn": "ERC4973._burn",
      "offset": [
        6037,
        6053
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1725": {
      "fn": "ERC4973._burn",
      "offset": [
        6037,
        6053
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1726": {
      "fn": "ERC4973._burn",
      "offset": [
        6037,
        6058
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x6C8"
    },
    "1729": {
      "fn": "ERC4973._burn",
      "offset": [
        6037,
        6058
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1730": {
      "fn": "ERC4973._burn",
      "offset": [
        6057,
        6058
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1731": {
      "fn": "ERC4973._burn",
      "offset": [
        6057,
        6058
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1732": {
      "fn": "ERC4973._burn",
      "offset": [
        6037,
        6058
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8BF"
    },
    "1735": {
      "fn": "ERC4973._burn",
      "jump": "i",
      "offset": [
        6037,
        6058
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1736": {
      "fn": "ERC4973._burn",
      "offset": [
        6037,
        6058
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1737": {
      "fn": "ERC4973._burn",
      "offset": [
        6037,
        6058
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1738": {
      "fn": "ERC4973._burn",
      "offset": [
        6037,
        6058
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1739": {
      "fn": "ERC4973._burn",
      "offset": [
        6037,
        6058
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1740": {
      "op": "POP"
    },
    "1741": {
      "op": "POP"
    },
    "1742": {
      "fn": "ERC4973._burn",
      "offset": [
        6071,
        6087
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 20,
      "value": "0x0"
    },
    "1744": {
      "fn": "ERC4973._burn",
      "offset": [
        6071,
        6087
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1745": {
      "fn": "ERC4973._burn",
      "offset": [
        6071,
        6087
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1746": {
      "fn": "ERC4973._burn",
      "offset": [
        6071,
        6087
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1747": {
      "fn": "ERC4973._burn",
      "offset": [
        6071,
        6078
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "1749": {
      "fn": "ERC4973._burn",
      "offset": [
        6071,
        6087
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1751": {
      "fn": "ERC4973._burn",
      "offset": [
        6071,
        6087
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1752": {
      "fn": "ERC4973._burn",
      "offset": [
        6071,
        6087
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1753": {
      "fn": "ERC4973._burn",
      "offset": [
        6071,
        6087
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1754": {
      "fn": "ERC4973._burn",
      "offset": [
        6071,
        6087
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1756": {
      "fn": "ERC4973._burn",
      "offset": [
        6071,
        6087
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1757": {
      "fn": "ERC4973._burn",
      "offset": [
        6071,
        6087
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1758": {
      "fn": "ERC4973._burn",
      "offset": [
        6071,
        6087
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1759": {
      "fn": "ERC4973._burn",
      "offset": [
        6064,
        6087
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1760": {
      "fn": "ERC4973._burn",
      "offset": [
        6064,
        6087
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1761": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1763": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1765": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1767": {
      "op": "SHL"
    },
    "1768": {
      "op": "SUB"
    },
    "1769": {
      "op": "NOT"
    },
    "1770": {
      "fn": "ERC4973._burn",
      "offset": [
        6064,
        6087
      ],
      "op": "AND",
      "path": "2"
    },
    "1771": {
      "fn": "ERC4973._burn",
      "offset": [
        6064,
        6087
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1772": {
      "fn": "ERC4973._burn",
      "offset": [
        6064,
        6087
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1773": {
      "fn": "ERC4973._burn",
      "offset": [
        6100,
        6110
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 21,
      "value": "0x3"
    },
    "1775": {
      "fn": "ERC4973._burn",
      "offset": [
        6100,
        6119
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1776": {
      "fn": "ERC4973._burn",
      "offset": [
        6100,
        6119
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1777": {
      "fn": "ERC4973._burn",
      "offset": [
        6100,
        6119
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1778": {
      "fn": "ERC4973._burn",
      "offset": [
        6100,
        6119
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1779": {
      "fn": "ERC4973._burn",
      "offset": [
        6100,
        6119
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1780": {
      "fn": "ERC4973._burn",
      "offset": [
        6093,
        6119
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x6FC"
    },
    "1783": {
      "fn": "ERC4973._burn",
      "offset": [
        6093,
        6119
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1784": {
      "fn": "ERC4973._burn",
      "offset": [
        6093,
        6119
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x736"
    },
    "1787": {
      "fn": "ERC4973._burn",
      "jump": "i",
      "offset": [
        6093,
        6119
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1788": {
      "fn": "ERC4973._burn",
      "offset": [
        6093,
        6119
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1789": {
      "fn": "ERC4973._burn",
      "offset": [
        6131,
        6153
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 22,
      "value": "0x40"
    },
    "1791": {
      "fn": "ERC4973._burn",
      "offset": [
        6131,
        6153
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1792": {
      "fn": "ERC4973._burn",
      "offset": [
        6145,
        6152
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1793": {
      "fn": "ERC4973._burn",
      "offset": [
        6145,
        6152
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1794": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1796": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1798": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1800": {
      "op": "SHL"
    },
    "1801": {
      "op": "SUB"
    },
    "1802": {
      "fn": "ERC4973._burn",
      "offset": [
        6131,
        6153
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1803": {
      "fn": "ERC4973._burn",
      "offset": [
        6131,
        6153
      ],
      "op": "AND",
      "path": "2"
    },
    "1804": {
      "fn": "ERC4973._burn",
      "offset": [
        6131,
        6153
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1805": {
      "fn": "ERC4973._burn",
      "offset": [
        6131,
        6153
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0xEC9AB91322523C899EDE7830EC9BFC992B5981CDCC27B91162FB23DE5791117B"
    },
    "1838": {
      "fn": "ERC4973._burn",
      "offset": [
        6131,
        6153
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1839": {
      "fn": "ERC4973._burn",
      "offset": [
        6131,
        6153
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1841": {
      "fn": "ERC4973._burn",
      "offset": [
        6131,
        6153
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1842": {
      "fn": "ERC4973._burn",
      "offset": [
        6131,
        6153
      ],
      "op": "LOG3",
      "path": "2"
    },
    "1843": {
      "fn": "ERC4973._burn",
      "offset": [
        5992,
        6158
      ],
      "op": "POP",
      "path": "2"
    },
    "1844": {
      "fn": "ERC4973._burn",
      "offset": [
        5943,
        6158
      ],
      "op": "POP",
      "path": "2"
    },
    "1845": {
      "fn": "ERC4973._burn",
      "jump": "o",
      "offset": [
        5943,
        6158
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1846": {
      "op": "JUMPDEST"
    },
    "1847": {
      "op": "POP"
    },
    "1848": {
      "op": "DUP1"
    },
    "1849": {
      "op": "SLOAD"
    },
    "1850": {
      "op": "PUSH2",
      "value": "0x742"
    },
    "1853": {
      "op": "SWAP1"
    },
    "1854": {
      "op": "PUSH2",
      "value": "0x884"
    },
    "1857": {
      "jump": "i",
      "op": "JUMP"
    },
    "1858": {
      "op": "JUMPDEST"
    },
    "1859": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1861": {
      "op": "DUP3"
    },
    "1862": {
      "op": "SSTORE"
    },
    "1863": {
      "op": "DUP1"
    },
    "1864": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1866": {
      "op": "LT"
    },
    "1867": {
      "op": "PUSH2",
      "value": "0x752"
    },
    "1870": {
      "op": "JUMPI"
    },
    "1871": {
      "op": "POP"
    },
    "1872": {
      "op": "POP"
    },
    "1873": {
      "jump": "o",
      "op": "JUMP"
    },
    "1874": {
      "op": "JUMPDEST"
    },
    "1875": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1877": {
      "op": "ADD"
    },
    "1878": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1880": {
      "op": "SWAP1"
    },
    "1881": {
      "op": "DIV"
    },
    "1882": {
      "op": "SWAP1"
    },
    "1883": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1885": {
      "op": "MSTORE"
    },
    "1886": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1888": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1890": {
      "op": "KECCAK256"
    },
    "1891": {
      "op": "SWAP1"
    },
    "1892": {
      "op": "DUP2"
    },
    "1893": {
      "op": "ADD"
    },
    "1894": {
      "op": "SWAP1"
    },
    "1895": {
      "op": "PUSH2",
      "value": "0x30B"
    },
    "1898": {
      "op": "SWAP2"
    },
    "1899": {
      "op": "SWAP1"
    },
    "1900": {
      "op": "JUMPDEST"
    },
    "1901": {
      "op": "DUP1"
    },
    "1902": {
      "op": "DUP3"
    },
    "1903": {
      "op": "GT"
    },
    "1904": {
      "op": "ISZERO"
    },
    "1905": {
      "op": "PUSH2",
      "value": "0x780"
    },
    "1908": {
      "op": "JUMPI"
    },
    "1909": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1911": {
      "op": "DUP2"
    },
    "1912": {
      "op": "SSTORE"
    },
    "1913": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1915": {
      "op": "ADD"
    },
    "1916": {
      "op": "PUSH2",
      "value": "0x76C"
    },
    "1919": {
      "op": "JUMP"
    },
    "1920": {
      "op": "JUMPDEST"
    },
    "1921": {
      "op": "POP"
    },
    "1922": {
      "op": "SWAP1"
    },
    "1923": {
      "jump": "o",
      "op": "JUMP"
    },
    "1924": {
      "op": "JUMPDEST"
    },
    "1925": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1927": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1929": {
      "op": "DUP3"
    },
    "1930": {
      "op": "DUP5"
    },
    "1931": {
      "op": "SUB"
    },
    "1932": {
      "op": "SLT"
    },
    "1933": {
      "op": "ISZERO"
    },
    "1934": {
      "op": "PUSH2",
      "value": "0x796"
    },
    "1937": {
      "op": "JUMPI"
    },
    "1938": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1940": {
      "op": "DUP1"
    },
    "1941": {
      "op": "REVERT"
    },
    "1942": {
      "op": "JUMPDEST"
    },
    "1943": {
      "op": "DUP2"
    },
    "1944": {
      "op": "CALLDATALOAD"
    },
    "1945": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1947": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1949": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1951": {
      "op": "SHL"
    },
    "1952": {
      "op": "SUB"
    },
    "1953": {
      "op": "NOT"
    },
    "1954": {
      "op": "DUP2"
    },
    "1955": {
      "op": "AND"
    },
    "1956": {
      "op": "DUP2"
    },
    "1957": {
      "op": "EQ"
    },
    "1958": {
      "op": "PUSH2",
      "value": "0x7AE"
    },
    "1961": {
      "op": "JUMPI"
    },
    "1962": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1964": {
      "op": "DUP1"
    },
    "1965": {
      "op": "REVERT"
    },
    "1966": {
      "op": "JUMPDEST"
    },
    "1967": {
      "op": "SWAP4"
    },
    "1968": {
      "op": "SWAP3"
    },
    "1969": {
      "op": "POP"
    },
    "1970": {
      "op": "POP"
    },
    "1971": {
      "op": "POP"
    },
    "1972": {
      "jump": "o",
      "op": "JUMP"
    },
    "1973": {
      "op": "JUMPDEST"
    },
    "1974": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1976": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1978": {
      "op": "DUP1"
    },
    "1979": {
      "op": "DUP4"
    },
    "1980": {
      "op": "MSTORE"
    },
    "1981": {
      "op": "DUP4"
    },
    "1982": {
      "op": "MLOAD"
    },
    "1983": {
      "op": "DUP1"
    },
    "1984": {
      "op": "DUP3"
    },
    "1985": {
      "op": "DUP6"
    },
    "1986": {
      "op": "ADD"
    },
    "1987": {
      "op": "MSTORE"
    },
    "1988": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1990": {
      "op": "JUMPDEST"
    },
    "1991": {
      "op": "DUP2"
    },
    "1992": {
      "op": "DUP2"
    },
    "1993": {
      "op": "LT"
    },
    "1994": {
      "op": "ISZERO"
    },
    "1995": {
      "op": "PUSH2",
      "value": "0x7E2"
    },
    "1998": {
      "op": "JUMPI"
    },
    "1999": {
      "op": "DUP6"
    },
    "2000": {
      "op": "DUP2"
    },
    "2001": {
      "op": "ADD"
    },
    "2002": {
      "op": "DUP4"
    },
    "2003": {
      "op": "ADD"
    },
    "2004": {
      "op": "MLOAD"
    },
    "2005": {
      "op": "DUP6"
    },
    "2006": {
      "op": "DUP3"
    },
    "2007": {
      "op": "ADD"
    },
    "2008": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2010": {
      "op": "ADD"
    },
    "2011": {
      "op": "MSTORE"
    },
    "2012": {
      "op": "DUP3"
    },
    "2013": {
      "op": "ADD"
    },
    "2014": {
      "op": "PUSH2",
      "value": "0x7C6"
    },
    "2017": {
      "op": "JUMP"
    },
    "2018": {
      "op": "JUMPDEST"
    },
    "2019": {
      "op": "DUP2"
    },
    "2020": {
      "op": "DUP2"
    },
    "2021": {
      "op": "GT"
    },
    "2022": {
      "op": "ISZERO"
    },
    "2023": {
      "op": "PUSH2",
      "value": "0x7F4"
    },
    "2026": {
      "op": "JUMPI"
    },
    "2027": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2029": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2031": {
      "op": "DUP4"
    },
    "2032": {
      "op": "DUP8"
    },
    "2033": {
      "op": "ADD"
    },
    "2034": {
      "op": "ADD"
    },
    "2035": {
      "op": "MSTORE"
    },
    "2036": {
      "op": "JUMPDEST"
    },
    "2037": {
      "op": "POP"
    },
    "2038": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2040": {
      "op": "ADD"
    },
    "2041": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2043": {
      "op": "NOT"
    },
    "2044": {
      "op": "AND"
    },
    "2045": {
      "op": "SWAP3"
    },
    "2046": {
      "op": "SWAP1"
    },
    "2047": {
      "op": "SWAP3"
    },
    "2048": {
      "op": "ADD"
    },
    "2049": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2051": {
      "op": "ADD"
    },
    "2052": {
      "op": "SWAP4"
    },
    "2053": {
      "op": "SWAP3"
    },
    "2054": {
      "op": "POP"
    },
    "2055": {
      "op": "POP"
    },
    "2056": {
      "op": "POP"
    },
    "2057": {
      "jump": "o",
      "op": "JUMP"
    },
    "2058": {
      "op": "JUMPDEST"
    },
    "2059": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2061": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2063": {
      "op": "DUP3"
    },
    "2064": {
      "op": "DUP5"
    },
    "2065": {
      "op": "SUB"
    },
    "2066": {
      "op": "SLT"
    },
    "2067": {
      "op": "ISZERO"
    },
    "2068": {
      "op": "PUSH2",
      "value": "0x81C"
    },
    "2071": {
      "op": "JUMPI"
    },
    "2072": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2074": {
      "op": "DUP1"
    },
    "2075": {
      "op": "REVERT"
    },
    "2076": {
      "op": "JUMPDEST"
    },
    "2077": {
      "op": "POP"
    },
    "2078": {
      "op": "CALLDATALOAD"
    },
    "2079": {
      "op": "SWAP2"
    },
    "2080": {
      "op": "SWAP1"
    },
    "2081": {
      "op": "POP"
    },
    "2082": {
      "jump": "o",
      "op": "JUMP"
    },
    "2083": {
      "op": "JUMPDEST"
    },
    "2084": {
      "op": "DUP1"
    },
    "2085": {
      "op": "CALLDATALOAD"
    },
    "2086": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2088": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2090": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2092": {
      "op": "SHL"
    },
    "2093": {
      "op": "SUB"
    },
    "2094": {
      "op": "DUP2"
    },
    "2095": {
      "op": "AND"
    },
    "2096": {
      "op": "DUP2"
    },
    "2097": {
      "op": "EQ"
    },
    "2098": {
      "op": "PUSH2",
      "value": "0x83A"
    },
    "2101": {
      "op": "JUMPI"
    },
    "2102": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2104": {
      "op": "DUP1"
    },
    "2105": {
      "op": "REVERT"
    },
    "2106": {
      "op": "JUMPDEST"
    },
    "2107": {
      "op": "SWAP2"
    },
    "2108": {
      "op": "SWAP1"
    },
    "2109": {
      "op": "POP"
    },
    "2110": {
      "jump": "o",
      "op": "JUMP"
    },
    "2111": {
      "op": "JUMPDEST"
    },
    "2112": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2114": {
      "op": "DUP1"
    },
    "2115": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2117": {
      "op": "DUP4"
    },
    "2118": {
      "op": "DUP6"
    },
    "2119": {
      "op": "SUB"
    },
    "2120": {
      "op": "SLT"
    },
    "2121": {
      "op": "ISZERO"
    },
    "2122": {
      "op": "PUSH2",
      "value": "0x852"
    },
    "2125": {
      "op": "JUMPI"
    },
    "2126": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2128": {
      "op": "DUP1"
    },
    "2129": {
      "op": "REVERT"
    },
    "2130": {
      "op": "JUMPDEST"
    },
    "2131": {
      "op": "PUSH2",
      "value": "0x85B"
    },
    "2134": {
      "op": "DUP4"
    },
    "2135": {
      "op": "PUSH2",
      "value": "0x823"
    },
    "2138": {
      "jump": "i",
      "op": "JUMP"
    },
    "2139": {
      "op": "JUMPDEST"
    },
    "2140": {
      "op": "SWAP5"
    },
    "2141": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2143": {
      "op": "SWAP4"
    },
    "2144": {
      "op": "SWAP1"
    },
    "2145": {
      "op": "SWAP4"
    },
    "2146": {
      "op": "ADD"
    },
    "2147": {
      "op": "CALLDATALOAD"
    },
    "2148": {
      "op": "SWAP4"
    },
    "2149": {
      "op": "POP"
    },
    "2150": {
      "op": "POP"
    },
    "2151": {
      "op": "POP"
    },
    "2152": {
      "jump": "o",
      "op": "JUMP"
    },
    "2153": {
      "op": "JUMPDEST"
    },
    "2154": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2156": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2158": {
      "op": "DUP3"
    },
    "2159": {
      "op": "DUP5"
    },
    "2160": {
      "op": "SUB"
    },
    "2161": {
      "op": "SLT"
    },
    "2162": {
      "op": "ISZERO"
    },
    "2163": {
      "op": "PUSH2",
      "value": "0x87B"
    },
    "2166": {
      "op": "JUMPI"
    },
    "2167": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2169": {
      "op": "DUP1"
    },
    "2170": {
      "op": "REVERT"
    },
    "2171": {
      "op": "JUMPDEST"
    },
    "2172": {
      "op": "PUSH2",
      "value": "0x7AE"
    },
    "2175": {
      "op": "DUP3"
    },
    "2176": {
      "op": "PUSH2",
      "value": "0x823"
    },
    "2179": {
      "jump": "i",
      "op": "JUMP"
    },
    "2180": {
      "op": "JUMPDEST"
    },
    "2181": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2183": {
      "op": "DUP2"
    },
    "2184": {
      "op": "DUP2"
    },
    "2185": {
      "op": "SHR"
    },
    "2186": {
      "op": "SWAP1"
    },
    "2187": {
      "op": "DUP3"
    },
    "2188": {
      "op": "AND"
    },
    "2189": {
      "op": "DUP1"
    },
    "2190": {
      "op": "PUSH2",
      "value": "0x898"
    },
    "2193": {
      "op": "JUMPI"
    },
    "2194": {
      "op": "PUSH1",
      "value": "0x7F"
    },
    "2196": {
      "op": "DUP3"
    },
    "2197": {
      "op": "AND"
    },
    "2198": {
      "op": "SWAP2"
    },
    "2199": {
      "op": "POP"
    },
    "2200": {
      "op": "JUMPDEST"
    },
    "2201": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2203": {
      "op": "DUP3"
    },
    "2204": {
      "op": "LT"
    },
    "2205": {
      "op": "DUP2"
    },
    "2206": {
      "op": "EQ"
    },
    "2207": {
      "op": "ISZERO"
    },
    "2208": {
      "op": "PUSH2",
      "value": "0x8B9"
    },
    "2211": {
      "op": "JUMPI"
    },
    "2212": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2217": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2219": {
      "op": "SHL"
    },
    "2220": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2222": {
      "op": "MSTORE"
    },
    "2223": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "2225": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2227": {
      "op": "MSTORE"
    },
    "2228": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2230": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2232": {
      "op": "REVERT"
    },
    "2233": {
      "op": "JUMPDEST"
    },
    "2234": {
      "op": "POP"
    },
    "2235": {
      "op": "SWAP2"
    },
    "2236": {
      "op": "SWAP1"
    },
    "2237": {
      "op": "POP"
    },
    "2238": {
      "jump": "o",
      "op": "JUMP"
    },
    "2239": {
      "op": "JUMPDEST"
    },
    "2240": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2242": {
      "op": "DUP3"
    },
    "2243": {
      "op": "DUP3"
    },
    "2244": {
      "op": "LT"
    },
    "2245": {
      "op": "ISZERO"
    },
    "2246": {
      "op": "PUSH2",
      "value": "0x8DF"
    },
    "2249": {
      "op": "JUMPI"
    },
    "2250": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2255": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2257": {
      "op": "SHL"
    },
    "2258": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2260": {
      "op": "MSTORE"
    },
    "2261": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "2263": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2265": {
      "op": "MSTORE"
    },
    "2266": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2268": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2270": {
      "op": "REVERT"
    },
    "2271": {
      "op": "JUMPDEST"
    },
    "2272": {
      "op": "POP"
    },
    "2273": {
      "op": "SUB"
    },
    "2274": {
      "op": "SWAP1"
    },
    "2275": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "d9f26a29a09c85afaedb624e24cd5a5f322d1db6",
  "source": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.8;\n\nimport \"../contracts/interfaces/ISoulbound.sol\";\nimport \"../eips/ERC-4973.sol\";\n\n/**\n* @title Soulbound Token Contract.\n* @author Daccred.\n* @dev  Soulbound Token Base Template.\n*       This contract was inspired by\n*       https://github.com/ethereum/EIPs/blob/master/assets/eip-4973/ERC-4973.sol\n*       This contract is inherited by any contract to implement the Soulbound\n*       template.\n*       Soulbound tokens  cannot be transferred when minted to a particular address.\n*       This is the base instance of the contract,\n*       it includes minting functions and revoke functions.\n*       Inheriting functions can wrap around the specified functions.\n*       Also, this base contract instance does not include a capped supply.\n*/\ncontract Soulbound is ERC4973 {\n    /** \n    * @dev  Stores the base URI on cases when the user wants to mint a token,\n    *       it automatically generates a string casted tokenURI using the\n    *       generateTokenURI function. This variable can only be modified by\n    *       the allowlist owner.\n    */\n    string private baseURI;\n\n    /// @dev Mapping of speific addresses to tokenIds and boolean for mint records.\n    mapping(address => mapping(uint256 => bool)) private mints;\n\n    /// @dev Allows the deployer to set a name and a symbol for the token.\n    constructor(string memory name, string memory symbol) ERC4973(name, symbol) {}\n\n    /**\n    * @dev  Mints a new token `_tokenId` to `_to`, giving to ownership of token `_tokenId`.\n    *       This function will be used hand in hand with ERC721's _mint() function.\n    *       Emits the {Attest} event.\n    *       `_to` cannot transfer the token.\n    *       `_to` must not be a 0 address.\n    *       `_tokenId` must be an existent token.\n    *       This does not evaluate total supply of tokens before minting.\n    *\n    * @notice Callable by anyone.\n    *\n    * @param _to        Address to which token `_tokenId` is minted.\n    * @param _tokenId   Token to mint.\n    * @param tokenURI   Auto generated or user passed URI for minted token.\n    *\n    * @return bool true or false.\n    */\n    function issue(\n        address _to, \n        uint256 _tokenId, \n        string memory tokenURI\n    ) internal returns(bool)\n    {\n        /// @dev Mint Soulbound token to `_to` using ERC4973 _mint().\n        mintSoulboundToken(\n            _to, \n            _tokenId, \n            tokenURI\n        );\n        /// @dev Return true.\n        return true;\n    }\n\n    /**\n    * @dev  Withdraws ownership of token `_tokenId` from `_From`.\n    *       This will be done when the ERC721's _burn() function is called.\n    *       Emits the {Revoke} event.\n    *       `_from` must own the token.\n    *       `_from` must not be a 0 address.\n    *       `_tokenId` must be an existent token.\n    *       The function can only be called by the issuer of the token.\n    *       This modifier onlyIssuer will be implemented in the contract.\n    *       [Modifiers cannot be made in interfaces].\n    *       This does not evaluate total supply of tokens before minting.\n    *\n    * @notice Callable by this or inheriting contract.\n    *\n    * @param _from      Address which owns token `_tokenId`.\n    * @param _tokenId   Token to revoke.\n    *\n    * @return bool true or false.\n    */\n    function revoke(address _from, uint256 _tokenId) internal returns(bool) {\n        /// @dev Require token exists.\n        require(_exists(_tokenId), \"Non-existent token.\");\n        /// @dev Require _tokenId is owned by _from.\n        require(ownerOf(_tokenId) == _from, \"Token not owned by address\");\n        /// @dev Burn the token.\n        burnSoulboundToken(_tokenId);\n        /// @dev Return true.\n        return true;\n    }\n\n    /**\n    * @dev  Since a token cannnot be minted twice.\n    *       This function returns the address that minted token `_tokenId` to `_to`,\n    *       otherwise this contract.\n    *       `_to` must not be a 0 address.\n    *       `_tokenId` must be an existent token.\n    *       Owner of _tokenId must be _to.\n    *\n    * @notice Callable by anyone.\n    *\n    * @param _to        Address to which token `_tokenId` is minted.\n    * @param _tokenId   Token minted.\n    *\n    * @return address of issuer.\n    */\n    function issuerOf(address _to, uint256 _tokenId) public view returns(address) {\n        /// @dev Require _to is not a zero address.\n        require(_to != address(0), \"Query for zero address.\");\n        /// @dev Require token exists.\n        require(_exists(_tokenId), \"Non-existent token.\");\n        /// @dev Require _tokenId is owned by _to.\n        require(ownerOf(_tokenId) == _to, \"Token not owned by address\");\n        /// @dev Returns this address.\n        return address(this);\n    }\n\n    /**\n    * @dev  Returns true if token `_tokenId` was minted from this contract to `_to`.\n    *       `_to` must not be a 0 address.\n    *       `_tokenId` must be an existent token.\n    *\n    * @notice Callable by anyone.\n    *\n    * @param _to        Address to which token `_tokenId` is minted.\n    * @param _tokenId   Token minted.\n    *\n    * @return bool true or false.\n    */\n    function isMinted(\n        address _to, \n        uint256 _tokenId\n    ) public view returns(bool) {\n        return mints[_to][_tokenId];\n    }\n\n    /**\n    * @dev Mints `tokenId` of the soulbound token to `to`.\n    *\n    * @param to         Receiver of the tokens.\n    * @param tokenId    Amount to be minted, GT 0.\n    * @param tokenURI   URI of token minted.\n    */\n    function mintSoulboundToken(\n        address to, \n        uint256 tokenId, \n        string memory tokenURI\n    ) private \n    {\n        /// @dev Require the address receiving is not a zero address.\n        require(to != address(0), \"Mint to zero address.\");\n        /// @dev    ERC-4973 doesn't include checks for empty tokenURIs\n        ///         but they should be necessary.\n        require(bytes(tokenURI).length != 0, \"Empty tokenURI.\");\n        /// @dev    Mint to the `to` address.\n        ///         ERC4973 runs check for existent token.\n        _mint(to, tokenId, tokenURI);\n        /// @dev Set record of owner to true;\n        mints[to][tokenId] = true;\n    }\n\n    /**\n    * @dev  Burns a soulbound token, on the condition that\n    *       the token exists.\n    *\n    * @param tokenId Token to be burnt.\n    */\n    function burnSoulboundToken(uint256 tokenId) private {\n        /// @dev Checks that the token actually exists.\n        require(_exists(tokenId), \"Burn of inexistent token\");\n        /// @dev Get owner of token tokenId.\n        address _tokenOwner = ownerOf(tokenId);\n        /// @dev Burn the token.\n        _burn(tokenId);\n        /// @dev Set record of owner to false.\n        mints[_tokenOwner][tokenId] = false;\n    }\n\n    /**\n    * @dev Sets the baseURI to `_baseURI`.\n    *\n    * @notice Callable by this or inheriting contract.\n    *\n    * @param _baseURI String URI.\n    */\n    function _setBaseURI(string memory _baseURI) internal {\n        /// @dev Ensure that the word length is 0.\n        require(bytes(_baseURI).length != 0, \"Invalid length\");\n        /// @dev Set baseURI.\n        baseURI = _baseURI;\n    }\n\n    /**\n    * @dev Returns already set baseURI if it exists.\n    *\n    * @notice Callable by anyone.\n    *\n    * @return _baseURI baseURI set.\n    */\n    function _getBaseURI() public view returns(string memory _baseURI) {\n        /// @dev Require baseURI length is not 0.\n        require(bytes(baseURI).length != 0, \"Empty baseURI\");\n        /// @dev Return baseURI.\n        _baseURI = baseURI;\n    }\n}\n",
  "sourceMap": "800:6798:6:-:0;;;1367:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4248:13:2;;1429:4:6;;1435:6;;4248:13:2;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;4267:17:2;;;;:7;;:17;;;;;:::i;:::-;;4174:115;;1367:78:6;;800:6798;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;800:6798:6;;;-1:-1:-1;800:6798:6;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:10;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:885;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:10;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:10;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;930:2;927:1;924:9;921:80;;;989:1;984:2;979;971:6;967:15;963:24;956:35;921:80;1019:6;146:885;-1:-1:-1;;;;;;146:885:10:o;1036:562::-;1135:6;1143;1196:2;1184:9;1175:7;1171:23;1167:32;1164:52;;;1212:1;1209;1202:12;1164:52;1239:16;;-1:-1:-1;;;;;1304:14:10;;;1301:34;;;1331:1;1328;1321:12;1301:34;1354:61;1407:7;1398:6;1387:9;1383:22;1354:61;:::i;:::-;1344:71;;1461:2;1450:9;1446:18;1440:25;1424:41;;1490:2;1480:8;1477:16;1474:36;;;1506:1;1503;1496:12;1474:36;;1529:63;1584:7;1573:8;1562:9;1558:24;1529:63;:::i;:::-;1519:73;;;1036:562;;;;;:::o;1603:380::-;1682:1;1678:12;;;;1725;;;1746:61;;1800:4;1792:6;1788:17;1778:27;;1746:61;1853:2;1845:6;1842:14;1822:18;1819:38;1816:161;;;1899:10;1894:3;1890:20;1887:1;1880:31;1934:4;1931:1;1924:15;1962:4;1959:1;1952:15;1816:161;;1603:380;;;:::o;:::-;800:6798:6;;;;;;",
  "sourcePath": "contracts/extensions/Soulbound.sol",
  "type": "contract"
}